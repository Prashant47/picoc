cscope 15 $HOME/workspace/xv6-project/xv6-i386/src/picoc/picoc.diet               0000544662
	@clibrary.c

1 
	~"picoc.h
"

2 
	~"öãΩªãr.h
"

5 c⁄° *
	gVîsi⁄Såög
 = 
NULL
;

8 c⁄° 
	g__ENDIAN_CHECK__
 = 1;

10 
	gBigEndün
 = 0;

11 
	gLôéeEndün
 = 0;

15 
	$LibøryInô
()

18 
Vîsi⁄Såög
 = 
	`TabÀSåRegi°î
(
PICOC_VERSION
);

19 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "PICOC_VERSION", 
Ch¨PåTy≥
, (
AnyVÆue
 *)&
Vîsi⁄Såög
, 
FALSE
);

22 
BigEndün
 = ((*(*)&
__ENDIAN_CHECK__
) == 0);

23 
LôéeEndün
 = ((*(*)&
__ENDIAN_CHECK__
) == 1);

25 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "BIG_ENDIAN", &
I¡Ty≥
, (
AnyVÆue
 *)&
BigEndün
, 
FALSE
);

26 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "LITTLE_ENDIAN", &
I¡Ty≥
, (
AnyVÆue
 *)&
LôéeEndün
, 
FALSE
);

27 
	}
}

30 
	$LibøryAdd
(
TabÀ
 *
GlobÆTabÀ
, c⁄° *
LibøryName
, 
LibøryFun˘i⁄
 *
FuncLi°
)

33 
P¨£Sèã
 
P¨£r
;

34 
Cou¡
;

35 *
Idítifõr
;

36 
VÆueTy≥
 *
Rëu∫Ty≥
;

37 
VÆue
 *
NewVÆue
;

38 *
Tokís
;

39 c⁄° *
I¡rösicName
 = 
	`TabÀSåRegi°î
("cÜibrary");

42 
Cou¡
 = 0; 
FuncLi°
[Cou¡].
PrŸŸy≥
 !
NULL
; Count++)

45 
Tokís
 = 
	`LexA«ly£
(
I¡rösicName
, 
FuncLi°
[
Cou¡
].
PrŸŸy≥
, 
	`°æí
((*)FuncLi°[Cou¡].PrŸŸy≥), 
NULL
);

46 
	`LexInôP¨£r
(&
P¨£r
, 
FuncLi°
[
Cou¡
].
PrŸŸy≥
, 
Tokís
, 
I¡rösicName
, 
TRUE
);

47 
	`Ty≥P¨£
(&
P¨£r
, &
Rëu∫Ty≥
, &
Idítifõr
, 
NULL
);

49 
NewVÆue
 = 
	`P¨£Fun˘i⁄Deföôi⁄
(&
P¨£r
, 
Rëu∫Ty≥
, 
Idítifõr
);

50 
NewVÆue
->
VÆ
->
FuncDef
.
I¡rösic
 = 
FuncLi°
[
Cou¡
].
Func
;

51 
	`HópFªeMem
(
Tokís
);

53 
	}
}

56 
	$PrötTy≥
(
VÆueTy≥
 *
Typ
, 
IOFILE
 *
Såóm
)

58 
Typ
->
Ba£
)

60 
Ty≥Void
: 
	`PrötSå
("void", 
Såóm
); ;

61 
Ty≥I¡
: 
	`PrötSå
("öt", 
Såóm
); ;

62 
Ty≥Sh‹t
: 
	`PrötSå
("sh‹t", 
Såóm
); ;

63 
Ty≥Ch¨
: 
	`PrötSå
("ch¨", 
Såóm
); ;

64 
Ty≥L⁄g
: 
	`PrötSå
("l⁄g", 
Såóm
); ;

65 
Ty≥Unsig√dI¡
: 
	`PrötSå
("unsig√d i¡", 
Såóm
); ;

66 
Ty≥Unsig√dSh‹t
: 
	`PrötSå
("unsig√d sh‹t", 
Såóm
); ;

67 
Ty≥Unsig√dL⁄g
: 
	`PrötSå
("unsig√dÜ⁄g", 
Såóm
); ;

68 #i‚de‡
NO_FP


69 
Ty≥FP
: 
	`PrötSå
("doubÀ", 
Såóm
); ;

71 
Ty≥Fun˘i⁄
: 
	`PrötSå
("fun˘i⁄", 
Såóm
); ;

72 
Ty≥Ma¸o
: 
	`PrötSå
("ma¸o", 
Såóm
); ;

73 
Ty≥Poöãr
: i‡(
Typ
->
FromTy≥
Ë
	`PrötTy≥
(Typ->FromTy≥, 
Såóm
); 
	`PrötCh
('*', Stream); ;

74 
Ty≥Aºay
: 
	`PrötTy≥
(
Typ
->
FromTy≥
, 
Såóm
); 
	`PrötCh
('[', Såóm); i‡(Typ->
AºaySize
 !0Ë
	`PrötSim∂eI¡
(Typ->ArraySize, Stream); PrintCh(']', Stream); ;

75 
Ty≥Såu˘
: 
	`PrötSå
("°ru˘ ", 
Såóm
); PrötSå(
Typ
->
Idítifõr
, Stream); ;

76 
Ty≥Uni⁄
: 
	`PrötSå
("uni⁄ ", 
Såóm
); PrötSå(
Typ
->
Idítifõr
, Stream); ;

77 
Ty≥Enum
: 
	`PrötSå
("íum ", 
Såóm
); PrötSå(
Typ
->
Idítifõr
, Stream); ;

78 
Ty≥GŸoLabñ
: 
	`PrötSå
("gŸÿœbñ ", 
Såóm
); ;

79 
Ty≥_Ty≥
: 
	`PrötSå
("ty≥ ", 
Såóm
); ;

81 
	}
}

84 #ifde‡
BUILTIN_MINI_STDLIB


93 
IOFILE
 *
	gCStdOut
;

94 
IOFILE
 
	gCStdOutBa£
;

96 
	gTRUEVÆue
 = 1;

97 
	gZîoVÆue
 = 0;

99 
	$BasicIOInô
()

101 
CStdOutBa£
.
Putch
 = &
Pœtf‹mPutc
;

102 
CStdOut
 = &
CStdOutBa£
;

103 
	}
}

106 
	$CLibøryInô
()

109 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

110 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "TRUE", &
I¡Ty≥
, (
AnyVÆue
 *)&
TRUEVÆue
, 
FALSE
);

111 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "FALSE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

112 
	}
}

115 
	$SPutc
(
Ch
, 
OuçutSåómInfo
 *
Såóm
)

117 
SåögOuçutSåóm
 *
Out
 = &
Såóm
->
Så
;

118 *
Out
->
WrôePos
++ = 
Ch
;

119 
	}
}

122 
	$PrötCh
(
OutCh
, 
OuçutSåóm
 *
Såóm
)

124 (*
Såóm
->
Putch
)(
OutCh
, &Såóm->
i
);

125 
	}
}

128 
	$PrötSå
(c⁄° *
Så
, 
OuçutSåóm
 *
Såóm
)

130 *
Så
 != 0)

131 
	`PrötCh
(*
Så
++, 
Såóm
);

132 
	}
}

135 
	$PrötRïóãdCh¨
(
ShowCh¨
, 
Lígth
, 
OuçutSåóm
 *
Såóm
)

137 
Lígth
-- > 0)

138 
	`PrötCh
(
ShowCh¨
, 
Såóm
);

139 
	}
}

142 
	$PrötUnsig√d
(
Num
, 
Ba£
, 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
OuçutSåóm
 *
Såóm
)

144 
Resu…
[33];

145 
ResPos
 = (
Resu…
);

147 
Resu…
[--
ResPos
] = '\0';

148 i‡(
Num
 == 0)

149 
Resu…
[--
ResPos
] = '0';

151 
Num
 > 0)

153 
NextNum
 = 
Num
 / 
Ba£
;

154 
Digô
 = 
Num
 - 
NextNum
 * 
Ba£
;

155 i‡(
Digô
 < 10)

156 
Resu…
[--
ResPos
] = '0' + 
Digô
;

158 
Resu…
[--
ResPos
] = 'a' + 
Digô
 - 10;

160 
Num
 = 
NextNum
;

163 i‡(
FõldWidth
 > 0 && !
Le·Ju°ify
)

164 
	`PrötRïóãdCh¨
(
ZîoPad
 ? '0' : ' ', 
FõldWidth
 - ((
Resu…
Ë- 1 - 
ResPos
), 
Såóm
);

166 
	`PrötSå
(&
Resu…
[
ResPos
], 
Såóm
);

168 i‡(
FõldWidth
 > 0 && 
Le·Ju°ify
)

169 
	`PrötRïóãdCh¨
(' ', 
FõldWidth
 - ((
Resu…
Ë- 1 - 
ResPos
), 
Såóm
);

170 
	}
}

173 
	$PrötSim∂eI¡
(
Num
, 
OuçutSåóm
 *
Såóm
)

175 
	`PrötI¡
(
Num
, -1, 
FALSE
, FALSE, 
Såóm
);

176 
	}
}

179 
	$PrötI¡
(
Num
, 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
OuçutSåóm
 *
Såóm
)

181 i‡(
Num
 < 0)

183 
	`PrötCh
('-', 
Såóm
);

184 
Num
 = -Num;

185 i‡(
FõldWidth
 != 0)

186 
FõldWidth
--;

189 
	`PrötUnsig√d
(()
Num
, 10, 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
Såóm
);

190 
	}
}

192 #i‚de‡
NO_FP


194 
	$PrötFP
(
Num
, 
OuçutSåóm
 *
Såóm
)

196 
Exp⁄ít
 = 0;

197 
MaxDecimÆ
;

199 i‡(
Num
 < 0)

201 
	`PrötCh
('-', 
Såóm
);

202 
Num
 = -Num;

205 i‡(
Num
 >= 1e7)

206 
Exp⁄ít
 = 
	`log10
(
Num
);

207 i‡(
Num
 <= 1e-7 && Num != 0.0)

208 
Exp⁄ít
 = 
	`log10
(
Num
) - 0.999999999;

210 
Num
 /
	`pow
(10.0, 
Exp⁄ít
);

211 
	`PrötI¡
(()
Num
, 0, 
FALSE
, FALSE, 
Såóm
);

212 
	`PrötCh
('.', 
Såóm
);

213 
Num
 = (Num - ()Num) * 10;

214 i‡(
	`abs
(
Num
) >= 1e-7)

216 
MaxDecimÆ
 = 6; MaxDecimÆ > 0 && 
	`abs
(
Num
) >= 1e-7; Num = (Num - ()(Num + 1e-7)) * 10, MaxDecimal--)

217 
	`PrötCh
('0' + ()(
Num
 + 1e-7), 
Såóm
);

220 
	`PrötCh
('0', 
Såóm
);

222 i‡(
Exp⁄ít
 != 0)

224 
	`PrötCh
('e', 
Såóm
);

225 
	`PrötI¡
(
Exp⁄ít
, 0, 
FALSE
, FALSE, 
Såóm
);

227 
	}
}

231 
	$GíîicPrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
, 
OuçutSåóm
 *
Såóm
)

233 *
FPos
;

234 
VÆue
 *
NextArg
 = 
P¨am
[0];

235 
VÆueTy≥
 *
F‹m©Ty≥
;

236 
ArgCou¡
 = 1;

237 
Le·Ju°ify
 = 
FALSE
;

238 
ZîoPad
 = 
FALSE
;

239 
FõldWidth
 = 0;

240 *
F‹m©
 = 
P¨am
[0]->
VÆ
->
Poöãr
;

242 
FPos
 = 
F‹m©
; *FPos != '\0'; FPos++)

244 i‡(*
FPos
 == '%')

246 
FPos
++;

247 i‡(*
FPos
 == '-')

250 
Le·Ju°ify
 = 
TRUE
;

251 
FPos
++;

254 i‡(*
FPos
 == '0')

257 
ZîoPad
 = 
TRUE
;

258 
FPos
++;

262 
	`isdigô
(()*
FPos
))

263 
FõldWidth
 = FõldWidth * 10 + (*
FPos
++ - '0');

266 *
FPos
)

268 's': 
F‹m©Ty≥
 = 
Ch¨PåTy≥
; ;

269 'd': 'u': 'x': 'b': 'c': 
F‹m©Ty≥
 = &
I¡Ty≥
; ;

270 #i‚de‡
NO_FP


271 'f': 
F‹m©Ty≥
 = &
FPTy≥
; ;

273 '%': 
	`PrötCh
('%', 
Såóm
); 
F‹m©Ty≥
 = 
NULL
; ;

274 '\0': 
FPos
--; 
F‹m©Ty≥
 = 
NULL
; ;

275 : 
	`PrötCh
(*
FPos
, 
Såóm
); 
F‹m©Ty≥
 = 
NULL
; ;

278 i‡(
F‹m©Ty≥
 !
NULL
)

281 i‡(
ArgCou¡
 >
NumArgs
)

282 
	`PrötSå
("XXX", 
Såóm
);

285 
NextArg
 = (
VÆue
 *)((*)NextArg + 
	`MEM_ALIGN
((VÆueË+ 
	`Ty≥SèckSizeVÆue
(NextArg)));

286 i‡(
NextArg
->
Typ
 !
F‹m©Ty≥
 &&

287 !((
F‹m©Ty≥
 =&
I¡Ty≥
 || *
FPos
 ='f'Ë&& 
	`IS_NUMERIC_COERCIBLE
(
NextArg
)) &&

288 !(
F‹m©Ty≥
 =
Ch¨PåTy≥
 && (
NextArg
->
Typ
->
Ba£
 =
Ty≥Poöãr
 ||

289 (
NextArg
->
Typ
->
Ba£
 =
Ty≥Aºay
 && NextArg->Typ->
FromTy≥
->Ba£ =
Ty≥Ch¨
) ) ) )

290 
	`PrötSå
("XXX", 
Såóm
);

293 *
FPos
)

297 *
Så
;

299 i‡(
NextArg
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

300 
Så
 = 
NextArg
->
VÆ
->
Poöãr
;

302 
Så
 = &
NextArg
->
VÆ
->
AºayMem
[0];

304 i‡(
Så
 =
NULL
)

305 
	`PrötSå
("NULL", 
Såóm
);

307 
	`PrötSå
(
Så
, 
Såóm
);

310 'd': 
	`PrötI¡
(
	`Ex¥essi⁄C€r˚I¡egî
(
NextArg
), 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
Såóm
); ;

311 'u': 
	`PrötUnsig√d
(
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
NextArg
), 10, 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
Såóm
); ;

312 'x': 
	`PrötUnsig√d
(
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
NextArg
), 16, 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
Såóm
); ;

313 'b': 
	`PrötUnsig√d
(
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
NextArg
), 2, 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
Såóm
); ;

314 'c': 
	`PrötCh
(
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
NextArg
), 
Såóm
); ;

315 #i‚de‡
NO_FP


316 'f': 
	`PrötFP
(
	`Ex¥essi⁄C€r˚FP
(
NextArg
), 
Såóm
); ;

322 
ArgCou¡
++;

326 
	`PrötCh
(*
FPos
, 
Såóm
);

328 
	}
}

331 
	$LibPrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

333 
OuçutSåóm
 
C⁄sﬁeSåóm
;

335 
C⁄sﬁeSåóm
.
Putch
 = &
Pœtf‹mPutc
;

336 
	`GíîicPrötf
(
P¨£r
, 
Rëu∫VÆue
, 
P¨am
, 
NumArgs
, &
C⁄sﬁeSåóm
);

337 
	}
}

340 
	$LibSPrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

342 
OuçutSåóm
 
SåSåóm
;

344 
SåSåóm
.
Putch
 = &
SPutc
;

345 
SåSåóm
.
i
.
Så
.
P¨£r
 = Parser;

346 
SåSåóm
.
i
.
Så
.
WrôePos
 = 
P¨am
[0]->
VÆ
->
Poöãr
;

348 
	`GíîicPrötf
(
P¨£r
, 
Rëu∫VÆue
, 
P¨am
+1, 
NumArgs
-1, &
SåSåóm
);

349 
	`PrötCh
(0, &
SåSåóm
);

350 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = *
P¨am
;

351 
	}
}

354 
	$LibGës
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

356 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`Pœtf‹mGëLöe
(
P¨am
[0]->VÆ->Poöãr, 
GETS_BUF_MAX
, 
NULL
);

357 i‡(
Rëu∫VÆue
->
VÆ
->
Poöãr
 !
NULL
)

359 *
EOLPos
 = 
	`°rchr
(
P¨am
[0]->
VÆ
->
Poöãr
, '\n');

360 i‡(
EOLPos
 !
NULL
)

361 *
EOLPos
 = '\0';

363 
	}
}

365 
	$LibGëc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

367 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`Pœtf‹mGëCh¨a˘î
();

368 
	}
}

370 
	$LibExô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

372 
	`Pœtf‹mExô
(
P¨am
[0]->
VÆ
->
I¡egî
);

373 
	}
}

375 #ifde‡
PICOC_LIBRARY


376 
	$LibSö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

378 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`sö
(
P¨am
[0]->Val->FP);

379 
	}
}

381 
	$LibCos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

383 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`cos
(
P¨am
[0]->Val->FP);

384 
	}
}

386 
	$LibT™
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

388 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`èn
(
P¨am
[0]->Val->FP);

389 
	}
}

391 
	$LibAsö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

393 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`asö
(
P¨am
[0]->Val->FP);

394 
	}
}

396 
	$LibAcos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

398 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`acos
(
P¨am
[0]->Val->FP);

399 
	}
}

401 
	$LibAèn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

403 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`©™
(
P¨am
[0]->Val->FP);

404 
	}
}

406 
	$LibSöh
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

408 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`söh
(
P¨am
[0]->Val->FP);

409 
	}
}

411 
	$LibCosh
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

413 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`cosh
(
P¨am
[0]->Val->FP);

414 
	}
}

416 
	$LibT™h
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

418 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`ènh
(
P¨am
[0]->Val->FP);

419 
	}
}

421 
	$LibExp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

423 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`exp
(
P¨am
[0]->Val->FP);

424 
	}
}

426 
	$LibFabs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

428 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`Ábs
(
P¨am
[0]->Val->FP);

429 
	}
}

431 
	$LibLog
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

433 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`log
(
P¨am
[0]->Val->FP);

434 
	}
}

436 
	$LibLog10
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

438 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`log10
(
P¨am
[0]->Val->FP);

439 
	}
}

441 
	$LibPow
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

443 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`pow
(
P¨am
[0]->Val->FP, Param[1]->Val->FP);

444 
	}
}

446 
	$LibSqπ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

448 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`sqπ
(
P¨am
[0]->Val->FP);

449 
	}
}

451 
	$LibRound
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

453 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`Êo‹
(
P¨am
[0]->Val->FP + 0.5);

454 
	}
}

456 
	$LibCeû
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

458 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`˚û
(
P¨am
[0]->Val->FP);

459 
	}
}

461 
	$LibFlo‹
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

463 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`Êo‹
(
P¨am
[0]->Val->FP);

464 
	}
}

467 #i‚de‡
NO_STRING_FUNCTIONS


468 
	$LibMÆloc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

470 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`mÆloc
(
P¨am
[0]->VÆ->
I¡egî
);

471 
	}
}

473 #i‚de‡
NO_CALLOC


474 
	$LibCÆloc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

476 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ˇŒoc
(
P¨am
[0]->VÆ->
I¡egî
, Param[1]->Val->Integer);

477 
	}
}

480 #i‚de‡
NO_REALLOC


481 
	$LibRóŒoc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

483 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ªÆloc
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

484 
	}
}

487 
	$LibFªe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

489 
	`‰ì
(
P¨am
[0]->
VÆ
->
Poöãr
);

490 
	}
}

492 
	$LibSå˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

494 *
To
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

495 *
From
 = (*)
P¨am
[1]->
VÆ
->
Poöãr
;

497 *
From
 != '\0')

498 *
To
++ = *
From
++;

500 *
To
 = '\0';

501 
	}
}

503 
	$LibSån˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

505 *
To
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

506 *
From
 = (*)
P¨am
[1]->
VÆ
->
Poöãr
;

507 
Lí
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

509 ; *
From
 !'\0' && 
Lí
 > 0; Len--)

510 *
To
++ = *
From
++;

512 i‡(
Lí
 > 0)

513 *
To
 = '\0';

514 
	}
}

516 
	$LibSåcmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

518 *
Så1
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

519 *
Så2
 = (*)
P¨am
[1]->
VÆ
->
Poöãr
;

520 
SåEnded
;

522 
SåEnded
 = 
FALSE
; !SåEnded; SåEnded = (*
Så1
 ='\0' || *
Så2
 == '\0'), Str1++, Str2++)

524 i‡(*
Så1
 < *
Så2
Ë{ 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = -1; ; }

525 i‡(*
Så1
 > *
Så2
Ë{ 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1; ; }

528 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

529 
	}
}

531 
	$LibSåncmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

533 *
Så1
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

534 *
Så2
 = (*)
P¨am
[1]->
VÆ
->
Poöãr
;

535 
Lí
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

536 
SåEnded
;

538 
SåEnded
 = 
FALSE
; !SåEnded && 
Lí
 > 0; SåEnded = (*
Så1
 ='\0' || *
Så2
 == '\0'), Str1++, Str2++, Len--)

540 i‡(*
Så1
 < *
Så2
Ë{ 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = -1; ; }

541 i‡(*
Så1
 > *
Så2
Ë{ 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1; ; }

544 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

545 
	}
}

547 
	$LibSåˇt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

549 *
To
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

550 *
From
 = (*)
P¨am
[1]->
VÆ
->
Poöãr
;

552 *
To
 != '\0')

553 
To
++;

555 *
From
 != '\0')

556 *
To
++ = *
From
++;

558 *
To
 = '\0';

559 
	}
}

561 
	$LibIndex
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

563 *
Pos
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

564 
SórchCh¨
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

566 *
Pos
 !'\0' && *Po†!
SórchCh¨
)

567 
Pos
++;

569 i‡(*
Pos
 !
SórchCh¨
)

570 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
NULL
;

572 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
Pos
;

573 
	}
}

575 
	$LibRödex
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

577 *
Pos
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

578 
SórchCh¨
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

580 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
NULL
;

581 ; *
Pos
 != '\0'; Pos++)

583 i‡(*
Pos
 =
SórchCh¨
)

584 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
Pos
;

586 
	}
}

588 
	$LibSåÀn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

590 *
Pos
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

591 
Lí
;

593 
Lí
 = 0; *
Pos
 != '\0'; Pos++)

594 
Lí
++;

596 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
Lí
;

597 
	}
}

599 
	$LibMem£t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

602 
	`mem£t
(
P¨am
[0]->
VÆ
->
Poöãr
, P¨am[1]->VÆ->
I¡egî
, Param[2]->Val->Integer);

603 
	}
}

605 
	$LibMem˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

608 
	`mem˝y
(
P¨am
[0]->
VÆ
->
Poöãr
, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

609 
	}
}

611 
	$LibMemcmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

613 *
Mem1
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

614 *
Mem2
 = (*)
P¨am
[1]->
VÆ
->
Poöãr
;

615 
Lí
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

617 ; 
Lí
 > 0; 
Mem1
++, 
Mem2
++, Len--)

619 i‡(*
Mem1
 < *
Mem2
Ë{ 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = -1; ; }

620 i‡(*
Mem1
 > *
Mem2
Ë{ 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1; ; }

623 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

624 
	}
}

628 
LibøryFun˘i⁄
 
	gCLibøry
[] =

630 { 
LibPrötf
, "voidÖrintf(char *, ...);" },

631 { 
LibSPrötf
, "char *sprintf(char *, char *, ...);" },

632 { 
LibGës
, "char *gets(char *);" },

633 { 
LibGëc
, "int getchar();" },

634 { 
LibExô
, "voidÉxit(int);" },

635 #ifde‡
PICOC_LIBRARY


636 { 
LibSö
, "float sin(float);" },

637 { 
LibCos
, "float cos(float);" },

638 { 
LibT™
, "floatÅan(float);" },

639 { 
LibAsö
, "floatásin(float);" },

640 { 
LibAcos
, "floatácos(float);" },

641 { 
LibAèn
, "floatátan(float);" },

642 { 
LibSöh
, "float sinh(float);" },

643 { 
LibCosh
, "float cosh(float);" },

644 { 
LibT™h
, "floatÅanh(float);" },

645 { 
LibExp
, "floatÉxp(float);" },

646 { 
LibFabs
, "float fabs(float);" },

647 { 
LibLog
, "floatÜog(float);" },

648 { 
LibLog10
, "floatÜog10(float);" },

649 { 
LibPow
, "floatÖow(float,float);" },

650 { 
LibSqπ
, "float sqrt(float);" },

651 { 
LibRound
, "floatÑound(float);" },

652 { 
LibCeû
, "float ceil(float);" },

653 { 
LibFlo‹
, "float floor(float);" },

655 { 
LibMÆloc
, "void *malloc(int);" },

656 #i‚de‡
NO_CALLOC


657 { 
LibCÆloc
, "void *calloc(int,int);" },

659 #i‚de‡
NO_REALLOC


660 { 
LibRóŒoc
, "void *realloc(void *,int);" },

662 { 
LibFªe
, "void free(void *);" },

663 #i‚de‡
NO_STRING_FUNCTIONS


664 { 
LibSå˝y
, "void strcpy(char *,char *);" },

665 { 
LibSån˝y
, "void strncpy(char *,char *,int);" },

666 { 
LibSåcmp
, "int strcmp(char *,char *);" },

667 { 
LibSåncmp
, "int strncmp(char *,char *,int);" },

668 { 
LibSåˇt
, "void strcat(char *,char *);" },

669 { 
LibIndex
, "char *index(char *,int);" },

670 { 
LibRödex
, "char *rindex(char *,int);" },

671 { 
LibSåÀn
, "int strlen(char *);" },

672 { 
LibMem£t
, "void memset(void *,int,int);" },

673 { 
LibMem˝y
, "void memcpy(void *,void *,int);" },

674 { 
LibMemcmp
, "int memcmp(void *,void *,int);" },

676 { 
NULL
, NULL }

	@cstdlib/ctype.c

2 
	~<˘y≥.h
>

3 
	~"../öãΩªãr.h
"

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 
	$StdIß um
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

9 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`iß um
(
P¨am
[0]->Val->Integer);

10 
	}
}

12 
	$StdIßÕha
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

14 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ißÕha
(
P¨am
[0]->Val->Integer);

15 
	}
}

17 
	$StdIsbœnk
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

19 
ch
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

20 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (
ch
 == ' ') | (ch == '\t');

21 
	}
}

23 
	$StdIs˙ål
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

25 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`is˙ål
(
P¨am
[0]->Val->Integer);

26 
	}
}

28 
	$StdIsdigô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

30 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isdigô
(
P¨am
[0]->Val->Integer);

31 
	}
}

33 
	$StdIsgøph
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

35 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isgøph
(
P¨am
[0]->Val->Integer);

36 
	}
}

38 
	$StdI¶owî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

40 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`i¶owî
(
P¨am
[0]->Val->Integer);

41 
	}
}

43 
	$StdI•röt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

45 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`i•röt
(
P¨am
[0]->Val->Integer);

46 
	}
}

48 
	$StdI•un˘
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

50 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`i•un˘
(
P¨am
[0]->Val->Integer);

51 
	}
}

53 
	$StdIs•a˚
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

55 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`is•a˚
(
P¨am
[0]->Val->Integer);

56 
	}
}

58 
	$StdIsuµî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

60 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isuµî
(
P¨am
[0]->Val->Integer);

61 
	}
}

63 
	$StdIsxdigô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

65 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isxdigô
(
P¨am
[0]->Val->Integer);

66 
	}
}

68 
	$StdTﬁowî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

70 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tﬁowî
(
P¨am
[0]->Val->Integer);

71 
	}
}

73 
	$StdTouµî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

75 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`touµî
(
P¨am
[0]->Val->Integer);

76 
	}
}

78 
	$StdIßscii
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

80 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ißscii
(
P¨am
[0]->Val->Integer);

81 
	}
}

89 
LibøryFun˘i⁄
 
	gStdCty≥Fun˘i⁄s
[] =

91 { 
StdIß um
, "int isalnum(int);" },

92 { 
StdIßÕha
, "int isalpha(int);" },

93 { 
StdIsbœnk
, "int isblank(int);" },

94 { 
StdIs˙ål
, "int iscntrl(int);" },

95 { 
StdIsdigô
, "int isdigit(int);" },

96 { 
StdIsgøph
, "int isgraph(int);" },

97 { 
StdI¶owî
, "int islower(int);" },

98 { 
StdI•röt
, "int isprint(int);" },

99 { 
StdI•un˘
, "int ispunct(int);" },

100 { 
StdIs•a˚
, "int isspace(int);" },

101 { 
StdIsuµî
, "int isupper(int);" },

102 { 
StdIsxdigô
, "int isxdigit(int);" },

103 { 
StdTﬁowî
, "intÅolower(int);" },

104 { 
StdTouµî
, "intÅoupper(int);" },

105 { 
StdIßscii
, "int isascii(int);" },

107 { 
NULL
, NULL }

	@cstdlib/ctype.c

2 
	~<˘y≥.h
>

3 
	~"../öãΩªãr.h
"

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 
	$StdIß um
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

9 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`iß um
(
P¨am
[0]->Val->Integer);

10 
	}
}

12 
	$StdIßÕha
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

14 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ißÕha
(
P¨am
[0]->Val->Integer);

15 
	}
}

17 
	$StdIsbœnk
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

19 
ch
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

20 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (
ch
 == ' ') | (ch == '\t');

21 
	}
}

23 
	$StdIs˙ål
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

25 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`is˙ål
(
P¨am
[0]->Val->Integer);

26 
	}
}

28 
	$StdIsdigô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

30 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isdigô
(
P¨am
[0]->Val->Integer);

31 
	}
}

33 
	$StdIsgøph
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

35 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isgøph
(
P¨am
[0]->Val->Integer);

36 
	}
}

38 
	$StdI¶owî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

40 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`i¶owî
(
P¨am
[0]->Val->Integer);

41 
	}
}

43 
	$StdI•röt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

45 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`i•röt
(
P¨am
[0]->Val->Integer);

46 
	}
}

48 
	$StdI•un˘
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

50 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`i•un˘
(
P¨am
[0]->Val->Integer);

51 
	}
}

53 
	$StdIs•a˚
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

55 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`is•a˚
(
P¨am
[0]->Val->Integer);

56 
	}
}

58 
	$StdIsuµî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

60 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isuµî
(
P¨am
[0]->Val->Integer);

61 
	}
}

63 
	$StdIsxdigô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

65 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isxdigô
(
P¨am
[0]->Val->Integer);

66 
	}
}

68 
	$StdTﬁowî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

70 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tﬁowî
(
P¨am
[0]->Val->Integer);

71 
	}
}

73 
	$StdTouµî
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

75 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`touµî
(
P¨am
[0]->Val->Integer);

76 
	}
}

78 
	$StdIßscii
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

80 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ißscii
(
P¨am
[0]->Val->Integer);

81 
	}
}

89 
LibøryFun˘i⁄
 
	gStdCty≥Fun˘i⁄s
[] =

91 { 
StdIß um
, "int isalnum(int);" },

92 { 
StdIßÕha
, "int isalpha(int);" },

93 { 
StdIsbœnk
, "int isblank(int);" },

94 { 
StdIs˙ål
, "int iscntrl(int);" },

95 { 
StdIsdigô
, "int isdigit(int);" },

96 { 
StdIsgøph
, "int isgraph(int);" },

97 { 
StdI¶owî
, "int islower(int);" },

98 { 
StdI•röt
, "int isprint(int);" },

99 { 
StdI•un˘
, "int ispunct(int);" },

100 { 
StdIs•a˚
, "int isspace(int);" },

101 { 
StdIsuµî
, "int isupper(int);" },

102 { 
StdIsxdigô
, "int isxdigit(int);" },

103 { 
StdTﬁowî
, "intÅolower(int);" },

104 { 
StdTouµî
, "intÅoupper(int);" },

105 { 
StdIßscii
, "int isascii(int);" },

107 { 
NULL
, NULL }

	@cstdlib/errno.c

2 
	~<î∫o.h
>

3 
	~"../öãΩªãr.h
"

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 #ifde‡
EACCES


8 
	gEACCESVÆue
 = 
EACCES
;

11 #ifde‡
EADDRINUSE


12 
	gEADDRINUSEVÆue
 = 
EADDRINUSE
;

15 #ifde‡
EADDRNOTAVAIL


16 
	gEADDRNOTAVAILVÆue
 = 
EADDRNOTAVAIL
;

19 #ifde‡
EAFNOSUPPORT


20 
	gEAFNOSUPPORTVÆue
 = 
EAFNOSUPPORT
;

23 #ifde‡
EAGAIN


24 
	gEAGAINVÆue
 = 
EAGAIN
;

27 #ifde‡
EALREADY


28 
	gEALREADYVÆue
 = 
EALREADY
;

31 #ifde‡
EBADF


32 
	gEBADFVÆue
 = 
EBADF
;

35 #ifde‡
EBADMSG


36 
	gEBADMSGVÆue
 = 
EBADMSG
;

39 #ifde‡
EBUSY


40 
	gEBUSYVÆue
 = 
EBUSY
;

43 #ifde‡
ECANCELED


44 
	gECANCELEDVÆue
 = 
ECANCELED
;

47 #ifde‡
ECHILD


48 
	gECHILDVÆue
 = 
ECHILD
;

51 #ifde‡
ECONNABORTED


52 
	gECONNABORTEDVÆue
 = 
ECONNABORTED
;

55 #ifde‡
ECONNREFUSED


56 
	gECONNREFUSEDVÆue
 = 
ECONNREFUSED
;

59 #ifde‡
ECONNRESET


60 
	gECONNRESETVÆue
 = 
ECONNRESET
;

63 #ifde‡
EDEADLK


64 
	gEDEADLKVÆue
 = 
EDEADLK
;

67 #ifde‡
EDESTADDRREQ


68 
	gEDESTADDRREQVÆue
 = 
EDESTADDRREQ
;

71 #ifde‡
EDOM


72 
	gEDOMVÆue
 = 
EDOM
;

75 #ifde‡
EDQUOT


76 
	gEDQUOTVÆue
 = 
EDQUOT
;

79 #ifde‡
EEXIST


80 
	gEEXISTVÆue
 = 
EEXIST
;

83 #ifde‡
EFAULT


84 
	gEFAULTVÆue
 = 
EFAULT
;

87 #ifde‡
EFBIG


88 
	gEFBIGVÆue
 = 
EFBIG
;

91 #ifde‡
EHOSTUNREACH


92 
	gEHOSTUNREACHVÆue
 = 
EHOSTUNREACH
;

95 #ifde‡
EIDRM


96 
	gEIDRMVÆue
 = 
EIDRM
;

99 #ifde‡
EILSEQ


100 
	gEILSEQVÆue
 = 
EILSEQ
;

103 #ifde‡
EINPROGRESS


104 
	gEINPROGRESSVÆue
 = 
EINPROGRESS
;

107 #ifde‡
EINTR


108 
	gEINTRVÆue
 = 
EINTR
;

111 #ifde‡
EINVAL


112 
	gEINVALVÆue
 = 
EINVAL
;

115 #ifde‡
EIO


116 
	gEIOVÆue
 = 
EIO
;

119 #ifde‡
EISCONN


120 
	gEISCONNVÆue
 = 
EISCONN
;

123 #ifde‡
EISDIR


124 
	gEISDIRVÆue
 = 
EISDIR
;

127 #ifde‡
ELOOP


128 
	gELOOPVÆue
 = 
ELOOP
;

131 #ifde‡
EMFILE


132 
	gEMFILEVÆue
 = 
EMFILE
;

135 #ifde‡
EMLINK


136 
	gEMLINKVÆue
 = 
EMLINK
;

139 #ifde‡
EMSGSIZE


140 
	gEMSGSIZEVÆue
 = 
EMSGSIZE
;

143 #ifde‡
EMULTIHOP


144 
	gEMULTIHOPVÆue
 = 
EMULTIHOP
;

147 #ifde‡
ENAMETOOLONG


148 
	gENAMETOOLONGVÆue
 = 
ENAMETOOLONG
;

151 #ifde‡
ENETDOWN


152 
	gENETDOWNVÆue
 = 
ENETDOWN
;

155 #ifde‡
ENETRESET


156 
	gENETRESETVÆue
 = 
ENETRESET
;

159 #ifde‡
ENETUNREACH


160 
	gENETUNREACHVÆue
 = 
ENETUNREACH
;

163 #ifde‡
ENFILE


164 
	gENFILEVÆue
 = 
ENFILE
;

167 #ifde‡
ENOBUFS


168 
	gENOBUFSVÆue
 = 
ENOBUFS
;

171 #ifde‡
ENODATA


172 
	gENODATAVÆue
 = 
ENODATA
;

175 #ifde‡
ENODEV


176 
	gENODEVVÆue
 = 
ENODEV
;

179 #ifde‡
ENOENT


180 
	gENOENTVÆue
 = 
ENOENT
;

183 #ifde‡
ENOEXEC


184 
	gENOEXECVÆue
 = 
ENOEXEC
;

187 #ifde‡
ENOLCK


188 
	gENOLCKVÆue
 = 
ENOLCK
;

191 #ifde‡
ENOLINK


192 
	gENOLINKVÆue
 = 
ENOLINK
;

195 #ifde‡
ENOMEM


196 
	gENOMEMVÆue
 = 
ENOMEM
;

199 #ifde‡
ENOMSG


200 
	gENOMSGVÆue
 = 
ENOMSG
;

203 #ifde‡
ENOPROTOOPT


204 
	gENOPROTOOPTVÆue
 = 
ENOPROTOOPT
;

207 #ifde‡
ENOSPC


208 
	gENOSPCVÆue
 = 
ENOSPC
;

211 #ifde‡
ENOSR


212 
	gENOSRVÆue
 = 
ENOSR
;

215 #ifde‡
ENOSTR


216 
	gENOSTRVÆue
 = 
ENOSTR
;

219 #ifde‡
ENOSYS


220 
	gENOSYSVÆue
 = 
ENOSYS
;

223 #ifde‡
ENOTCONN


224 
	gENOTCONNVÆue
 = 
ENOTCONN
;

227 #ifde‡
ENOTDIR


228 
	gENOTDIRVÆue
 = 
ENOTDIR
;

231 #ifde‡
ENOTEMPTY


232 
	gENOTEMPTYVÆue
 = 
ENOTEMPTY
;

235 #ifde‡
ENOTRECOVERABLE


236 
	gENOTRECOVERABLEVÆue
 = 
ENOTRECOVERABLE
;

239 #ifde‡
ENOTSOCK


240 
	gENOTSOCKVÆue
 = 
ENOTSOCK
;

243 #ifde‡
ENOTSUP


244 
	gENOTSUPVÆue
 = 
ENOTSUP
;

247 #ifde‡
ENOTTY


248 
	gENOTTYVÆue
 = 
ENOTTY
;

251 #ifde‡
ENXIO


252 
	gENXIOVÆue
 = 
ENXIO
;

255 #ifde‡
EOPNOTSUPP


256 
	gEOPNOTSUPPVÆue
 = 
EOPNOTSUPP
;

259 #ifde‡
EOVERFLOW


260 
	gEOVERFLOWVÆue
 = 
EOVERFLOW
;

263 #ifde‡
EOWNERDEAD


264 
	gEOWNERDEADVÆue
 = 
EOWNERDEAD
;

267 #ifde‡
EPERM


268 
	gEPERMVÆue
 = 
EPERM
;

271 #ifde‡
EPIPE


272 
	gEPIPEVÆue
 = 
EPIPE
;

275 #ifde‡
EPROTO


276 
	gEPROTOVÆue
 = 
EPROTO
;

279 #ifde‡
EPROTONOSUPPORT


280 
	gEPROTONOSUPPORTVÆue
 = 
EPROTONOSUPPORT
;

283 #ifde‡
EPROTOTYPE


284 
	gEPROTOTYPEVÆue
 = 
EPROTOTYPE
;

287 #ifde‡
ERANGE


288 
	gERANGEVÆue
 = 
ERANGE
;

291 #ifde‡
EROFS


292 
	gEROFSVÆue
 = 
EROFS
;

295 #ifde‡
ESPIPE


296 
	gESPIPEVÆue
 = 
ESPIPE
;

299 #ifde‡
ESRCH


300 
	gESRCHVÆue
 = 
ESRCH
;

303 #ifde‡
ESTALE


304 
	gESTALEVÆue
 = 
ESTALE
;

307 #ifde‡
ETIME


308 
	gETIMEVÆue
 = 
ETIME
;

311 #ifde‡
ETIMEDOUT


312 
	gETIMEDOUTVÆue
 = 
ETIMEDOUT
;

315 #ifde‡
ETXTBSY


316 
	gETXTBSYVÆue
 = 
ETXTBSY
;

319 #ifde‡
EWOULDBLOCK


320 
	gEWOULDBLOCKVÆue
 = 
EWOULDBLOCK
;

323 #ifde‡
EXDEV


324 
	gEXDEVVÆue
 = 
EXDEV
;

329 
	$StdEºnoSëupFunc
()

332 #ifde‡
EACCES


333 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EACCES", &
I¡Ty≥
, (
AnyVÆue
 *)&
EACCESVÆue
, 
FALSE
);

336 #ifde‡
EADDRINUSE


337 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EADDRINUSE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EADDRINUSEVÆue
, 
FALSE
);

340 #ifde‡
EADDRNOTAVAIL


341 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EADDRNOTAVAIL", &
I¡Ty≥
, (
AnyVÆue
 *)&
EADDRNOTAVAILVÆue
, 
FALSE
);

344 #ifde‡
EAFNOSUPPORT


345 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EAFNOSUPPORT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EAFNOSUPPORTVÆue
, 
FALSE
);

348 #ifde‡
EAGAIN


349 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EAGAIN", &
I¡Ty≥
, (
AnyVÆue
 *)&
EAGAINVÆue
, 
FALSE
);

352 #ifde‡
EALREADY


353 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EALREADY", &
I¡Ty≥
, (
AnyVÆue
 *)&
EALREADYVÆue
, 
FALSE
);

356 #ifde‡
EBADF


357 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EBADF", &
I¡Ty≥
, (
AnyVÆue
 *)&
EBADFVÆue
, 
FALSE
);

360 #ifde‡
EBADMSG


361 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EBADMSG", &
I¡Ty≥
, (
AnyVÆue
 *)&
EBADMSGVÆue
, 
FALSE
);

364 #ifde‡
EBUSY


365 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EBUSY", &
I¡Ty≥
, (
AnyVÆue
 *)&
EBUSYVÆue
, 
FALSE
);

368 #ifde‡
ECANCELED


369 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECANCELED", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECANCELEDVÆue
, 
FALSE
);

372 #ifde‡
ECHILD


373 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECHILD", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECHILDVÆue
, 
FALSE
);

376 #ifde‡
ECONNABORTED


377 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECONNABORTED", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECONNABORTEDVÆue
, 
FALSE
);

380 #ifde‡
ECONNREFUSED


381 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECONNREFUSED", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECONNREFUSEDVÆue
, 
FALSE
);

384 #ifde‡
ECONNRESET


385 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECONNRESET", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECONNRESETVÆue
, 
FALSE
);

388 #ifde‡
EDEADLK


389 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDEADLK", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDEADLKVÆue
, 
FALSE
);

392 #ifde‡
EDESTADDRREQ


393 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDESTADDRREQ", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDESTADDRREQVÆue
, 
FALSE
);

396 #ifde‡
EDOM


397 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDOM", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDOMVÆue
, 
FALSE
);

400 #ifde‡
EDQUOT


401 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDQUOT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDQUOTVÆue
, 
FALSE
);

404 #ifde‡
EEXIST


405 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EEXIST", &
I¡Ty≥
, (
AnyVÆue
 *)&
EEXISTVÆue
, 
FALSE
);

408 #ifde‡
EFAULT


409 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EFAULT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EFAULTVÆue
, 
FALSE
);

412 #ifde‡
EFBIG


413 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EFBIG", &
I¡Ty≥
, (
AnyVÆue
 *)&
EFBIGVÆue
, 
FALSE
);

416 #ifde‡
EHOSTUNREACH


417 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EHOSTUNREACH", &
I¡Ty≥
, (
AnyVÆue
 *)&
EHOSTUNREACHVÆue
, 
FALSE
);

420 #ifde‡
EIDRM


421 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EIDRM", &
I¡Ty≥
, (
AnyVÆue
 *)&
EIDRMVÆue
, 
FALSE
);

424 #ifde‡
EILSEQ


425 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EILSEQ", &
I¡Ty≥
, (
AnyVÆue
 *)&
EILSEQVÆue
, 
FALSE
);

428 #ifde‡
EINPROGRESS


429 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EINPROGRESS", &
I¡Ty≥
, (
AnyVÆue
 *)&
EINPROGRESSVÆue
, 
FALSE
);

432 #ifde‡
EINTR


433 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EINTR", &
I¡Ty≥
, (
AnyVÆue
 *)&
EINTRVÆue
, 
FALSE
);

436 #ifde‡
EINVAL


437 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EINVAL", &
I¡Ty≥
, (
AnyVÆue
 *)&
EINVALVÆue
, 
FALSE
);

440 #ifde‡
EIO


441 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EIO", &
I¡Ty≥
, (
AnyVÆue
 *)&
EIOVÆue
, 
FALSE
);

444 #ifde‡
EISCONN


445 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EISCONN", &
I¡Ty≥
, (
AnyVÆue
 *)&
EISCONNVÆue
, 
FALSE
);

448 #ifde‡
EISDIR


449 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EISDIR", &
I¡Ty≥
, (
AnyVÆue
 *)&
EISDIRVÆue
, 
FALSE
);

452 #ifde‡
ELOOP


453 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ELOOP", &
I¡Ty≥
, (
AnyVÆue
 *)&
ELOOPVÆue
, 
FALSE
);

456 #ifde‡
EMFILE


457 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMFILE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMFILEVÆue
, 
FALSE
);

460 #ifde‡
EMLINK


461 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMLINK", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMLINKVÆue
, 
FALSE
);

464 #ifde‡
EMSGSIZE


465 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMSGSIZE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMSGSIZEVÆue
, 
FALSE
);

468 #ifde‡
EMULTIHOP


469 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMULTIHOP", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMULTIHOPVÆue
, 
FALSE
);

472 #ifde‡
ENAMETOOLONG


473 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENAMETOOLONG", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENAMETOOLONGVÆue
, 
FALSE
);

476 #ifde‡
ENETDOWN


477 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENETDOWN", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENETDOWNVÆue
, 
FALSE
);

480 #ifde‡
ENETRESET


481 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENETRESET", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENETRESETVÆue
, 
FALSE
);

484 #ifde‡
ENETUNREACH


485 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENETUNREACH", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENETUNREACHVÆue
, 
FALSE
);

488 #ifde‡
ENFILE


489 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENFILE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENFILEVÆue
, 
FALSE
);

492 #ifde‡
ENOBUFS


493 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOBUFS", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOBUFSVÆue
, 
FALSE
);

496 #ifde‡
ENODATA


497 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENODATA", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENODATAVÆue
, 
FALSE
);

500 #ifde‡
ENODEV


501 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENODEV", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENODEVVÆue
, 
FALSE
);

504 #ifde‡
ENOENT


505 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOENT", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOENTVÆue
, 
FALSE
);

508 #ifde‡
ENOEXEC


509 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOEXEC", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOEXECVÆue
, 
FALSE
);

512 #ifde‡
ENOLCK


513 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOLCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOLCKVÆue
, 
FALSE
);

516 #ifde‡
ENOLINK


517 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOLINK", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOLINKVÆue
, 
FALSE
);

520 #ifde‡
ENOMEM


521 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOMEM", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOMEMVÆue
, 
FALSE
);

524 #ifde‡
ENOMSG


525 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOMSG", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOMSGVÆue
, 
FALSE
);

528 #ifde‡
ENOPROTOOPT


529 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOPROTOOPT", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOPROTOOPTVÆue
, 
FALSE
);

532 #ifde‡
ENOSPC


533 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSPC", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSPCVÆue
, 
FALSE
);

536 #ifde‡
ENOSR


537 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSR", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSRVÆue
, 
FALSE
);

540 #ifde‡
ENOSTR


541 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSTR", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSTRVÆue
, 
FALSE
);

544 #ifde‡
ENOSYS


545 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSYS", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSYSVÆue
, 
FALSE
);

548 #ifde‡
ENOTCONN


549 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTCONN", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTCONNVÆue
, 
FALSE
);

552 #ifde‡
ENOTDIR


553 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTDIR", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTDIRVÆue
, 
FALSE
);

556 #ifde‡
ENOTEMPTY


557 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTEMPTY", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTEMPTYVÆue
, 
FALSE
);

560 #ifde‡
ENOTRECOVERABLE


561 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTRECOVERABLE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTRECOVERABLEVÆue
, 
FALSE
);

564 #ifde‡
ENOTSOCK


565 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTSOCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTSOCKVÆue
, 
FALSE
);

568 #ifde‡
ENOTSUP


569 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTSUP", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTSUPVÆue
, 
FALSE
);

572 #ifde‡
ENOTTY


573 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTTY", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTTYVÆue
, 
FALSE
);

576 #ifde‡
ENXIO


577 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENXIO", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENXIOVÆue
, 
FALSE
);

580 #ifde‡
EOPNOTSUPP


581 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOPNOTSUPP", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOPNOTSUPPVÆue
, 
FALSE
);

584 #ifde‡
EOVERFLOW


585 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOVERFLOW", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOVERFLOWVÆue
, 
FALSE
);

588 #ifde‡
EOWNERDEAD


589 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOWNERDEAD", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOWNERDEADVÆue
, 
FALSE
);

592 #ifde‡
EPERM


593 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPERM", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPERMVÆue
, 
FALSE
);

596 #ifde‡
EPIPE


597 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPIPE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPIPEVÆue
, 
FALSE
);

600 #ifde‡
EPROTO


601 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPROTO", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPROTOVÆue
, 
FALSE
);

604 #ifde‡
EPROTONOSUPPORT


605 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPROTONOSUPPORT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPROTONOSUPPORTVÆue
, 
FALSE
);

608 #ifde‡
EPROTOTYPE


609 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPROTOTYPE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPROTOTYPEVÆue
, 
FALSE
);

612 #ifde‡
ERANGE


613 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ERANGE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ERANGEVÆue
, 
FALSE
);

616 #ifde‡
EROFS


617 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EROFS", &
I¡Ty≥
, (
AnyVÆue
 *)&
EROFSVÆue
, 
FALSE
);

620 #ifde‡
ESPIPE


621 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ESPIPE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ESPIPEVÆue
, 
FALSE
);

624 #ifde‡
ESRCH


625 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ESRCH", &
I¡Ty≥
, (
AnyVÆue
 *)&
ESRCHVÆue
, 
FALSE
);

628 #ifde‡
ESTALE


629 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ESTALE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ESTALEVÆue
, 
FALSE
);

632 #ifde‡
ETIME


633 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ETIME", &
I¡Ty≥
, (
AnyVÆue
 *)&
ETIMEVÆue
, 
FALSE
);

636 #ifde‡
ETIMEDOUT


637 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ETIMEDOUT", &
I¡Ty≥
, (
AnyVÆue
 *)&
ETIMEDOUTVÆue
, 
FALSE
);

640 #ifde‡
ETXTBSY


641 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ETXTBSY", &
I¡Ty≥
, (
AnyVÆue
 *)&
ETXTBSYVÆue
, 
FALSE
);

644 #ifde‡
EWOULDBLOCK


645 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EWOULDBLOCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
EWOULDBLOCKVÆue
, 
FALSE
);

648 #ifde‡
EXDEV


649 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EXDEV", &
I¡Ty≥
, (
AnyVÆue
 *)&
EXDEVVÆue
, 
FALSE
);

652 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "î∫o", &
I¡Ty≥
, (
AnyVÆue
 *)&
î∫o
, 
TRUE
);

653 
	}
}

	@cstdlib/errno.c

2 
	~<î∫o.h
>

3 
	~"../öãΩªãr.h
"

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 #ifde‡
EACCES


8 
	gEACCESVÆue
 = 
EACCES
;

11 #ifde‡
EADDRINUSE


12 
	gEADDRINUSEVÆue
 = 
EADDRINUSE
;

15 #ifde‡
EADDRNOTAVAIL


16 
	gEADDRNOTAVAILVÆue
 = 
EADDRNOTAVAIL
;

19 #ifde‡
EAFNOSUPPORT


20 
	gEAFNOSUPPORTVÆue
 = 
EAFNOSUPPORT
;

23 #ifde‡
EAGAIN


24 
	gEAGAINVÆue
 = 
EAGAIN
;

27 #ifde‡
EALREADY


28 
	gEALREADYVÆue
 = 
EALREADY
;

31 #ifde‡
EBADF


32 
	gEBADFVÆue
 = 
EBADF
;

35 #ifde‡
EBADMSG


36 
	gEBADMSGVÆue
 = 
EBADMSG
;

39 #ifde‡
EBUSY


40 
	gEBUSYVÆue
 = 
EBUSY
;

43 #ifde‡
ECANCELED


44 
	gECANCELEDVÆue
 = 
ECANCELED
;

47 #ifde‡
ECHILD


48 
	gECHILDVÆue
 = 
ECHILD
;

51 #ifde‡
ECONNABORTED


52 
	gECONNABORTEDVÆue
 = 
ECONNABORTED
;

55 #ifde‡
ECONNREFUSED


56 
	gECONNREFUSEDVÆue
 = 
ECONNREFUSED
;

59 #ifde‡
ECONNRESET


60 
	gECONNRESETVÆue
 = 
ECONNRESET
;

63 #ifde‡
EDEADLK


64 
	gEDEADLKVÆue
 = 
EDEADLK
;

67 #ifde‡
EDESTADDRREQ


68 
	gEDESTADDRREQVÆue
 = 
EDESTADDRREQ
;

71 #ifde‡
EDOM


72 
	gEDOMVÆue
 = 
EDOM
;

75 #ifde‡
EDQUOT


76 
	gEDQUOTVÆue
 = 
EDQUOT
;

79 #ifde‡
EEXIST


80 
	gEEXISTVÆue
 = 
EEXIST
;

83 #ifde‡
EFAULT


84 
	gEFAULTVÆue
 = 
EFAULT
;

87 #ifde‡
EFBIG


88 
	gEFBIGVÆue
 = 
EFBIG
;

91 #ifde‡
EHOSTUNREACH


92 
	gEHOSTUNREACHVÆue
 = 
EHOSTUNREACH
;

95 #ifde‡
EIDRM


96 
	gEIDRMVÆue
 = 
EIDRM
;

99 #ifde‡
EILSEQ


100 
	gEILSEQVÆue
 = 
EILSEQ
;

103 #ifde‡
EINPROGRESS


104 
	gEINPROGRESSVÆue
 = 
EINPROGRESS
;

107 #ifde‡
EINTR


108 
	gEINTRVÆue
 = 
EINTR
;

111 #ifde‡
EINVAL


112 
	gEINVALVÆue
 = 
EINVAL
;

115 #ifde‡
EIO


116 
	gEIOVÆue
 = 
EIO
;

119 #ifde‡
EISCONN


120 
	gEISCONNVÆue
 = 
EISCONN
;

123 #ifde‡
EISDIR


124 
	gEISDIRVÆue
 = 
EISDIR
;

127 #ifde‡
ELOOP


128 
	gELOOPVÆue
 = 
ELOOP
;

131 #ifde‡
EMFILE


132 
	gEMFILEVÆue
 = 
EMFILE
;

135 #ifde‡
EMLINK


136 
	gEMLINKVÆue
 = 
EMLINK
;

139 #ifde‡
EMSGSIZE


140 
	gEMSGSIZEVÆue
 = 
EMSGSIZE
;

143 #ifde‡
EMULTIHOP


144 
	gEMULTIHOPVÆue
 = 
EMULTIHOP
;

147 #ifde‡
ENAMETOOLONG


148 
	gENAMETOOLONGVÆue
 = 
ENAMETOOLONG
;

151 #ifde‡
ENETDOWN


152 
	gENETDOWNVÆue
 = 
ENETDOWN
;

155 #ifde‡
ENETRESET


156 
	gENETRESETVÆue
 = 
ENETRESET
;

159 #ifde‡
ENETUNREACH


160 
	gENETUNREACHVÆue
 = 
ENETUNREACH
;

163 #ifde‡
ENFILE


164 
	gENFILEVÆue
 = 
ENFILE
;

167 #ifde‡
ENOBUFS


168 
	gENOBUFSVÆue
 = 
ENOBUFS
;

171 #ifde‡
ENODATA


172 
	gENODATAVÆue
 = 
ENODATA
;

175 #ifde‡
ENODEV


176 
	gENODEVVÆue
 = 
ENODEV
;

179 #ifde‡
ENOENT


180 
	gENOENTVÆue
 = 
ENOENT
;

183 #ifde‡
ENOEXEC


184 
	gENOEXECVÆue
 = 
ENOEXEC
;

187 #ifde‡
ENOLCK


188 
	gENOLCKVÆue
 = 
ENOLCK
;

191 #ifde‡
ENOLINK


192 
	gENOLINKVÆue
 = 
ENOLINK
;

195 #ifde‡
ENOMEM


196 
	gENOMEMVÆue
 = 
ENOMEM
;

199 #ifde‡
ENOMSG


200 
	gENOMSGVÆue
 = 
ENOMSG
;

203 #ifde‡
ENOPROTOOPT


204 
	gENOPROTOOPTVÆue
 = 
ENOPROTOOPT
;

207 #ifde‡
ENOSPC


208 
	gENOSPCVÆue
 = 
ENOSPC
;

211 #ifde‡
ENOSR


212 
	gENOSRVÆue
 = 
ENOSR
;

215 #ifde‡
ENOSTR


216 
	gENOSTRVÆue
 = 
ENOSTR
;

219 #ifde‡
ENOSYS


220 
	gENOSYSVÆue
 = 
ENOSYS
;

223 #ifde‡
ENOTCONN


224 
	gENOTCONNVÆue
 = 
ENOTCONN
;

227 #ifde‡
ENOTDIR


228 
	gENOTDIRVÆue
 = 
ENOTDIR
;

231 #ifde‡
ENOTEMPTY


232 
	gENOTEMPTYVÆue
 = 
ENOTEMPTY
;

235 #ifde‡
ENOTRECOVERABLE


236 
	gENOTRECOVERABLEVÆue
 = 
ENOTRECOVERABLE
;

239 #ifde‡
ENOTSOCK


240 
	gENOTSOCKVÆue
 = 
ENOTSOCK
;

243 #ifde‡
ENOTSUP


244 
	gENOTSUPVÆue
 = 
ENOTSUP
;

247 #ifde‡
ENOTTY


248 
	gENOTTYVÆue
 = 
ENOTTY
;

251 #ifde‡
ENXIO


252 
	gENXIOVÆue
 = 
ENXIO
;

255 #ifde‡
EOPNOTSUPP


256 
	gEOPNOTSUPPVÆue
 = 
EOPNOTSUPP
;

259 #ifde‡
EOVERFLOW


260 
	gEOVERFLOWVÆue
 = 
EOVERFLOW
;

263 #ifde‡
EOWNERDEAD


264 
	gEOWNERDEADVÆue
 = 
EOWNERDEAD
;

267 #ifde‡
EPERM


268 
	gEPERMVÆue
 = 
EPERM
;

271 #ifde‡
EPIPE


272 
	gEPIPEVÆue
 = 
EPIPE
;

275 #ifde‡
EPROTO


276 
	gEPROTOVÆue
 = 
EPROTO
;

279 #ifde‡
EPROTONOSUPPORT


280 
	gEPROTONOSUPPORTVÆue
 = 
EPROTONOSUPPORT
;

283 #ifde‡
EPROTOTYPE


284 
	gEPROTOTYPEVÆue
 = 
EPROTOTYPE
;

287 #ifde‡
ERANGE


288 
	gERANGEVÆue
 = 
ERANGE
;

291 #ifde‡
EROFS


292 
	gEROFSVÆue
 = 
EROFS
;

295 #ifde‡
ESPIPE


296 
	gESPIPEVÆue
 = 
ESPIPE
;

299 #ifde‡
ESRCH


300 
	gESRCHVÆue
 = 
ESRCH
;

303 #ifde‡
ESTALE


304 
	gESTALEVÆue
 = 
ESTALE
;

307 #ifde‡
ETIME


308 
	gETIMEVÆue
 = 
ETIME
;

311 #ifde‡
ETIMEDOUT


312 
	gETIMEDOUTVÆue
 = 
ETIMEDOUT
;

315 #ifde‡
ETXTBSY


316 
	gETXTBSYVÆue
 = 
ETXTBSY
;

319 #ifde‡
EWOULDBLOCK


320 
	gEWOULDBLOCKVÆue
 = 
EWOULDBLOCK
;

323 #ifde‡
EXDEV


324 
	gEXDEVVÆue
 = 
EXDEV
;

329 
	$StdEºnoSëupFunc
()

332 #ifde‡
EACCES


333 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EACCES", &
I¡Ty≥
, (
AnyVÆue
 *)&
EACCESVÆue
, 
FALSE
);

336 #ifde‡
EADDRINUSE


337 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EADDRINUSE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EADDRINUSEVÆue
, 
FALSE
);

340 #ifde‡
EADDRNOTAVAIL


341 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EADDRNOTAVAIL", &
I¡Ty≥
, (
AnyVÆue
 *)&
EADDRNOTAVAILVÆue
, 
FALSE
);

344 #ifde‡
EAFNOSUPPORT


345 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EAFNOSUPPORT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EAFNOSUPPORTVÆue
, 
FALSE
);

348 #ifde‡
EAGAIN


349 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EAGAIN", &
I¡Ty≥
, (
AnyVÆue
 *)&
EAGAINVÆue
, 
FALSE
);

352 #ifde‡
EALREADY


353 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EALREADY", &
I¡Ty≥
, (
AnyVÆue
 *)&
EALREADYVÆue
, 
FALSE
);

356 #ifde‡
EBADF


357 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EBADF", &
I¡Ty≥
, (
AnyVÆue
 *)&
EBADFVÆue
, 
FALSE
);

360 #ifde‡
EBADMSG


361 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EBADMSG", &
I¡Ty≥
, (
AnyVÆue
 *)&
EBADMSGVÆue
, 
FALSE
);

364 #ifde‡
EBUSY


365 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EBUSY", &
I¡Ty≥
, (
AnyVÆue
 *)&
EBUSYVÆue
, 
FALSE
);

368 #ifde‡
ECANCELED


369 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECANCELED", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECANCELEDVÆue
, 
FALSE
);

372 #ifde‡
ECHILD


373 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECHILD", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECHILDVÆue
, 
FALSE
);

376 #ifde‡
ECONNABORTED


377 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECONNABORTED", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECONNABORTEDVÆue
, 
FALSE
);

380 #ifde‡
ECONNREFUSED


381 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECONNREFUSED", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECONNREFUSEDVÆue
, 
FALSE
);

384 #ifde‡
ECONNRESET


385 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ECONNRESET", &
I¡Ty≥
, (
AnyVÆue
 *)&
ECONNRESETVÆue
, 
FALSE
);

388 #ifde‡
EDEADLK


389 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDEADLK", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDEADLKVÆue
, 
FALSE
);

392 #ifde‡
EDESTADDRREQ


393 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDESTADDRREQ", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDESTADDRREQVÆue
, 
FALSE
);

396 #ifde‡
EDOM


397 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDOM", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDOMVÆue
, 
FALSE
);

400 #ifde‡
EDQUOT


401 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EDQUOT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EDQUOTVÆue
, 
FALSE
);

404 #ifde‡
EEXIST


405 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EEXIST", &
I¡Ty≥
, (
AnyVÆue
 *)&
EEXISTVÆue
, 
FALSE
);

408 #ifde‡
EFAULT


409 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EFAULT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EFAULTVÆue
, 
FALSE
);

412 #ifde‡
EFBIG


413 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EFBIG", &
I¡Ty≥
, (
AnyVÆue
 *)&
EFBIGVÆue
, 
FALSE
);

416 #ifde‡
EHOSTUNREACH


417 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EHOSTUNREACH", &
I¡Ty≥
, (
AnyVÆue
 *)&
EHOSTUNREACHVÆue
, 
FALSE
);

420 #ifde‡
EIDRM


421 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EIDRM", &
I¡Ty≥
, (
AnyVÆue
 *)&
EIDRMVÆue
, 
FALSE
);

424 #ifde‡
EILSEQ


425 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EILSEQ", &
I¡Ty≥
, (
AnyVÆue
 *)&
EILSEQVÆue
, 
FALSE
);

428 #ifde‡
EINPROGRESS


429 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EINPROGRESS", &
I¡Ty≥
, (
AnyVÆue
 *)&
EINPROGRESSVÆue
, 
FALSE
);

432 #ifde‡
EINTR


433 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EINTR", &
I¡Ty≥
, (
AnyVÆue
 *)&
EINTRVÆue
, 
FALSE
);

436 #ifde‡
EINVAL


437 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EINVAL", &
I¡Ty≥
, (
AnyVÆue
 *)&
EINVALVÆue
, 
FALSE
);

440 #ifde‡
EIO


441 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EIO", &
I¡Ty≥
, (
AnyVÆue
 *)&
EIOVÆue
, 
FALSE
);

444 #ifde‡
EISCONN


445 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EISCONN", &
I¡Ty≥
, (
AnyVÆue
 *)&
EISCONNVÆue
, 
FALSE
);

448 #ifde‡
EISDIR


449 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EISDIR", &
I¡Ty≥
, (
AnyVÆue
 *)&
EISDIRVÆue
, 
FALSE
);

452 #ifde‡
ELOOP


453 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ELOOP", &
I¡Ty≥
, (
AnyVÆue
 *)&
ELOOPVÆue
, 
FALSE
);

456 #ifde‡
EMFILE


457 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMFILE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMFILEVÆue
, 
FALSE
);

460 #ifde‡
EMLINK


461 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMLINK", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMLINKVÆue
, 
FALSE
);

464 #ifde‡
EMSGSIZE


465 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMSGSIZE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMSGSIZEVÆue
, 
FALSE
);

468 #ifde‡
EMULTIHOP


469 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EMULTIHOP", &
I¡Ty≥
, (
AnyVÆue
 *)&
EMULTIHOPVÆue
, 
FALSE
);

472 #ifde‡
ENAMETOOLONG


473 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENAMETOOLONG", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENAMETOOLONGVÆue
, 
FALSE
);

476 #ifde‡
ENETDOWN


477 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENETDOWN", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENETDOWNVÆue
, 
FALSE
);

480 #ifde‡
ENETRESET


481 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENETRESET", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENETRESETVÆue
, 
FALSE
);

484 #ifde‡
ENETUNREACH


485 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENETUNREACH", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENETUNREACHVÆue
, 
FALSE
);

488 #ifde‡
ENFILE


489 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENFILE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENFILEVÆue
, 
FALSE
);

492 #ifde‡
ENOBUFS


493 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOBUFS", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOBUFSVÆue
, 
FALSE
);

496 #ifde‡
ENODATA


497 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENODATA", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENODATAVÆue
, 
FALSE
);

500 #ifde‡
ENODEV


501 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENODEV", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENODEVVÆue
, 
FALSE
);

504 #ifde‡
ENOENT


505 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOENT", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOENTVÆue
, 
FALSE
);

508 #ifde‡
ENOEXEC


509 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOEXEC", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOEXECVÆue
, 
FALSE
);

512 #ifde‡
ENOLCK


513 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOLCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOLCKVÆue
, 
FALSE
);

516 #ifde‡
ENOLINK


517 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOLINK", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOLINKVÆue
, 
FALSE
);

520 #ifde‡
ENOMEM


521 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOMEM", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOMEMVÆue
, 
FALSE
);

524 #ifde‡
ENOMSG


525 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOMSG", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOMSGVÆue
, 
FALSE
);

528 #ifde‡
ENOPROTOOPT


529 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOPROTOOPT", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOPROTOOPTVÆue
, 
FALSE
);

532 #ifde‡
ENOSPC


533 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSPC", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSPCVÆue
, 
FALSE
);

536 #ifde‡
ENOSR


537 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSR", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSRVÆue
, 
FALSE
);

540 #ifde‡
ENOSTR


541 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSTR", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSTRVÆue
, 
FALSE
);

544 #ifde‡
ENOSYS


545 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOSYS", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOSYSVÆue
, 
FALSE
);

548 #ifde‡
ENOTCONN


549 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTCONN", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTCONNVÆue
, 
FALSE
);

552 #ifde‡
ENOTDIR


553 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTDIR", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTDIRVÆue
, 
FALSE
);

556 #ifde‡
ENOTEMPTY


557 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTEMPTY", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTEMPTYVÆue
, 
FALSE
);

560 #ifde‡
ENOTRECOVERABLE


561 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTRECOVERABLE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTRECOVERABLEVÆue
, 
FALSE
);

564 #ifde‡
ENOTSOCK


565 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTSOCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTSOCKVÆue
, 
FALSE
);

568 #ifde‡
ENOTSUP


569 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTSUP", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTSUPVÆue
, 
FALSE
);

572 #ifde‡
ENOTTY


573 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENOTTY", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENOTTYVÆue
, 
FALSE
);

576 #ifde‡
ENXIO


577 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ENXIO", &
I¡Ty≥
, (
AnyVÆue
 *)&
ENXIOVÆue
, 
FALSE
);

580 #ifde‡
EOPNOTSUPP


581 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOPNOTSUPP", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOPNOTSUPPVÆue
, 
FALSE
);

584 #ifde‡
EOVERFLOW


585 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOVERFLOW", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOVERFLOWVÆue
, 
FALSE
);

588 #ifde‡
EOWNERDEAD


589 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOWNERDEAD", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOWNERDEADVÆue
, 
FALSE
);

592 #ifde‡
EPERM


593 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPERM", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPERMVÆue
, 
FALSE
);

596 #ifde‡
EPIPE


597 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPIPE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPIPEVÆue
, 
FALSE
);

600 #ifde‡
EPROTO


601 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPROTO", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPROTOVÆue
, 
FALSE
);

604 #ifde‡
EPROTONOSUPPORT


605 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPROTONOSUPPORT", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPROTONOSUPPORTVÆue
, 
FALSE
);

608 #ifde‡
EPROTOTYPE


609 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EPROTOTYPE", &
I¡Ty≥
, (
AnyVÆue
 *)&
EPROTOTYPEVÆue
, 
FALSE
);

612 #ifde‡
ERANGE


613 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ERANGE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ERANGEVÆue
, 
FALSE
);

616 #ifde‡
EROFS


617 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EROFS", &
I¡Ty≥
, (
AnyVÆue
 *)&
EROFSVÆue
, 
FALSE
);

620 #ifde‡
ESPIPE


621 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ESPIPE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ESPIPEVÆue
, 
FALSE
);

624 #ifde‡
ESRCH


625 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ESRCH", &
I¡Ty≥
, (
AnyVÆue
 *)&
ESRCHVÆue
, 
FALSE
);

628 #ifde‡
ESTALE


629 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ESTALE", &
I¡Ty≥
, (
AnyVÆue
 *)&
ESTALEVÆue
, 
FALSE
);

632 #ifde‡
ETIME


633 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ETIME", &
I¡Ty≥
, (
AnyVÆue
 *)&
ETIMEVÆue
, 
FALSE
);

636 #ifde‡
ETIMEDOUT


637 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ETIMEDOUT", &
I¡Ty≥
, (
AnyVÆue
 *)&
ETIMEDOUTVÆue
, 
FALSE
);

640 #ifde‡
ETXTBSY


641 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "ETXTBSY", &
I¡Ty≥
, (
AnyVÆue
 *)&
ETXTBSYVÆue
, 
FALSE
);

644 #ifde‡
EWOULDBLOCK


645 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EWOULDBLOCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
EWOULDBLOCKVÆue
, 
FALSE
);

648 #ifde‡
EXDEV


649 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EXDEV", &
I¡Ty≥
, (
AnyVÆue
 *)&
EXDEVVÆue
, 
FALSE
);

652 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "î∫o", &
I¡Ty≥
, (
AnyVÆue
 *)&
î∫o
, 
TRUE
);

653 
	}
}

	@cstdlib/math.c

2 
	~"../öãΩªãr.h
"

4 #i‚de‡
BUILTIN_MINI_STDLIB


5 #i‚de‡
NO_FP


7 
	gM_EVÆue
 = 2.7182818284590452354;

8 
	gM_LOG2EVÆue
 = 1.4426950408889634074;

9 
	gM_LOG10EVÆue
 = 0.43429448190325182765;

10 
	gM_LN2VÆue
 = 0.69314718055994530942;

11 
	gM_LN10VÆue
 = 2.30258509299404568402;

12 
	gM_PIVÆue
 = 3.14159265358979323846;

13 
	gM_PI_2VÆue
 = 1.57079632679489661923;

14 
	gM_PI_4VÆue
 = 0.78539816339744830962;

15 
	gM_1_PIVÆue
 = 0.31830988618379067154;

16 
	gM_2_PIVÆue
 = 0.63661977236758134308;

17 
	gM_2_SQRTPIVÆue
 = 1.12837916709551257390;

18 
	gM_SQRT2VÆue
 = 1.41421356237309504880;

19 
	gM_SQRT1_2VÆue
 = 0.70710678118654752440;

22 
	$M©hSö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

24 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`sö
(
P¨am
[0]->Val->FP);

25 
	}
}

27 
	$M©hCos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

29 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`cos
(
P¨am
[0]->Val->FP);

30 
	}
}

32 
	$M©hT™
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

34 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`èn
(
P¨am
[0]->Val->FP);

35 
	}
}

37 
	$M©hAsö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

39 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`asö
(
P¨am
[0]->Val->FP);

40 
	}
}

42 
	$M©hAcos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

44 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`acos
(
P¨am
[0]->Val->FP);

45 
	}
}

47 
	$M©hAèn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

49 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`©™
(
P¨am
[0]->Val->FP);

50 
	}
}

52 
	$M©hAèn2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

54 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`©™2
(
P¨am
[0]->Val->FP, Param[1]->Val->FP);

55 
	}
}

57 
	$M©hSöh
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

59 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`söh
(
P¨am
[0]->Val->FP);

60 
	}
}

62 
	$M©hCosh
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

64 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`cosh
(
P¨am
[0]->Val->FP);

65 
	}
}

67 
	$M©hT™h
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

69 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`ènh
(
P¨am
[0]->Val->FP);

70 
	}
}

72 
	$M©hExp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

74 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`exp
(
P¨am
[0]->Val->FP);

75 
	}
}

77 
	$M©hFabs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

79 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`Ábs
(
P¨am
[0]->Val->FP);

80 
	}
}

82 
	$M©hFmod
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

84 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`fmod
(
P¨am
[0]->Val->FP, Param[1]->Val->FP);

85 
	}
}

87 
	$M©hFªxp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

89 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`‰exp
(
P¨am
[0]->VÆ->FP, P¨am[1]->VÆ->
Poöãr
);

90 
	}
}

92 
	$M©hLdexp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

94 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`ldexp
(
P¨am
[0]->VÆ->FP, P¨am[1]->VÆ->
I¡egî
);

95 
	}
}

97 
	$M©hLog
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

99 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`log
(
P¨am
[0]->Val->FP);

100 
	}
}

102 
	$M©hLog10
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

104 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`log10
(
P¨am
[0]->Val->FP);

105 
	}
}

107 
	$M©hModf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

109 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`modf
(
P¨am
[0]->VÆ->FP, P¨am[0]->VÆ->
Poöãr
);

110 
	}
}

112 
	$M©hPow
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

114 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`pow
(
P¨am
[0]->Val->FP, Param[1]->Val->FP);

115 
	}
}

117 
	$M©hSqπ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

119 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`sqπ
(
P¨am
[0]->Val->FP);

120 
	}
}

122 
	$M©hRound
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

126 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`˚û
(
P¨am
[0]->Val->FP - 0.5);

127 
	}
}

129 
	$M©hCeû
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

131 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`˚û
(
P¨am
[0]->Val->FP);

132 
	}
}

134 
	$M©hFlo‹
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

136 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`Êo‹
(
P¨am
[0]->Val->FP);

137 
	}
}

140 
LibøryFun˘i⁄
 
	gM©hFun˘i⁄s
[] =

142 { 
M©hAcos
, "floatácos(float);" },

143 { 
M©hAsö
, "floatásin(float);" },

144 { 
M©hAèn
, "floatátan(float);" },

145 { 
M©hAèn2
, "floatátan2(float, float);" },

146 { 
M©hCeû
, "float ceil(float);" },

147 { 
M©hCos
, "float cos(float);" },

148 { 
M©hCosh
, "float cosh(float);" },

149 { 
M©hExp
, "floatÉxp(float);" },

150 { 
M©hFabs
, "float fabs(float);" },

151 { 
M©hFlo‹
, "float floor(float);" },

152 { 
M©hFmod
, "float fmod(float, float);" },

153 { 
M©hFªxp
, "float frexp(float, int *);" },

154 { 
M©hLdexp
, "floatÜdexp(float, int);" },

155 { 
M©hLog
, "floatÜog(float);" },

156 { 
M©hLog10
, "floatÜog10(float);" },

157 { 
M©hModf
, "float modf(float, float *);" },

158 { 
M©hPow
, "floatÖow(float,float);" },

159 { 
M©hRound
, "floatÑound(float);" },

160 { 
M©hSö
, "float sin(float);" },

161 { 
M©hSöh
, "float sinh(float);" },

162 { 
M©hSqπ
, "float sqrt(float);" },

163 { 
M©hT™
, "floatÅan(float);" },

164 { 
M©hT™h
, "floatÅanh(float);" },

165 { 
NULL
, NULL }

169 
	$M©hSëupFunc
()

171 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_E", &
FPTy≥
, (
AnyVÆue
 *)&
M_EVÆue
, 
FALSE
);

172 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LOG2E", &
FPTy≥
, (
AnyVÆue
 *)&
M_LOG2EVÆue
, 
FALSE
);

173 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LOG10E", &
FPTy≥
, (
AnyVÆue
 *)&
M_LOG10EVÆue
, 
FALSE
);

174 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LN2", &
FPTy≥
, (
AnyVÆue
 *)&
M_LN2VÆue
, 
FALSE
);

175 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LN10", &
FPTy≥
, (
AnyVÆue
 *)&
M_LN10VÆue
, 
FALSE
);

176 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_PI", &
FPTy≥
, (
AnyVÆue
 *)&
M_PIVÆue
, 
FALSE
);

177 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_PI_2", &
FPTy≥
, (
AnyVÆue
 *)&
M_PI_2VÆue
, 
FALSE
);

178 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_PI_4", &
FPTy≥
, (
AnyVÆue
 *)&
M_PI_4VÆue
, 
FALSE
);

179 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_1_PI", &
FPTy≥
, (
AnyVÆue
 *)&
M_1_PIVÆue
, 
FALSE
);

180 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_2_PI", &
FPTy≥
, (
AnyVÆue
 *)&
M_2_PIVÆue
, 
FALSE
);

181 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_2_SQRTPI", &
FPTy≥
, (
AnyVÆue
 *)&
M_2_SQRTPIVÆue
, 
FALSE
);

182 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_SQRT2", &
FPTy≥
, (
AnyVÆue
 *)&
M_SQRT2VÆue
, 
FALSE
);

183 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_SQRT1_2", &
FPTy≥
, (
AnyVÆue
 *)&
M_SQRT1_2VÆue
, 
FALSE
);

184 
	}
}

	@cstdlib/math.c

2 
	~"../öãΩªãr.h
"

4 #i‚de‡
BUILTIN_MINI_STDLIB


5 #i‚de‡
NO_FP


7 
	gM_EVÆue
 = 2.7182818284590452354;

8 
	gM_LOG2EVÆue
 = 1.4426950408889634074;

9 
	gM_LOG10EVÆue
 = 0.43429448190325182765;

10 
	gM_LN2VÆue
 = 0.69314718055994530942;

11 
	gM_LN10VÆue
 = 2.30258509299404568402;

12 
	gM_PIVÆue
 = 3.14159265358979323846;

13 
	gM_PI_2VÆue
 = 1.57079632679489661923;

14 
	gM_PI_4VÆue
 = 0.78539816339744830962;

15 
	gM_1_PIVÆue
 = 0.31830988618379067154;

16 
	gM_2_PIVÆue
 = 0.63661977236758134308;

17 
	gM_2_SQRTPIVÆue
 = 1.12837916709551257390;

18 
	gM_SQRT2VÆue
 = 1.41421356237309504880;

19 
	gM_SQRT1_2VÆue
 = 0.70710678118654752440;

22 
	$M©hSö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

24 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`sö
(
P¨am
[0]->Val->FP);

25 
	}
}

27 
	$M©hCos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

29 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`cos
(
P¨am
[0]->Val->FP);

30 
	}
}

32 
	$M©hT™
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

34 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`èn
(
P¨am
[0]->Val->FP);

35 
	}
}

37 
	$M©hAsö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

39 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`asö
(
P¨am
[0]->Val->FP);

40 
	}
}

42 
	$M©hAcos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

44 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`acos
(
P¨am
[0]->Val->FP);

45 
	}
}

47 
	$M©hAèn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

49 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`©™
(
P¨am
[0]->Val->FP);

50 
	}
}

52 
	$M©hAèn2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

54 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`©™2
(
P¨am
[0]->Val->FP, Param[1]->Val->FP);

55 
	}
}

57 
	$M©hSöh
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

59 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`söh
(
P¨am
[0]->Val->FP);

60 
	}
}

62 
	$M©hCosh
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

64 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`cosh
(
P¨am
[0]->Val->FP);

65 
	}
}

67 
	$M©hT™h
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

69 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`ènh
(
P¨am
[0]->Val->FP);

70 
	}
}

72 
	$M©hExp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

74 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`exp
(
P¨am
[0]->Val->FP);

75 
	}
}

77 
	$M©hFabs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

79 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`Ábs
(
P¨am
[0]->Val->FP);

80 
	}
}

82 
	$M©hFmod
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

84 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`fmod
(
P¨am
[0]->Val->FP, Param[1]->Val->FP);

85 
	}
}

87 
	$M©hFªxp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

89 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`‰exp
(
P¨am
[0]->VÆ->FP, P¨am[1]->VÆ->
Poöãr
);

90 
	}
}

92 
	$M©hLdexp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

94 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`ldexp
(
P¨am
[0]->VÆ->FP, P¨am[1]->VÆ->
I¡egî
);

95 
	}
}

97 
	$M©hLog
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

99 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`log
(
P¨am
[0]->Val->FP);

100 
	}
}

102 
	$M©hLog10
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

104 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`log10
(
P¨am
[0]->Val->FP);

105 
	}
}

107 
	$M©hModf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

109 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`modf
(
P¨am
[0]->VÆ->FP, P¨am[0]->VÆ->
Poöãr
);

110 
	}
}

112 
	$M©hPow
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

114 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`pow
(
P¨am
[0]->Val->FP, Param[1]->Val->FP);

115 
	}
}

117 
	$M©hSqπ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

119 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`sqπ
(
P¨am
[0]->Val->FP);

120 
	}
}

122 
	$M©hRound
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

126 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`˚û
(
P¨am
[0]->Val->FP - 0.5);

127 
	}
}

129 
	$M©hCeû
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

131 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`˚û
(
P¨am
[0]->Val->FP);

132 
	}
}

134 
	$M©hFlo‹
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

136 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`Êo‹
(
P¨am
[0]->Val->FP);

137 
	}
}

140 
LibøryFun˘i⁄
 
	gM©hFun˘i⁄s
[] =

142 { 
M©hAcos
, "floatácos(float);" },

143 { 
M©hAsö
, "floatásin(float);" },

144 { 
M©hAèn
, "floatátan(float);" },

145 { 
M©hAèn2
, "floatátan2(float, float);" },

146 { 
M©hCeû
, "float ceil(float);" },

147 { 
M©hCos
, "float cos(float);" },

148 { 
M©hCosh
, "float cosh(float);" },

149 { 
M©hExp
, "floatÉxp(float);" },

150 { 
M©hFabs
, "float fabs(float);" },

151 { 
M©hFlo‹
, "float floor(float);" },

152 { 
M©hFmod
, "float fmod(float, float);" },

153 { 
M©hFªxp
, "float frexp(float, int *);" },

154 { 
M©hLdexp
, "floatÜdexp(float, int);" },

155 { 
M©hLog
, "floatÜog(float);" },

156 { 
M©hLog10
, "floatÜog10(float);" },

157 { 
M©hModf
, "float modf(float, float *);" },

158 { 
M©hPow
, "floatÖow(float,float);" },

159 { 
M©hRound
, "floatÑound(float);" },

160 { 
M©hSö
, "float sin(float);" },

161 { 
M©hSöh
, "float sinh(float);" },

162 { 
M©hSqπ
, "float sqrt(float);" },

163 { 
M©hT™
, "floatÅan(float);" },

164 { 
M©hT™h
, "floatÅanh(float);" },

165 { 
NULL
, NULL }

169 
	$M©hSëupFunc
()

171 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_E", &
FPTy≥
, (
AnyVÆue
 *)&
M_EVÆue
, 
FALSE
);

172 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LOG2E", &
FPTy≥
, (
AnyVÆue
 *)&
M_LOG2EVÆue
, 
FALSE
);

173 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LOG10E", &
FPTy≥
, (
AnyVÆue
 *)&
M_LOG10EVÆue
, 
FALSE
);

174 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LN2", &
FPTy≥
, (
AnyVÆue
 *)&
M_LN2VÆue
, 
FALSE
);

175 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_LN10", &
FPTy≥
, (
AnyVÆue
 *)&
M_LN10VÆue
, 
FALSE
);

176 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_PI", &
FPTy≥
, (
AnyVÆue
 *)&
M_PIVÆue
, 
FALSE
);

177 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_PI_2", &
FPTy≥
, (
AnyVÆue
 *)&
M_PI_2VÆue
, 
FALSE
);

178 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_PI_4", &
FPTy≥
, (
AnyVÆue
 *)&
M_PI_4VÆue
, 
FALSE
);

179 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_1_PI", &
FPTy≥
, (
AnyVÆue
 *)&
M_1_PIVÆue
, 
FALSE
);

180 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_2_PI", &
FPTy≥
, (
AnyVÆue
 *)&
M_2_PIVÆue
, 
FALSE
);

181 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_2_SQRTPI", &
FPTy≥
, (
AnyVÆue
 *)&
M_2_SQRTPIVÆue
, 
FALSE
);

182 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_SQRT2", &
FPTy≥
, (
AnyVÆue
 *)&
M_SQRT2VÆue
, 
FALSE
);

183 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "M_SQRT1_2", &
FPTy≥
, (
AnyVÆue
 *)&
M_SQRT1_2VÆue
, 
FALSE
);

184 
	}
}

	@cstdlib/stdbool.c

2 
	~"../öãΩªãr.h
"

4 #i‚de‡
BUILTIN_MINI_STDLIB


6 
	gåueVÆue
 = 1;

7 
	gÁl£VÆue
 = 0;

11 c⁄° 
	gStdboﬁDefs
[] = "typedef int bool;";

14 
	$StdboﬁSëupFunc
()

17 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "åue", &
I¡Ty≥
, (
AnyVÆue
 *)&
åueVÆue
, 
FALSE
);

18 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "Ál£", &
I¡Ty≥
, (
AnyVÆue
 *)&
Ál£VÆue
, 
FALSE
);

19 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "__boﬁ_åue_Ál£_¨e_deföed", &
I¡Ty≥
, (
AnyVÆue
 *)&
åueVÆue
, 
FALSE
);

20 
	}
}

	@cstdlib/stdbool.c

2 
	~"../öãΩªãr.h
"

4 #i‚de‡
BUILTIN_MINI_STDLIB


6 
	gåueVÆue
 = 1;

7 
	gÁl£VÆue
 = 0;

11 c⁄° 
	gStdboﬁDefs
[] = "typedef int bool;";

14 
	$StdboﬁSëupFunc
()

17 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "åue", &
I¡Ty≥
, (
AnyVÆue
 *)&
åueVÆue
, 
FALSE
);

18 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "Ál£", &
I¡Ty≥
, (
AnyVÆue
 *)&
Ál£VÆue
, 
FALSE
);

19 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "__boﬁ_åue_Ál£_¨e_deföed", &
I¡Ty≥
, (
AnyVÆue
 *)&
åueVÆue
, 
FALSE
);

20 
	}
}

	@cstdlib/stdio.c

2 
	~<î∫o.h
>

3 
	~"../öãΩªãr.h
"

4 
	~"../°dio.h
"

5 
	~<f˙é.h
>

6 
	~<°d¨g.h
>

8 #i‚de‡
BUILTIN_MINI_STDLIB


10 
	#MAX_FORMAT
 80

	)

11 
	#MAX_SCANF_ARGS
 10

	)

13 
FILE
 *
	gCStdOut
;

15 
	gZîoVÆue
 = 0;

16 
	gEOFVÆue
 = 
EOF
;

17 
	gSEEK_SETVÆue
 = 
SEEK_SET
;

18 
	gSEEK_CURVÆue
 = 
SEEK_CUR
;

19 
	gSEEK_ENDVÆue
 = 
SEEK_END
;

20 
	gBUFSIZVÆue
 = 
BUFSIZ
;

21 
	gFILENAME_MAXVÆue
 = 
FILENAME_MAX
;

22 
	g_IOFBFVÆue
 = 
_IOFBF
;

23 
	g_IOLBFVÆue
 = 
_IOLBF
;

24 
	g_IONBFVÆue
 = 
_IONBF
;

26 
	gGETS_MAXVÆue
 = 255;

28 
FILE
 *
	g°döVÆue
;

29 
FILE
 *
	g°doutVÆue
;

30 
FILE
 *
	g°dîrVÆue
;

32 
VÆueTy≥
 *
	gFûePåTy≥
 = 
NULL
;

36 
	sStdOutSåómSåu˘


38 
FILE
 *
	mFûePå
;

39 *
	mSåOutPå
;

40 
	mSåOutLí
;

41 
	mCh¨Cou¡
;

43 } 
	tStdOutSåóm
;

46 
	sStdV¨¨g


48 
VÆue
 **
	mP¨am
;

49 
	mNumArgs
;

53 
	$BasicIOInô
()

55 
CStdOut
 = 
°dout
;

56 
°döVÆue
 = 
°dö
;

57 
°doutVÆue
 = 
°dout
;

58 
°dîrVÆue
 = 
°dîr
;

59 
	}
}

60 
	$Âutc
(
ch
,
FILE
 *
°ªam
){

61 
	`fwrôe
(&
ch
,1,1,
°ªam
);

62  ()
ch
;

63 
	}
}

65 
	$StdioOutPutc
(
OutCh
, 
StdOutSåóm
 *
Såóm
)

67 i‡(
Såóm
->
FûePå
 !
NULL
)

70 
	`Âutc
(
OutCh
, 
Såóm
->
FûePå
);

71 
Såóm
->
Ch¨Cou¡
++;

73 i‡(
Såóm
->
SåOutLí
 < 0 || Stream->StrOutLen > 1)

76 *
Såóm
->
SåOutPå
 = 
OutCh
;

77 
Såóm
->
SåOutPå
++;

79 i‡(
Såóm
->
SåOutLí
 > 1)

80 
Såóm
->
SåOutLí
--;

82 
Såóm
->
Ch¨Cou¡
++;

84 
	}
}

87 
	$StdioOutPuts
(c⁄° *
Så
, 
StdOutSåóm
 *
Såóm
)

89 i‡(
Såóm
->
FûePå
 !
NULL
)

92 
	`Âuts
(
Så
, 
Såóm
->
FûePå
);

97 *
Så
 != '\0')

99 i‡(
Såóm
->
SåOutLí
 < 0 || Stream->StrOutLen > 1)

102 *
Såóm
->
SåOutPå
 = *
Så
;

103 
Så
++;

104 
Såóm
->
SåOutPå
++;

106 i‡(
Såóm
->
SåOutLí
 > 1)

107 
Såóm
->
SåOutLí
--;

109 
Såóm
->
Ch¨Cou¡
++;

113 
	}
}

116 
	$StdioF¥ötfW‹d
(
StdOutSåóm
 *
Såóm
, c⁄° *
F‹m©
, 
VÆue
)

118 i‡(
Såóm
->
FûePå
 !
NULL
)

119 
Såóm
->
Ch¨Cou¡
 +
	`Ârötf
(Såóm->
FûePå
, 
F‹m©
, 
VÆue
);

121 i‡(
Såóm
->
SåOutLí
 >= 0)

123 
CCou¡
 = 
	`¢¥ötf
(
Såóm
->
SåOutPå
, Såóm->
SåOutLí
, 
F‹m©
, 
VÆue
);

124 
Såóm
->
SåOutPå
 +
CCou¡
;

125 
Såóm
->
SåOutLí
 -
CCou¡
;

126 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

130 
CCou¡
 = 
	`•rötf
(
Såóm
->
SåOutPå
, 
F‹m©
, 
VÆue
);

131 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

132 
Såóm
->
SåOutPå
 +
CCou¡
;

134 
	}
}

137 
	$StdioF¥ötfFP
(
StdOutSåóm
 *
Såóm
, c⁄° *
F‹m©
, 
VÆue
)

139 i‡(
Såóm
->
FûePå
 !
NULL
)

140 
Såóm
->
Ch¨Cou¡
 +
	`Ârötf
(Såóm->
FûePå
, 
F‹m©
, 
VÆue
);

142 i‡(
Såóm
->
SåOutLí
 >= 0)

144 
CCou¡
 = 
	`¢¥ötf
(
Såóm
->
SåOutPå
, Såóm->
SåOutLí
, 
F‹m©
, 
VÆue
);

145 
Såóm
->
SåOutPå
 +
CCou¡
;

146 
Såóm
->
SåOutLí
 -
CCou¡
;

147 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

151 
CCou¡
 = 
	`•rötf
(
Såóm
->
SåOutPå
, 
F‹m©
, 
VÆue
);

152 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

153 
Såóm
->
SåOutPå
 +
CCou¡
;

155 
	}
}

158 
	$StdioF¥ötfPoöãr
(
StdOutSåóm
 *
Såóm
, c⁄° *
F‹m©
, *
VÆue
)

160 i‡(
Såóm
->
FûePå
 !
NULL
)

161 
Såóm
->
Ch¨Cou¡
 +
	`Ârötf
(Såóm->
FûePå
, 
F‹m©
, 
VÆue
);

163 i‡(
Såóm
->
SåOutLí
 >= 0)

165 
CCou¡
 = 
	`¢¥ötf
(
Såóm
->
SåOutPå
, Såóm->
SåOutLí
, 
F‹m©
, 
VÆue
);

166 
Såóm
->
SåOutPå
 +
CCou¡
;

167 
Såóm
->
SåOutLí
 -
CCou¡
;

168 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

172 
CCou¡
 = 
	`•rötf
(
Såóm
->
SåOutPå
, 
F‹m©
, 
VÆue
);

173 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

174 
Såóm
->
SåOutPå
 +
CCou¡
;

176 
	}
}

179 
	$StdioBa£Prötf
(
P¨£Sèã
 *
P¨£r
, 
FILE
 *
Såóm
, *
SåOut
, 
SåOutLí
, *
F‹m©
, 
StdV¨¨g
 *
Args
)

181 
VÆue
 *
ThisArg
 = 
Args
->
P¨am
[0];

182 
ArgCou¡
 = 0;

183 *
FPos
 = 
F‹m©
;

184 
O√F‹m©Buf
[
MAX_FORMAT
+1];

185 
O√F‹m©Cou¡
;

186 
VÆueTy≥
 *
ShowTy≥
;

187 
StdOutSåóm
 
SOSåóm
;

189 
SOSåóm
.
FûePå
 = 
Såóm
;

190 
SOSåóm
.
SåOutPå
 = 
SåOut
;

191 
SOSåóm
.
SåOutLí
 = StrOutLen;

192 
SOSåóm
.
Ch¨Cou¡
 = 0;

194 *
FPos
 != '\0')

196 i‡(*
FPos
 == '%')

199 
FPos
++;

200 
ShowTy≥
 = 
NULL
;

201 
O√F‹m©Buf
[0] = '%';

202 
O√F‹m©Cou¡
 = 1;

206 *
FPos
)

208 'd': 'i': 
ShowTy≥
 = &
I¡Ty≥
; ;

209 'o': 'u': 'x': 'X': 
ShowTy≥
 = &
I¡Ty≥
; ;

210 #i‚de‡
NO_FP


211 'e': 'E': 
ShowTy≥
 = &
FPTy≥
; ;

212 'f': 'F': 
ShowTy≥
 = &
FPTy≥
; ;

213 'g': 'G': 
ShowTy≥
 = &
FPTy≥
; ;

215 'a': 'A': 
ShowTy≥
 = &
I¡Ty≥
; ;

216 'c': 
ShowTy≥
 = &
I¡Ty≥
; ;

217 's': 
ShowTy≥
 = 
Ch¨PåTy≥
; ;

218 'p': 
ShowTy≥
 = 
VoidPåTy≥
; ;

219 'n': 
ShowTy≥
 = &
VoidTy≥
; ;

220 'm': 
ShowTy≥
 = &
VoidTy≥
; ;

221 '%': 
ShowTy≥
 = &
VoidTy≥
; ;

222 '\0': 
ShowTy≥
 = &
VoidTy≥
; ;

226 
O√F‹m©Buf
[
O√F‹m©Cou¡
] = *
FPos
;

227 
O√F‹m©Cou¡
++;

230 i‡(
ShowTy≥
 =&
VoidTy≥
)

232 *
FPos
)

235 '%': 
	`StdioOutPutc
(*
FPos
, &
SOSåóm
); ;

236 '\0': 
O√F‹m©Buf
[
O√F‹m©Cou¡
] = '\0'; 
	`StdioOutPutc
(*
FPos
, &
SOSåóm
); ;

238 
ThisArg
 = (
VÆue
 *)((*)ThisArg + 
	`MEM_ALIGN
((VÆueË+ 
	`Ty≥SèckSizeVÆue
(ThisArg)));

239 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Aºay
 && ThisArg->Typ->
FromTy≥
->Ba£ =
Ty≥I¡
)

240 *(*)
ThisArg
->
VÆ
->
Poöãr
 = 
SOSåóm
.
Ch¨Cou¡
;

245 
FPos
++;

247 } 
ShowTy≥
 =
NULL
 && 
O√F‹m©Cou¡
 < 
MAX_FORMAT
);

249 i‡(
ShowTy≥
 !&
VoidTy≥
)

251 i‡(
ArgCou¡
 >
Args
->
NumArgs
)

252 
	`StdioOutPuts
("XXX", &
SOSåóm
);

256 
O√F‹m©Buf
[
O√F‹m©Cou¡
] = '\0';

259 
ThisArg
 = (
VÆue
 *)((*)ThisArg + 
	`MEM_ALIGN
((VÆueË+ 
	`Ty≥SèckSizeVÆue
(ThisArg)));

260 i‡(
ShowTy≥
 =&
I¡Ty≥
)

263 i‡(
	`IS_NUMERIC_COERCIBLE
(
ThisArg
))

264 
	`StdioF¥ötfW‹d
(&
SOSåóm
, 
O√F‹m©Buf
, 
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
ThisArg
));

266 
	`StdioOutPuts
("XXX", &
SOSåóm
);

268 #i‚de‡
NO_FP


269 i‡(
ShowTy≥
 =&
FPTy≥
)

272 i‡(
	`IS_NUMERIC_COERCIBLE
(
ThisArg
))

273 
	`StdioF¥ötfFP
(&
SOSåóm
, 
O√F‹m©Buf
, 
	`Ex¥essi⁄C€r˚FP
(
ThisArg
));

275 
	`StdioOutPuts
("XXX", &
SOSåóm
);

278 i‡(
ShowTy≥
 =
Ch¨PåTy≥
)

280 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

281 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, 
ThisArg
->
VÆ
->
Poöãr
);

283 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Aºay
 && ThisArg->Typ->
FromTy≥
->Ba£ =
Ty≥Ch¨
)

284 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, &
ThisArg
->
VÆ
->
AºayMem
[0]);

287 
	`StdioOutPuts
("XXX", &
SOSåóm
);

289 i‡(
ShowTy≥
 =
VoidPåTy≥
)

291 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

292 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, 
ThisArg
->
VÆ
->
Poöãr
);

294 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Aºay
)

295 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, &
ThisArg
->
VÆ
->
AºayMem
[0]);

298 
	`StdioOutPuts
("XXX", &
SOSåóm
);

301 
ArgCou¡
++;

308 
	`StdioOutPutc
(*
FPos
, &
SOSåóm
);

309 
FPos
++;

314 i‡(
SOSåóm
.
SåOutPå
 !
NULL
 && SOSåóm.
SåOutLí
 > 0)

315 *
SOSåóm
.
SåOutPå
 = '\0';

317  
SOSåóm
.
Ch¨Cou¡
;

318 
	}
}

352 
	$StdioF›í
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

354 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`f›í
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

355 
	}
}

362 
	$StdioF˛o£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

364 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`f˛o£
(
P¨am
[0]->VÆ->
Poöãr
);

365 
	}
}

367 
	$StdioFªad
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

369 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`‰ód
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer, Param[3]->Val->Pointer);

370 
	}
}

372 
	$StdioFwrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

374 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fwrôe
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer, Param[3]->Val->Pointer);

375 
	}
}

452 
	$StdioFputc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

454 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`Âutc
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
);

455 
	}
}

520 
	$StdioGëch¨
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

522 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëch¨
();

523 
	}
}

525 
	$StdioPrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

527 
StdV¨¨g
 
PrötfArgs
;

529 
PrötfArgs
.
P¨am
 = Param;

530 
PrötfArgs
.
NumArgs
 = NumArgs-1;

531 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
°dout
, 
NULL
, 0, 
P¨am
[0]->VÆ->
Poöãr
, &
PrötfArgs
);

532 
	}
}

534 
	$StdioV¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

536 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
°dout
, 
NULL
, 0, 
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

537 
	}
}

539 
	$StdioF¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

541 
StdV¨¨g
 
PrötfArgs
;

543 
PrötfArgs
.
P¨am
 = Param + 1;

544 
PrötfArgs
.
NumArgs
 = NumArgs-2;

545 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
P¨am
[0]->VÆ->
Poöãr
, 
NULL
, 0, P¨am[1]->VÆ->Poöãr, &
PrötfArgs
);

546 
	}
}

548 
	$StdioVÂrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

550 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
P¨am
[0]->VÆ->
Poöãr
, 
NULL
, 0, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

551 
	}
}

553 
	$StdioS¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

555 
StdV¨¨g
 
PrötfArgs
;

557 
PrötfArgs
.
P¨am
 = Param + 1;

558 
PrötfArgs
.
NumArgs
 = NumArgs-2;

559 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, -1, P¨am[1]->VÆ->Poöãr, &
PrötfArgs
);

560 
	}
}

562 
	$StdioS≈rötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

564 
StdV¨¨g
 
PrötfArgs
;

566 
PrötfArgs
.
P¨am
 = Param+2;

567 
PrötfArgs
.
NumArgs
 = NumArgs-3;

568 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, P¨am[1]->VÆ->I¡egî, P¨am[2]->VÆ->Poöãr, &
PrötfArgs
);

569 
	}
}

598 
	$StdioV•rötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

600 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, -1, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

601 
	}
}

603 
	$StdioV¢¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

605 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Pointer, Param[3]->Val->Pointer);

606 
	}
}

622 c⁄° 
	gStdioDefs
[] = "\
 struct __va_listStruct va_list; \
 struct __FILEStruct FILE;\
";

628 
LibøryFun˘i⁄
 
	gStdioFun˘i⁄s
[] =

630 { 
StdioF›í
, "FILE *fopen(char *, char *);" },

632 { 
StdioF˛o£
, "int fclose(FILE *);" },

633 { 
StdioFªad
, "int fread(void *, int, int, FILE *);" },

634 { 
StdioFwrôe
, "int fwrite(void *, int, int, FILE *);" },

638 { 
StdioFputc
, "int fputc(int, FILE *);" },

662 { 
StdioGëch¨
, "int getchar();" },

663 { 
StdioPrötf
, "intÖrintf(char *, ...);" },

664 { 
StdioF¥ötf
, "int fprintf(FILE *, char *, ...);" },

665 { 
StdioS¥ötf
, "int sprintf(char *, char *, ...);" },

666 { 
StdioS≈rötf
,"int snprintf(char *, int, char *, ...);" },

670 { 
StdioV¥ötf
, "int vprintf(char *, va_list);" },

671 { 
StdioVÂrötf
,"int vfprintf(FILE *, char *, va_list);" },

672 { 
StdioV•rötf
,"int vsprintf(char *, char *, va_list);" },

673 { 
StdioV¢¥ötf
,"int vsnprintf(char *, int, char *, va_list);" },

677 { 
NULL
, NULL }

681 
	$gëch¨
(){

682 
ch
;

683 
	`ªad
(1,&
ch
,(ch));

684  
ch
;

685 
	}
}

686 
	$StdioSëupFunc
()

688 
VÆueTy≥
 *
Såu˘FûeTy≥
;

689 
VÆueTy≥
 *
FûePåTy≥
;

692 
Såu˘FûeTy≥
 = 
	`Ty≥Cª©eO∑queSåu˘
(
NULL
, 
	`TabÀSåRegi°î
("__FILEStruct"),148);

695 
FûePåTy≥
 = 
	`Ty≥GëM©chög
(
NULL
, 
Såu˘FûeTy≥
, 
Ty≥Poöãr
, 0, 
SåEm±y
, 
TRUE
);

698 
	`Ty≥Cª©eO∑queSåu˘
(
NULL
, 
	`TabÀSåRegi°î
("__va_listStruct"),148);

701 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOF", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOFVÆue
, 
FALSE
);

702 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "SEEK_SET", &
I¡Ty≥
, (
AnyVÆue
 *)&
SEEK_SETVÆue
, 
FALSE
);

703 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "SEEK_CUR", &
I¡Ty≥
, (
AnyVÆue
 *)&
SEEK_CURVÆue
, 
FALSE
);

704 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "SEEK_END", &
I¡Ty≥
, (
AnyVÆue
 *)&
SEEK_ENDVÆue
, 
FALSE
);

705 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "BUFSIZ", &
I¡Ty≥
, (
AnyVÆue
 *)&
BUFSIZVÆue
, 
FALSE
);

706 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "FILENAME_MAX", &
I¡Ty≥
, (
AnyVÆue
 *)&
FILENAME_MAXVÆue
, 
FALSE
);

707 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "_IOFBF", &
I¡Ty≥
, (
AnyVÆue
 *)&
_IOFBFVÆue
, 
FALSE
);

708 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "_IOLBF", &
I¡Ty≥
, (
AnyVÆue
 *)&
_IOLBFVÆue
, 
FALSE
);

709 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "_IONBF", &
I¡Ty≥
, (
AnyVÆue
 *)&
_IONBFVÆue
, 
FALSE
);

711 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "GETS_MAX", &
I¡Ty≥
, (
AnyVÆue
 *)&
GETS_MAXVÆue
, 
FALSE
);

714 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "°dö", 
FûePåTy≥
, (
AnyVÆue
 *)&
°döVÆue
, 
FALSE
);

715 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "°dout", 
FûePåTy≥
, (
AnyVÆue
 *)&
°doutVÆue
, 
FALSE
);

716 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "°dîr", 
FûePåTy≥
, (
AnyVÆue
 *)&
°dîrVÆue
, 
FALSE
);

719 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

720 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

721 
	}
}

724 
	$PrötCh
(
OutCh
, 
FILE
 *
Såóm
)

726 
	`Âutc
(
OutCh
, 
Såóm
);

727 
	}
}

729 
	$PrötSim∂eI¡
(
Num
, 
FILE
 *
Såóm
)

732 
	`fwrôe
(&
Num
,(Num),1,
Såóm
);

733 
	}
}

735 
	$PrötSå
(c⁄° *
Så
, 
FILE
 *
Såóm
)

737 
	`Âuts
(
Så
, 
Såóm
);

738 
	}
}

740 
	$PrötFP
(
Num
, 
FILE
 *
Såóm
)

742 
	`Ârötf
(
Såóm
, "%f", 
Num
);

743 
	}
}

	@cstdlib/stdio.c

2 
	~<î∫o.h
>

3 
	~"../öãΩªãr.h
"

4 
	~"../°dio.h
"

5 
	~<f˙é.h
>

6 
	~<°d¨g.h
>

8 #i‚de‡
BUILTIN_MINI_STDLIB


10 
	#MAX_FORMAT
 80

	)

11 
	#MAX_SCANF_ARGS
 10

	)

13 
FILE
 *
	gCStdOut
;

15 
	gZîoVÆue
 = 0;

16 
	gEOFVÆue
 = 
EOF
;

17 
	gSEEK_SETVÆue
 = 
SEEK_SET
;

18 
	gSEEK_CURVÆue
 = 
SEEK_CUR
;

19 
	gSEEK_ENDVÆue
 = 
SEEK_END
;

20 
	gBUFSIZVÆue
 = 
BUFSIZ
;

21 
	gFILENAME_MAXVÆue
 = 
FILENAME_MAX
;

22 
	g_IOFBFVÆue
 = 
_IOFBF
;

23 
	g_IOLBFVÆue
 = 
_IOLBF
;

24 
	g_IONBFVÆue
 = 
_IONBF
;

26 
	gGETS_MAXVÆue
 = 255;

28 
FILE
 *
	g°döVÆue
;

29 
FILE
 *
	g°doutVÆue
;

30 
FILE
 *
	g°dîrVÆue
;

32 
VÆueTy≥
 *
	gFûePåTy≥
 = 
NULL
;

36 
	sStdOutSåómSåu˘


38 
FILE
 *
	mFûePå
;

39 *
	mSåOutPå
;

40 
	mSåOutLí
;

41 
	mCh¨Cou¡
;

43 } 
	tStdOutSåóm
;

46 
	sStdV¨¨g


48 
VÆue
 **
	mP¨am
;

49 
	mNumArgs
;

53 
	$BasicIOInô
()

55 
CStdOut
 = 
°dout
;

56 
°döVÆue
 = 
°dö
;

57 
°doutVÆue
 = 
°dout
;

58 
°dîrVÆue
 = 
°dîr
;

59 
	}
}

60 
	$Âutc
(
ch
,
FILE
 *
°ªam
){

61 
	`fwrôe
(&
ch
,1,1,
°ªam
);

62  ()
ch
;

63 
	}
}

65 
	$StdioOutPutc
(
OutCh
, 
StdOutSåóm
 *
Såóm
)

67 i‡(
Såóm
->
FûePå
 !
NULL
)

70 
	`Âutc
(
OutCh
, 
Såóm
->
FûePå
);

71 
Såóm
->
Ch¨Cou¡
++;

73 i‡(
Såóm
->
SåOutLí
 < 0 || Stream->StrOutLen > 1)

76 *
Såóm
->
SåOutPå
 = 
OutCh
;

77 
Såóm
->
SåOutPå
++;

79 i‡(
Såóm
->
SåOutLí
 > 1)

80 
Såóm
->
SåOutLí
--;

82 
Såóm
->
Ch¨Cou¡
++;

84 
	}
}

87 
	$StdioOutPuts
(c⁄° *
Så
, 
StdOutSåóm
 *
Såóm
)

89 i‡(
Såóm
->
FûePå
 !
NULL
)

92 
	`Âuts
(
Så
, 
Såóm
->
FûePå
);

97 *
Så
 != '\0')

99 i‡(
Såóm
->
SåOutLí
 < 0 || Stream->StrOutLen > 1)

102 *
Såóm
->
SåOutPå
 = *
Så
;

103 
Så
++;

104 
Såóm
->
SåOutPå
++;

106 i‡(
Såóm
->
SåOutLí
 > 1)

107 
Såóm
->
SåOutLí
--;

109 
Såóm
->
Ch¨Cou¡
++;

113 
	}
}

116 
	$StdioF¥ötfW‹d
(
StdOutSåóm
 *
Såóm
, c⁄° *
F‹m©
, 
VÆue
)

118 i‡(
Såóm
->
FûePå
 !
NULL
)

119 
Såóm
->
Ch¨Cou¡
 +
	`Ârötf
(Såóm->
FûePå
, 
F‹m©
, 
VÆue
);

121 i‡(
Såóm
->
SåOutLí
 >= 0)

123 
CCou¡
 = 
	`¢¥ötf
(
Såóm
->
SåOutPå
, Såóm->
SåOutLí
, 
F‹m©
, 
VÆue
);

124 
Såóm
->
SåOutPå
 +
CCou¡
;

125 
Såóm
->
SåOutLí
 -
CCou¡
;

126 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

130 
CCou¡
 = 
	`•rötf
(
Såóm
->
SåOutPå
, 
F‹m©
, 
VÆue
);

131 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

132 
Såóm
->
SåOutPå
 +
CCou¡
;

134 
	}
}

137 
	$StdioF¥ötfFP
(
StdOutSåóm
 *
Såóm
, c⁄° *
F‹m©
, 
VÆue
)

139 i‡(
Såóm
->
FûePå
 !
NULL
)

140 
Såóm
->
Ch¨Cou¡
 +
	`Ârötf
(Såóm->
FûePå
, 
F‹m©
, 
VÆue
);

142 i‡(
Såóm
->
SåOutLí
 >= 0)

144 
CCou¡
 = 
	`¢¥ötf
(
Såóm
->
SåOutPå
, Såóm->
SåOutLí
, 
F‹m©
, 
VÆue
);

145 
Såóm
->
SåOutPå
 +
CCou¡
;

146 
Såóm
->
SåOutLí
 -
CCou¡
;

147 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

151 
CCou¡
 = 
	`•rötf
(
Såóm
->
SåOutPå
, 
F‹m©
, 
VÆue
);

152 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

153 
Såóm
->
SåOutPå
 +
CCou¡
;

155 
	}
}

158 
	$StdioF¥ötfPoöãr
(
StdOutSåóm
 *
Såóm
, c⁄° *
F‹m©
, *
VÆue
)

160 i‡(
Såóm
->
FûePå
 !
NULL
)

161 
Såóm
->
Ch¨Cou¡
 +
	`Ârötf
(Såóm->
FûePå
, 
F‹m©
, 
VÆue
);

163 i‡(
Såóm
->
SåOutLí
 >= 0)

165 
CCou¡
 = 
	`¢¥ötf
(
Såóm
->
SåOutPå
, Såóm->
SåOutLí
, 
F‹m©
, 
VÆue
);

166 
Såóm
->
SåOutPå
 +
CCou¡
;

167 
Såóm
->
SåOutLí
 -
CCou¡
;

168 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

172 
CCou¡
 = 
	`•rötf
(
Såóm
->
SåOutPå
, 
F‹m©
, 
VÆue
);

173 
Såóm
->
Ch¨Cou¡
 +
CCou¡
;

174 
Såóm
->
SåOutPå
 +
CCou¡
;

176 
	}
}

179 
	$StdioBa£Prötf
(
P¨£Sèã
 *
P¨£r
, 
FILE
 *
Såóm
, *
SåOut
, 
SåOutLí
, *
F‹m©
, 
StdV¨¨g
 *
Args
)

181 
VÆue
 *
ThisArg
 = 
Args
->
P¨am
[0];

182 
ArgCou¡
 = 0;

183 *
FPos
 = 
F‹m©
;

184 
O√F‹m©Buf
[
MAX_FORMAT
+1];

185 
O√F‹m©Cou¡
;

186 
VÆueTy≥
 *
ShowTy≥
;

187 
StdOutSåóm
 
SOSåóm
;

189 
SOSåóm
.
FûePå
 = 
Såóm
;

190 
SOSåóm
.
SåOutPå
 = 
SåOut
;

191 
SOSåóm
.
SåOutLí
 = StrOutLen;

192 
SOSåóm
.
Ch¨Cou¡
 = 0;

194 *
FPos
 != '\0')

196 i‡(*
FPos
 == '%')

199 
FPos
++;

200 
ShowTy≥
 = 
NULL
;

201 
O√F‹m©Buf
[0] = '%';

202 
O√F‹m©Cou¡
 = 1;

206 *
FPos
)

208 'd': 'i': 
ShowTy≥
 = &
I¡Ty≥
; ;

209 'o': 'u': 'x': 'X': 
ShowTy≥
 = &
I¡Ty≥
; ;

210 #i‚de‡
NO_FP


211 'e': 'E': 
ShowTy≥
 = &
FPTy≥
; ;

212 'f': 'F': 
ShowTy≥
 = &
FPTy≥
; ;

213 'g': 'G': 
ShowTy≥
 = &
FPTy≥
; ;

215 'a': 'A': 
ShowTy≥
 = &
I¡Ty≥
; ;

216 'c': 
ShowTy≥
 = &
I¡Ty≥
; ;

217 's': 
ShowTy≥
 = 
Ch¨PåTy≥
; ;

218 'p': 
ShowTy≥
 = 
VoidPåTy≥
; ;

219 'n': 
ShowTy≥
 = &
VoidTy≥
; ;

220 'm': 
ShowTy≥
 = &
VoidTy≥
; ;

221 '%': 
ShowTy≥
 = &
VoidTy≥
; ;

222 '\0': 
ShowTy≥
 = &
VoidTy≥
; ;

226 
O√F‹m©Buf
[
O√F‹m©Cou¡
] = *
FPos
;

227 
O√F‹m©Cou¡
++;

230 i‡(
ShowTy≥
 =&
VoidTy≥
)

232 *
FPos
)

235 '%': 
	`StdioOutPutc
(*
FPos
, &
SOSåóm
); ;

236 '\0': 
O√F‹m©Buf
[
O√F‹m©Cou¡
] = '\0'; 
	`StdioOutPutc
(*
FPos
, &
SOSåóm
); ;

238 
ThisArg
 = (
VÆue
 *)((*)ThisArg + 
	`MEM_ALIGN
((VÆueË+ 
	`Ty≥SèckSizeVÆue
(ThisArg)));

239 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Aºay
 && ThisArg->Typ->
FromTy≥
->Ba£ =
Ty≥I¡
)

240 *(*)
ThisArg
->
VÆ
->
Poöãr
 = 
SOSåóm
.
Ch¨Cou¡
;

245 
FPos
++;

247 } 
ShowTy≥
 =
NULL
 && 
O√F‹m©Cou¡
 < 
MAX_FORMAT
);

249 i‡(
ShowTy≥
 !&
VoidTy≥
)

251 i‡(
ArgCou¡
 >
Args
->
NumArgs
)

252 
	`StdioOutPuts
("XXX", &
SOSåóm
);

256 
O√F‹m©Buf
[
O√F‹m©Cou¡
] = '\0';

259 
ThisArg
 = (
VÆue
 *)((*)ThisArg + 
	`MEM_ALIGN
((VÆueË+ 
	`Ty≥SèckSizeVÆue
(ThisArg)));

260 i‡(
ShowTy≥
 =&
I¡Ty≥
)

263 i‡(
	`IS_NUMERIC_COERCIBLE
(
ThisArg
))

264 
	`StdioF¥ötfW‹d
(&
SOSåóm
, 
O√F‹m©Buf
, 
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
ThisArg
));

266 
	`StdioOutPuts
("XXX", &
SOSåóm
);

268 #i‚de‡
NO_FP


269 i‡(
ShowTy≥
 =&
FPTy≥
)

272 i‡(
	`IS_NUMERIC_COERCIBLE
(
ThisArg
))

273 
	`StdioF¥ötfFP
(&
SOSåóm
, 
O√F‹m©Buf
, 
	`Ex¥essi⁄C€r˚FP
(
ThisArg
));

275 
	`StdioOutPuts
("XXX", &
SOSåóm
);

278 i‡(
ShowTy≥
 =
Ch¨PåTy≥
)

280 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

281 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, 
ThisArg
->
VÆ
->
Poöãr
);

283 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Aºay
 && ThisArg->Typ->
FromTy≥
->Ba£ =
Ty≥Ch¨
)

284 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, &
ThisArg
->
VÆ
->
AºayMem
[0]);

287 
	`StdioOutPuts
("XXX", &
SOSåóm
);

289 i‡(
ShowTy≥
 =
VoidPåTy≥
)

291 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

292 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, 
ThisArg
->
VÆ
->
Poöãr
);

294 i‡(
ThisArg
->
Typ
->
Ba£
 =
Ty≥Aºay
)

295 
	`StdioF¥ötfPoöãr
(&
SOSåóm
, 
O√F‹m©Buf
, &
ThisArg
->
VÆ
->
AºayMem
[0]);

298 
	`StdioOutPuts
("XXX", &
SOSåóm
);

301 
ArgCou¡
++;

308 
	`StdioOutPutc
(*
FPos
, &
SOSåóm
);

309 
FPos
++;

314 i‡(
SOSåóm
.
SåOutPå
 !
NULL
 && SOSåóm.
SåOutLí
 > 0)

315 *
SOSåóm
.
SåOutPå
 = '\0';

317  
SOSåóm
.
Ch¨Cou¡
;

318 
	}
}

352 
	$StdioF›í
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

354 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`f›í
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

355 
	}
}

362 
	$StdioF˛o£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

364 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`f˛o£
(
P¨am
[0]->VÆ->
Poöãr
);

365 
	}
}

367 
	$StdioFªad
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

369 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`‰ód
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer, Param[3]->Val->Pointer);

370 
	}
}

372 
	$StdioFwrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

374 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fwrôe
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer, Param[3]->Val->Pointer);

375 
	}
}

452 
	$StdioFputc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

454 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`Âutc
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
);

455 
	}
}

520 
	$StdioGëch¨
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

522 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëch¨
();

523 
	}
}

525 
	$StdioPrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

527 
StdV¨¨g
 
PrötfArgs
;

529 
PrötfArgs
.
P¨am
 = Param;

530 
PrötfArgs
.
NumArgs
 = NumArgs-1;

531 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
°dout
, 
NULL
, 0, 
P¨am
[0]->VÆ->
Poöãr
, &
PrötfArgs
);

532 
	}
}

534 
	$StdioV¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

536 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
°dout
, 
NULL
, 0, 
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

537 
	}
}

539 
	$StdioF¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

541 
StdV¨¨g
 
PrötfArgs
;

543 
PrötfArgs
.
P¨am
 = Param + 1;

544 
PrötfArgs
.
NumArgs
 = NumArgs-2;

545 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
P¨am
[0]->VÆ->
Poöãr
, 
NULL
, 0, P¨am[1]->VÆ->Poöãr, &
PrötfArgs
);

546 
	}
}

548 
	$StdioVÂrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

550 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
P¨am
[0]->VÆ->
Poöãr
, 
NULL
, 0, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

551 
	}
}

553 
	$StdioS¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

555 
StdV¨¨g
 
PrötfArgs
;

557 
PrötfArgs
.
P¨am
 = Param + 1;

558 
PrötfArgs
.
NumArgs
 = NumArgs-2;

559 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, -1, P¨am[1]->VÆ->Poöãr, &
PrötfArgs
);

560 
	}
}

562 
	$StdioS≈rötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

564 
StdV¨¨g
 
PrötfArgs
;

566 
PrötfArgs
.
P¨am
 = Param+2;

567 
PrötfArgs
.
NumArgs
 = NumArgs-3;

568 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, P¨am[1]->VÆ->I¡egî, P¨am[2]->VÆ->Poöãr, &
PrötfArgs
);

569 
	}
}

598 
	$StdioV•rötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

600 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, -1, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

601 
	}
}

603 
	$StdioV¢¥ötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

605 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`StdioBa£Prötf
(
P¨£r
, 
NULL
, 
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Pointer, Param[3]->Val->Pointer);

606 
	}
}

622 c⁄° 
	gStdioDefs
[] = "\
 struct __va_listStruct va_list; \
 struct __FILEStruct FILE;\
";

628 
LibøryFun˘i⁄
 
	gStdioFun˘i⁄s
[] =

630 { 
StdioF›í
, "FILE *fopen(char *, char *);" },

632 { 
StdioF˛o£
, "int fclose(FILE *);" },

633 { 
StdioFªad
, "int fread(void *, int, int, FILE *);" },

634 { 
StdioFwrôe
, "int fwrite(void *, int, int, FILE *);" },

638 { 
StdioFputc
, "int fputc(int, FILE *);" },

662 { 
StdioGëch¨
, "int getchar();" },

663 { 
StdioPrötf
, "intÖrintf(char *, ...);" },

664 { 
StdioF¥ötf
, "int fprintf(FILE *, char *, ...);" },

665 { 
StdioS¥ötf
, "int sprintf(char *, char *, ...);" },

666 { 
StdioS≈rötf
,"int snprintf(char *, int, char *, ...);" },

670 { 
StdioV¥ötf
, "int vprintf(char *, va_list);" },

671 { 
StdioVÂrötf
,"int vfprintf(FILE *, char *, va_list);" },

672 { 
StdioV•rötf
,"int vsprintf(char *, char *, va_list);" },

673 { 
StdioV¢¥ötf
,"int vsnprintf(char *, int, char *, va_list);" },

677 { 
NULL
, NULL }

681 
	$gëch¨
(){

682 
ch
;

683 
	`ªad
(1,&
ch
,(ch));

684  
ch
;

685 
	}
}

686 
	$StdioSëupFunc
()

688 
VÆueTy≥
 *
Såu˘FûeTy≥
;

689 
VÆueTy≥
 *
FûePåTy≥
;

692 
Såu˘FûeTy≥
 = 
	`Ty≥Cª©eO∑queSåu˘
(
NULL
, 
	`TabÀSåRegi°î
("__FILEStruct"),148);

695 
FûePåTy≥
 = 
	`Ty≥GëM©chög
(
NULL
, 
Såu˘FûeTy≥
, 
Ty≥Poöãr
, 0, 
SåEm±y
, 
TRUE
);

698 
	`Ty≥Cª©eO∑queSåu˘
(
NULL
, 
	`TabÀSåRegi°î
("__va_listStruct"),148);

701 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "EOF", &
I¡Ty≥
, (
AnyVÆue
 *)&
EOFVÆue
, 
FALSE
);

702 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "SEEK_SET", &
I¡Ty≥
, (
AnyVÆue
 *)&
SEEK_SETVÆue
, 
FALSE
);

703 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "SEEK_CUR", &
I¡Ty≥
, (
AnyVÆue
 *)&
SEEK_CURVÆue
, 
FALSE
);

704 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "SEEK_END", &
I¡Ty≥
, (
AnyVÆue
 *)&
SEEK_ENDVÆue
, 
FALSE
);

705 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "BUFSIZ", &
I¡Ty≥
, (
AnyVÆue
 *)&
BUFSIZVÆue
, 
FALSE
);

706 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "FILENAME_MAX", &
I¡Ty≥
, (
AnyVÆue
 *)&
FILENAME_MAXVÆue
, 
FALSE
);

707 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "_IOFBF", &
I¡Ty≥
, (
AnyVÆue
 *)&
_IOFBFVÆue
, 
FALSE
);

708 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "_IOLBF", &
I¡Ty≥
, (
AnyVÆue
 *)&
_IOLBFVÆue
, 
FALSE
);

709 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "_IONBF", &
I¡Ty≥
, (
AnyVÆue
 *)&
_IONBFVÆue
, 
FALSE
);

711 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "GETS_MAX", &
I¡Ty≥
, (
AnyVÆue
 *)&
GETS_MAXVÆue
, 
FALSE
);

714 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "°dö", 
FûePåTy≥
, (
AnyVÆue
 *)&
°döVÆue
, 
FALSE
);

715 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "°dout", 
FûePåTy≥
, (
AnyVÆue
 *)&
°doutVÆue
, 
FALSE
);

716 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "°dîr", 
FûePåTy≥
, (
AnyVÆue
 *)&
°dîrVÆue
, 
FALSE
);

719 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

720 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

721 
	}
}

724 
	$PrötCh
(
OutCh
, 
FILE
 *
Såóm
)

726 
	`Âutc
(
OutCh
, 
Såóm
);

727 
	}
}

729 
	$PrötSim∂eI¡
(
Num
, 
FILE
 *
Såóm
)

732 
	`fwrôe
(&
Num
,(Num),1,
Såóm
);

733 
	}
}

735 
	$PrötSå
(c⁄° *
Så
, 
FILE
 *
Såóm
)

737 
	`Âuts
(
Så
, 
Såóm
);

738 
	}
}

740 
	$PrötFP
(
Num
, 
FILE
 *
Såóm
)

742 
	`Ârötf
(
Såóm
, "%f", 
Num
);

743 
	}
}

	@cstdlib/stdlib.c

2 
	~"../öãΩªãr.h
"

4 #i‚de‡
BUILTIN_MINI_STDLIB


6 
	gZîoVÆue
 = 0;

8 #i‚de‡
NO_FP


9 
	$StdlibAtof
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

11 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`©of
(
P¨am
[0]->VÆ->
Poöãr
);

12 
	}
}

15 
	$StdlibAtoi
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

17 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©oi
(
P¨am
[0]->VÆ->
Poöãr
);

18 
	}
}

20 
	$StdlibAtﬁ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

22 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©ﬁ
(
P¨am
[0]->VÆ->
Poöãr
);

23 
	}
}

25 #i‚de‡
NO_FP


26 
	$StdlibSåtod
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

28 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`°πod
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

29 
	}
}

32 
	$StdlibSåtﬁ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

34 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°πﬁ
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

35 
	}
}

37 
	$StdlibSåtoul
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

39 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°πoul
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

40 
	}
}

42 
	$StdlibMÆloc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

44 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`mÆloc
(
P¨am
[0]->VÆ->
I¡egî
);

45 
	}
}

47 
	$StdlibCÆloc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

49 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ˇŒoc
(
P¨am
[0]->VÆ->
I¡egî
, Param[1]->Val->Integer);

50 
	}
}

52 
	$StdlibRóŒoc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

54 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ªÆloc
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

55 
	}
}

57 
	$StdlibFªe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

59 
	`‰ì
(
P¨am
[0]->
VÆ
->
Poöãr
);

60 
	}
}

62 
	$StdlibR™d
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

64 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ønd
();

65 
	}
}

67 
	$StdlibSønd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

69 
	`§™d
(
P¨am
[0]->
VÆ
->
I¡egî
);

70 
	}
}

72 
	$StdlibAb‹t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

74 
	`ProgømFaû
(
P¨£r
, "abort");

75 
	}
}

77 
	$StdlibExô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

79 
	`Pœtf‹mExô
(
P¨am
[0]->
VÆ
->
I¡egî
);

80 
	}
}

82 
	$StdlibGëív
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

84 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëív
(
P¨am
[0]->Val->Pointer);

85 
	}
}

87 
	$StdlibSy°em
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

89 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sy°em
(
P¨am
[0]->VÆ->
Poöãr
);

90 
	}
}

93 
	$StdlibB£¨ch
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

95 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`b£¨ch
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
, Param[3]->Val->Integer, ((*)())Param[4]->Val->Pointer);

96 
	}
}

99 
	$StdlibAbs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

101 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`abs
(
P¨am
[0]->Val->Integer);

102 
	}
}

104 
	$StdlibLabs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

106 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`œbs
(
P¨am
[0]->Val->Integer);

107 
	}
}

110 
	$StdlibDiv
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

112 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`div
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

113 
	}
}

115 
	$StdlibLdiv
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

117 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ldiv
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

118 
	}
}

123 c⁄° 
	gStdlibDefs
[] = "\
 struct { \
 quot,Ñem; \
} div_t; \
\
 struct { \
 quot,Ñem; \
}Üdiv_t; \
";

135 
LibøryFun˘i⁄
 
	gStdlibFun˘i⁄s
[] =

137 #i‚de‡
NO_FP


138 { 
StdlibAtof
, "floatátof(char *);" },

139 { 
StdlibSåtod
, "float strtod(char *,char **);" },

141 { 
StdlibAtoi
, "intátoi(char *);" },

142 { 
StdlibAtﬁ
, "intátol(char *);" },

143 { 
StdlibSåtﬁ
, "int strtol(char *,char **,int);" },

144 { 
StdlibSåtoul
, "int strtoul(char *,char **,int);" },

145 { 
StdlibMÆloc
, "void *malloc(int);" },

146 { 
StdlibCÆloc
, "void *calloc(int,int);" },

147 { 
StdlibRóŒoc
, "void *realloc(void *,int);" },

148 { 
StdlibFªe
, "void free(void *);" },

149 { 
StdlibR™d
, "intÑand();" },

150 { 
StdlibSønd
, "void srand(int);" },

151 { 
StdlibAb‹t
, "voidábort();" },

152 { 
StdlibExô
, "voidÉxit(int);" },

153 { 
StdlibGëív
, "char *getenv(char *);" },

154 { 
StdlibSy°em
, "int system(char *);" },

157 { 
StdlibAbs
, "intábs(int);" },

158 { 
StdlibLabs
, "intÜabs(int);" },

160 { 
StdlibDiv
, "div_t div(int);" },

161 { 
StdlibLdiv
, "ldiv_tÜdiv(int);" },

163 { 
NULL
, NULL }

167 
	$StdlibSëupFunc
()

170 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

171 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

172 
	}
}

	@cstdlib/stdlib.c

2 
	~"../öãΩªãr.h
"

4 #i‚de‡
BUILTIN_MINI_STDLIB


6 
	gZîoVÆue
 = 0;

8 #i‚de‡
NO_FP


9 
	$StdlibAtof
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

11 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`©of
(
P¨am
[0]->VÆ->
Poöãr
);

12 
	}
}

15 
	$StdlibAtoi
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

17 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©oi
(
P¨am
[0]->VÆ->
Poöãr
);

18 
	}
}

20 
	$StdlibAtﬁ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

22 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©ﬁ
(
P¨am
[0]->VÆ->
Poöãr
);

23 
	}
}

25 #i‚de‡
NO_FP


26 
	$StdlibSåtod
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

28 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`°πod
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

29 
	}
}

32 
	$StdlibSåtﬁ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

34 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°πﬁ
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

35 
	}
}

37 
	$StdlibSåtoul
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

39 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°πoul
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

40 
	}
}

42 
	$StdlibMÆloc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

44 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`mÆloc
(
P¨am
[0]->VÆ->
I¡egî
);

45 
	}
}

47 
	$StdlibCÆloc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

49 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ˇŒoc
(
P¨am
[0]->VÆ->
I¡egî
, Param[1]->Val->Integer);

50 
	}
}

52 
	$StdlibRóŒoc
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

54 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ªÆloc
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

55 
	}
}

57 
	$StdlibFªe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

59 
	`‰ì
(
P¨am
[0]->
VÆ
->
Poöãr
);

60 
	}
}

62 
	$StdlibR™d
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

64 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ønd
();

65 
	}
}

67 
	$StdlibSønd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

69 
	`§™d
(
P¨am
[0]->
VÆ
->
I¡egî
);

70 
	}
}

72 
	$StdlibAb‹t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

74 
	`ProgømFaû
(
P¨£r
, "abort");

75 
	}
}

77 
	$StdlibExô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

79 
	`Pœtf‹mExô
(
P¨am
[0]->
VÆ
->
I¡egî
);

80 
	}
}

82 
	$StdlibGëív
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

84 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëív
(
P¨am
[0]->Val->Pointer);

85 
	}
}

87 
	$StdlibSy°em
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

89 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sy°em
(
P¨am
[0]->VÆ->
Poöãr
);

90 
	}
}

93 
	$StdlibB£¨ch
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

95 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`b£¨ch
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
, Param[3]->Val->Integer, ((*)())Param[4]->Val->Pointer);

96 
	}
}

99 
	$StdlibAbs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

101 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`abs
(
P¨am
[0]->Val->Integer);

102 
	}
}

104 
	$StdlibLabs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

106 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`œbs
(
P¨am
[0]->Val->Integer);

107 
	}
}

110 
	$StdlibDiv
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

112 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`div
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

113 
	}
}

115 
	$StdlibLdiv
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

117 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ldiv
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

118 
	}
}

123 c⁄° 
	gStdlibDefs
[] = "\
 struct { \
 quot,Ñem; \
} div_t; \
\
 struct { \
 quot,Ñem; \
}Üdiv_t; \
";

135 
LibøryFun˘i⁄
 
	gStdlibFun˘i⁄s
[] =

137 #i‚de‡
NO_FP


138 { 
StdlibAtof
, "floatátof(char *);" },

139 { 
StdlibSåtod
, "float strtod(char *,char **);" },

141 { 
StdlibAtoi
, "intátoi(char *);" },

142 { 
StdlibAtﬁ
, "intátol(char *);" },

143 { 
StdlibSåtﬁ
, "int strtol(char *,char **,int);" },

144 { 
StdlibSåtoul
, "int strtoul(char *,char **,int);" },

145 { 
StdlibMÆloc
, "void *malloc(int);" },

146 { 
StdlibCÆloc
, "void *calloc(int,int);" },

147 { 
StdlibRóŒoc
, "void *realloc(void *,int);" },

148 { 
StdlibFªe
, "void free(void *);" },

149 { 
StdlibR™d
, "intÑand();" },

150 { 
StdlibSønd
, "void srand(int);" },

151 { 
StdlibAb‹t
, "voidábort();" },

152 { 
StdlibExô
, "voidÉxit(int);" },

153 { 
StdlibGëív
, "char *getenv(char *);" },

154 { 
StdlibSy°em
, "int system(char *);" },

157 { 
StdlibAbs
, "intábs(int);" },

158 { 
StdlibLabs
, "intÜabs(int);" },

160 { 
StdlibDiv
, "div_t div(int);" },

161 { 
StdlibLdiv
, "ldiv_tÜdiv(int);" },

163 { 
NULL
, NULL }

167 
	$StdlibSëupFunc
()

170 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

171 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

172 
	}
}

	@cstdlib/string.c

2 
	~"../öãΩªãr.h
"

3 
	~<°rögs.h
>

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 
	gZîoVÆue
 = 0;

9 
	$SåögSå˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

11 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°r˝y
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

12 
	}
}

14 
	$SåögSån˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

16 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°∫˝y
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

17 
	}
}

19 
	$SåögSåcmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

21 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rcmp
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

22 
	}
}

24 
	$SåögSåncmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

26 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°∫cmp
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

27 
	}
}

29 
	$SåögSåˇt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

31 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°rˇt
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

32 
	}
}

34 
	$SåögSånˇt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

36 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°∫ˇt
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

37 
	}
}

39 
	$SåögIndex
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

41 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ödex
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

42 
	}
}

44 
	$SåögRödex
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

46 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`rödex
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

47 
	}
}

49 
	$SåögSåÀn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

51 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°æí
(
P¨am
[0]->VÆ->
Poöãr
);

52 
	}
}

54 
	$SåögMem£t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

56 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`mem£t
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
, Param[2]->Val->Integer);

57 
	}
}

59 
	$SåögMem˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

61 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`mem˝y
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

62 
	}
}

64 
	$SåögMemcmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

66 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`memcmp
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

67 
	}
}

69 
	$SåögMemmove
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

71 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`memmove
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

72 
	}
}

74 
	$SåögMemchr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

76 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`memchr
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
, Param[2]->Val->Integer);

77 
	}
}

79 
	$SåögSåchr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

81 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°rchr
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

82 
	}
}

84 
	$SåögSårchr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

86 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°ºchr
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

87 
	}
}

89 
	$SåögSåcﬁl
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

91 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rcﬁl
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

92 
	}
}

99 
	$SåögSå•n
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

101 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°r•n
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

102 
	}
}

104 
	$SåögSåc•n
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

106 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rc•n
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

107 
	}
}

109 
	$SåögSåpbrk
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

111 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°Ωbrk
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

112 
	}
}

114 
	$SåögSå°r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

116 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°r°r
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

117 
	}
}

119 
	$SåögSåtok
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

121 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°πok
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

122 
	}
}

124 
	$SåögSåx‰m
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

126 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rx‰m
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

127 
	}
}

129 
	$SåögSådup
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

131 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°rdup
(
P¨am
[0]->Val->Pointer);

132 
	}
}

134 
	$SåögSåtok_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

136 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°πok_r
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

137 
	}
}

140 
LibøryFun˘i⁄
 
	gSåögFun˘i⁄s
[] =

142 { 
SåögIndex
, "char *index(char *,int);" },

143 { 
SåögRödex
, "char *rindex(char *,int);" },

144 { 
SåögMem˝y
, "void *memcpy(void *,void *,int);" },

145 { 
SåögMemmove
, "void *memmove(void *,void *,int);" },

146 { 
SåögMemchr
, "void *memchr(char *,int,int);" },

147 { 
SåögMemcmp
, "int memcmp(void *,void *,int);" },

148 { 
SåögMem£t
, "void *memset(void *,int,int);" },

149 { 
SåögSåˇt
, "char *strcat(char *,char *);" },

150 { 
SåögSånˇt
, "char *strncat(char *,char *,int);" },

151 { 
SåögSåchr
, "char *strchr(char *,int);" },

152 { 
SåögSårchr
, "char *strrchr(char *,int);" },

153 { 
SåögSåcmp
, "int strcmp(char *,char *);" },

154 { 
SåögSåncmp
, "int strncmp(char *,char *,int);" },

155 { 
SåögSåcﬁl
, "int strcoll(char *,char *);" },

156 { 
SåögSå˝y
, "char *strcpy(char *,char *);" },

157 { 
SåögSån˝y
, "char *strncpy(char *,char *,int);" },

159 { 
SåögSåÀn
, "int strlen(char *);" },

160 { 
SåögSå•n
, "int strspn(char *,char *);" },

161 { 
SåögSåc•n
, "int strcspn(char *,char *);" },

162 { 
SåögSåpbrk
, "char *strpbrk(char *,char *);" },

163 { 
SåögSå°r
, "char *strstr(char *,char *);" },

164 { 
SåögSåtok
, "char *strtok(char *,char *);" },

165 { 
SåögSåx‰m
, "int strxfrm(char *,char *,int);" },

166 { 
SåögSådup
, "char *strdup(char *);" },

167 { 
SåögSåtok_r
, "char *strtok_r(char *,char *,char **);" },

168 { 
NULL
, NULL }

172 
	$SåögSëupFunc
()

175 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

176 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

177 
	}
}

	@cstdlib/string.c

2 
	~"../öãΩªãr.h
"

3 
	~<°rögs.h
>

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 
	gZîoVÆue
 = 0;

9 
	$SåögSå˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

11 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°r˝y
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

12 
	}
}

14 
	$SåögSån˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

16 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°∫˝y
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

17 
	}
}

19 
	$SåögSåcmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

21 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rcmp
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

22 
	}
}

24 
	$SåögSåncmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

26 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°∫cmp
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

27 
	}
}

29 
	$SåögSåˇt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

31 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°rˇt
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

32 
	}
}

34 
	$SåögSånˇt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

36 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°∫ˇt
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

37 
	}
}

39 
	$SåögIndex
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

41 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ödex
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

42 
	}
}

44 
	$SåögRödex
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

46 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`rödex
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

47 
	}
}

49 
	$SåögSåÀn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

51 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°æí
(
P¨am
[0]->VÆ->
Poöãr
);

52 
	}
}

54 
	$SåögMem£t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

56 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`mem£t
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
, Param[2]->Val->Integer);

57 
	}
}

59 
	$SåögMem˝y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

61 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`mem˝y
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

62 
	}
}

64 
	$SåögMemcmp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

66 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`memcmp
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

67 
	}
}

69 
	$SåögMemmove
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

71 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`memmove
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->Poöãr, P¨am[2]->VÆ->
I¡egî
);

72 
	}
}

74 
	$SåögMemchr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

76 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`memchr
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
, Param[2]->Val->Integer);

77 
	}
}

79 
	$SåögSåchr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

81 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°rchr
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

82 
	}
}

84 
	$SåögSårchr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

86 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°ºchr
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

87 
	}
}

89 
	$SåögSåcﬁl
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

91 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rcﬁl
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

92 
	}
}

99 
	$SåögSå•n
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

101 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°r•n
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

102 
	}
}

104 
	$SåögSåc•n
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

106 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rc•n
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

107 
	}
}

109 
	$SåögSåpbrk
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

111 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°Ωbrk
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

112 
	}
}

114 
	$SåögSå°r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

116 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°r°r
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

117 
	}
}

119 
	$SåögSåtok
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

121 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°πok
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

122 
	}
}

124 
	$SåögSåx‰m
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

126 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°rx‰m
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

127 
	}
}

129 
	$SåögSådup
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

131 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°rdup
(
P¨am
[0]->Val->Pointer);

132 
	}
}

134 
	$SåögSåtok_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

136 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°πok_r
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

137 
	}
}

140 
LibøryFun˘i⁄
 
	gSåögFun˘i⁄s
[] =

142 { 
SåögIndex
, "char *index(char *,int);" },

143 { 
SåögRödex
, "char *rindex(char *,int);" },

144 { 
SåögMem˝y
, "void *memcpy(void *,void *,int);" },

145 { 
SåögMemmove
, "void *memmove(void *,void *,int);" },

146 { 
SåögMemchr
, "void *memchr(char *,int,int);" },

147 { 
SåögMemcmp
, "int memcmp(void *,void *,int);" },

148 { 
SåögMem£t
, "void *memset(void *,int,int);" },

149 { 
SåögSåˇt
, "char *strcat(char *,char *);" },

150 { 
SåögSånˇt
, "char *strncat(char *,char *,int);" },

151 { 
SåögSåchr
, "char *strchr(char *,int);" },

152 { 
SåögSårchr
, "char *strrchr(char *,int);" },

153 { 
SåögSåcmp
, "int strcmp(char *,char *);" },

154 { 
SåögSåncmp
, "int strncmp(char *,char *,int);" },

155 { 
SåögSåcﬁl
, "int strcoll(char *,char *);" },

156 { 
SåögSå˝y
, "char *strcpy(char *,char *);" },

157 { 
SåögSån˝y
, "char *strncpy(char *,char *,int);" },

159 { 
SåögSåÀn
, "int strlen(char *);" },

160 { 
SåögSå•n
, "int strspn(char *,char *);" },

161 { 
SåögSåc•n
, "int strcspn(char *,char *);" },

162 { 
SåögSåpbrk
, "char *strpbrk(char *,char *);" },

163 { 
SåögSå°r
, "char *strstr(char *,char *);" },

164 { 
SåögSåtok
, "char *strtok(char *,char *);" },

165 { 
SåögSåx‰m
, "int strxfrm(char *,char *,int);" },

166 { 
SåögSådup
, "char *strdup(char *);" },

167 { 
SåögSåtok_r
, "char *strtok_r(char *,char *,char **);" },

168 { 
NULL
, NULL }

172 
	$SåögSëupFunc
()

175 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

176 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

177 
	}
}

	@cstdlib/time.c

2 
	~<time.h
>

3 
	~"../öãΩªãr.h
"

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 
	gCLOCKS_PER_SECVÆue
 = 
CLOCKS_PER_SEC
;

9 #ifde‡
CLK_PER_SEC


10 
	gCLK_PER_SECVÆue
 = 
CLK_PER_SEC
;

13 #ifde‡
CLK_TCK


14 
	gCLK_TCKVÆue
 = 
CLOCKS_PER_SEC
;

17 
	$StdAs˘ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

19 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`as˘ime
(
P¨am
[0]->Val->Pointer);

20 
	}
}

22 
	$StdClock
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

24 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`˛ock
();

25 
	}
}

27 
	$StdCtime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

29 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`˘ime
(
P¨am
[0]->Val->Pointer);

30 
	}
}

32 #i‚de‡
NO_FP


33 
	$StdDif·ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

35 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`dif·ime
((
time_t
)
P¨am
[0]->VÆ->
I¡egî
, Param[1]->Val->Integer);

36 
	}
}

39 
	$StdGmtime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

41 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gmtime
(
P¨am
[0]->Val->Pointer);

42 
	}
}

44 
	$StdGmtime_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

46 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gmtime_r
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

47 
	}
}

49 
	$StdLoˇ…ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

51 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`loˇ…ime
(
P¨am
[0]->Val->Pointer);

52 
	}
}

54 
	$StdMktime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

56 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`mktime
(
P¨am
[0]->VÆ->
Poöãr
);

57 
	}
}

59 
	$StdTime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

61 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`time
(
P¨am
[0]->VÆ->
Poöãr
);

62 
	}
}

64 
	$StdSå·ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

66 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°r·ime
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Pointer, Param[3]->Val->Pointer);

67 
	}
}

69 
	$StdSå±ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

71 *
	`°Ωtime
(c⁄° *
s
, c⁄° *
f‹m©
, 
tm
 *tm);

73 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°Ωtime
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

74 
	}
}

83 c⁄° 
	gStdTimeDefs
[] = "\
 intÅime_t; \
 int clock_t;\
";

89 
LibøryFun˘i⁄
 
	gStdTimeFun˘i⁄s
[] =

91 { 
StdAs˘ime
, "char *asctime(structÅm *);" },

92 { 
StdClock
, "time_t clock();" },

93 { 
StdCtime
, "char *ctime(int *);" },

94 #i‚de‡
NO_FP


95 { 
StdDif·ime
, "double difftime(int, int);" },

97 { 
StdGmtime
, "structÅm *gmtime(int *);" },

98 { 
StdGmtime_r
, "structÅm *gmtime_r(int *, structÅm *);" },

99 { 
StdLoˇ…ime
, "structÅm *localtime(int *);" },

100 { 
StdMktime
, "int mktime(structÅm *ptm);" },

101 { 
StdTime
, "intÅime(int *);" },

102 { 
StdSå·ime
, "int strftime(char *, int, char *, structÅm *);" },

103 { 
StdSå±ime
, "char *strptime(char *, char *, structÅm *);" },

104 { 
NULL
, NULL }

109 
	$StdTimeSëupFunc
()

112 
	`Ty≥Cª©eO∑queSåu˘
(
NULL
, 
	`TabÀSåRegi°î
("tm"), (
tm
));

115 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "CLOCKS_PER_SEC", &
I¡Ty≥
, (
AnyVÆue
 *)&
CLOCKS_PER_SECVÆue
, 
FALSE
);

116 #ifde‡
CLK_PER_SEC


117 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "CLK_PER_SEC", &
I¡Ty≥
, (
AnyVÆue
 *)&
CLK_PER_SECVÆue
, 
FALSE
);

119 #ifde‡
CLK_TCK


120 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "CLK_TCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
CLK_TCKVÆue
, 
FALSE
);

122 
	}
}

	@cstdlib/time.c

2 
	~<time.h
>

3 
	~"../öãΩªãr.h
"

5 #i‚de‡
BUILTIN_MINI_STDLIB


7 
	gCLOCKS_PER_SECVÆue
 = 
CLOCKS_PER_SEC
;

9 #ifde‡
CLK_PER_SEC


10 
	gCLK_PER_SECVÆue
 = 
CLK_PER_SEC
;

13 #ifde‡
CLK_TCK


14 
	gCLK_TCKVÆue
 = 
CLOCKS_PER_SEC
;

17 
	$StdAs˘ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

19 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`as˘ime
(
P¨am
[0]->Val->Pointer);

20 
	}
}

22 
	$StdClock
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

24 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`˛ock
();

25 
	}
}

27 
	$StdCtime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

29 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`˘ime
(
P¨am
[0]->Val->Pointer);

30 
	}
}

32 #i‚de‡
NO_FP


33 
	$StdDif·ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

35 
Rëu∫VÆue
->
VÆ
->
FP
 = 
	`dif·ime
((
time_t
)
P¨am
[0]->VÆ->
I¡egî
, Param[1]->Val->Integer);

36 
	}
}

39 
	$StdGmtime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

41 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gmtime
(
P¨am
[0]->Val->Pointer);

42 
	}
}

44 
	$StdGmtime_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

46 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gmtime_r
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer);

47 
	}
}

49 
	$StdLoˇ…ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

51 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`loˇ…ime
(
P¨am
[0]->Val->Pointer);

52 
	}
}

54 
	$StdMktime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

56 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`mktime
(
P¨am
[0]->VÆ->
Poöãr
);

57 
	}
}

59 
	$StdTime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

61 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`time
(
P¨am
[0]->VÆ->
Poöãr
);

62 
	}
}

64 
	$StdSå·ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

66 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`°r·ime
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Pointer, Param[3]->Val->Pointer);

67 
	}
}

69 
	$StdSå±ime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

71 *
	`°Ωtime
(c⁄° *
s
, c⁄° *
f‹m©
, 
tm
 *tm);

73 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`°Ωtime
(
P¨am
[0]->Val->Pointer, Param[1]->Val->Pointer, Param[2]->Val->Pointer);

74 
	}
}

83 c⁄° 
	gStdTimeDefs
[] = "\
 intÅime_t; \
 int clock_t;\
";

89 
LibøryFun˘i⁄
 
	gStdTimeFun˘i⁄s
[] =

91 { 
StdAs˘ime
, "char *asctime(structÅm *);" },

92 { 
StdClock
, "time_t clock();" },

93 { 
StdCtime
, "char *ctime(int *);" },

94 #i‚de‡
NO_FP


95 { 
StdDif·ime
, "double difftime(int, int);" },

97 { 
StdGmtime
, "structÅm *gmtime(int *);" },

98 { 
StdGmtime_r
, "structÅm *gmtime_r(int *, structÅm *);" },

99 { 
StdLoˇ…ime
, "structÅm *localtime(int *);" },

100 { 
StdMktime
, "int mktime(structÅm *ptm);" },

101 { 
StdTime
, "intÅime(int *);" },

102 { 
StdSå·ime
, "int strftime(char *, int, char *, structÅm *);" },

103 { 
StdSå±ime
, "char *strptime(char *, char *, structÅm *);" },

104 { 
NULL
, NULL }

109 
	$StdTimeSëupFunc
()

112 
	`Ty≥Cª©eO∑queSåu˘
(
NULL
, 
	`TabÀSåRegi°î
("tm"), (
tm
));

115 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "CLOCKS_PER_SEC", &
I¡Ty≥
, (
AnyVÆue
 *)&
CLOCKS_PER_SECVÆue
, 
FALSE
);

116 #ifde‡
CLK_PER_SEC


117 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "CLK_PER_SEC", &
I¡Ty≥
, (
AnyVÆue
 *)&
CLK_PER_SECVÆue
, 
FALSE
);

119 #ifde‡
CLK_TCK


120 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "CLK_TCK", &
I¡Ty≥
, (
AnyVÆue
 *)&
CLK_TCKVÆue
, 
FALSE
);

122 
	}
}

	@cstdlib/unistd.c

3 
	~"../öãΩªãr.h
"

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<uni°d.h
>

7 
	~<limôs.h
>

9 #i‚de‡
BUILTIN_MINI_STDLIB


11 
	gZîoVÆue
 = 0;

13 
	$Uni°dAc˚ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

15 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ac˚ss
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

16 
	}
}

18 
	$Uni°dAœrm
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

20 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`Æ¨m
(
P¨am
[0]->Val->Integer);

21 
	}
}

23 
	$Uni°dChdú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

25 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`chdú
(
P¨am
[0]->VÆ->
Poöãr
);

26 
	}
}

28 
	$Uni°dChroŸ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

30 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`chroŸ
(
P¨am
[0]->VÆ->
Poöãr
);

31 
	}
}

33 
	$Uni°dChown
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

35 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`chown
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer);

36 
	}
}

38 
	$Uni°dClo£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

40 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`˛o£
(
P¨am
[0]->Val->Integer);

41 
	}
}

43 
	$Uni°dC⁄f°r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

45 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`c⁄f°r
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

46 
	}
}

48 
	$Uni°dCãrmid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

50 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`˘îmid
(
P¨am
[0]->Val->Pointer);

51 
	}
}

54 
	$Uni°dCu£rid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

56 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`cu£rid
(
P¨am
[0]->Val->Pointer);

57 
	}
}

60 
	$Uni°dDup
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

62 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`dup
(
P¨am
[0]->Val->Integer);

63 
	}
}

65 
	$Uni°dDup2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

67 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`dup2
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

68 
	}
}

70 
	$Uni°d_Exô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

72 
	`_exô
(
P¨am
[0]->
VÆ
->
I¡egî
);

73 
	}
}

75 
	$Uni°dFchown
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

77 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fchown
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer, Param[2]->Val->Integer);

78 
	}
}

80 
	$Uni°dFchdú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

82 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fchdú
(
P¨am
[0]->Val->Integer);

83 
	}
}

85 
	$Uni°dFd©async
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

87 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fd©async
(
P¨am
[0]->Val->Integer);

88 
	}
}

90 
	$Uni°dF‹k
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

92 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`f‹k
();

93 
	}
}

95 
	$Uni°dF∑thc⁄f
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

97 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`Â©hc⁄f
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

98 
	}
}

100 
	$Uni°dFsync
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

102 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fsync
(
P¨am
[0]->Val->Integer);

103 
	}
}

105 
	$Uni°dFåunˇã
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

107 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`·runˇã
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

108 
	}
}

110 
	$Uni°dGëcwd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

112 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëcwd
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

113 
	}
}

115 
	$Uni°dGëdèbÀsize
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

117 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëdèbÀsize
();

118 
	}
}

120 
	$Uni°dGëegid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

122 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëegid
();

123 
	}
}

125 
	$Uni°dGëeuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

127 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëeuid
();

128 
	}
}

130 
	$Uni°dGëgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

132 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëgid
();

133 
	}
}

135 
	$Uni°dGëho°id
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

137 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëho°id
();

138 
	}
}

140 
	$Uni°dGëlogö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

142 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëlogö
();

143 
	}
}

145 
	$Uni°dGëlogö_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

147 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëlogö_r
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

148 
	}
}

150 
	$Uni°dGë∑gesize
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

152 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gë∑gesize
();

153 
	}
}

155 
	$Uni°dGë∑ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

157 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gë∑ss
(
P¨am
[0]->Val->Pointer);

158 
	}
}

161 
	$Uni°dGëpgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

163 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëpgid
(
P¨am
[0]->Val->Integer);

164 
	}
}

167 
	$Uni°dGëpgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

169 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëpgΩ
();

170 
	}
}

172 
	$Uni°dGëpid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

174 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëpid
();

175 
	}
}

177 
	$Uni°dGëµid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

179 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëµid
();

180 
	}
}

183 
	$Uni°dGësid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

185 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gësid
(
P¨am
[0]->Val->Integer);

186 
	}
}

189 
	$Uni°dGëuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

191 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëuid
();

192 
	}
}

194 
	$Uni°dGëwd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

196 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëcwd
(
P¨am
[0]->VÆ->Poöãr, 
PATH_MAX
);

197 
	}
}

199 
	$Uni°dIßây
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

201 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ißây
(
P¨am
[0]->Val->Integer);

202 
	}
}

204 
	$Uni°dLchown
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

206 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`lchown
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer);

207 
	}
}

209 
	$Uni°dLök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

211 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`lök
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

212 
	}
}

214 
	$Uni°dLockf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

216 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`lockf
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer, Param[2]->Val->Integer);

217 
	}
}

219 
	$Uni°dL£ek
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

221 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`l£ek
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer, Param[2]->Val->Integer);

222 
	}
}

224 
	$Uni°dNi˚
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

226 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ni˚
(
P¨am
[0]->Val->Integer);

227 
	}
}

229 
	$Uni°dP©hc⁄f
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

231 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`∑thc⁄f
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

232 
	}
}

234 
	$Uni°dPau£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

236 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`∑u£
();

237 
	}
}

240 
	$Uni°dPªad
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

242 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`¥ód
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer, Param[3]->Val->Integer);

243 
	}
}

245 
	$Uni°dPwrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

247 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`pwrôe
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer, Param[3]->Val->Integer);

248 
	}
}

251 
	$Uni°dRód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

253 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ªad
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

254 
	}
}

256 
	$Uni°dRódlök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

258 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ªadlök
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

259 
	}
}

261 
	$Uni°dRmdú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

263 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`rmdú
(
P¨am
[0]->VÆ->
Poöãr
);

264 
	}
}

266 
	$Uni°dSbrk
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

268 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`sbrk
(
P¨am
[0]->VÆ->
I¡egî
);

269 
	}
}

271 
	$Uni°dSëgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

273 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£tgid
(
P¨am
[0]->Val->Integer);

274 
	}
}

276 
	$Uni°dSëpgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

278 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£çgid
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

279 
	}
}

281 
	$Uni°dSëpgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

283 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£çgΩ
();

284 
	}
}

286 
	$Uni°dSëªgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

288 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£åegid
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

289 
	}
}

291 
	$Uni°dSëªuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

293 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£åeuid
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

294 
	}
}

296 
	$Uni°dSësid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

298 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£tsid
();

299 
	}
}

301 
	$Uni°dSëuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

303 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£tuid
(
P¨am
[0]->Val->Integer);

304 
	}
}

306 
	$Uni°dSÀï
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

308 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`¶ìp
(
P¨am
[0]->Val->Integer);

309 
	}
}

312 
	$Uni°dSwab
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

314 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`swab
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

315 
	}
}

318 
	$Uni°dSymlök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

320 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`symlök
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

321 
	}
}

323 
	$Uni°dSync
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

325 
	`sync
();

326 
	}
}

328 
	$Uni°dSysc⁄f
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

330 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sysc⁄f
(
P¨am
[0]->Val->Integer);

331 
	}
}

333 
	$Uni°dTcgëpgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

335 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tcgëpgΩ
(
P¨am
[0]->Val->Integer);

336 
	}
}

338 
	$Uni°dTc£çgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

340 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tc£çgΩ
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

341 
	}
}

343 
	$Uni°dTrunˇã
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

345 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`åunˇã
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

346 
	}
}

348 
	$Uni°dTty«me
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

350 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ây«me
(
P¨am
[0]->VÆ->
I¡egî
);

351 
	}
}

353 
	$Uni°dTty«me_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

355 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ây«me_r
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

356 
	}
}

358 
	$Uni°dUÆ¨m
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

360 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`uÆ¨m
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

361 
	}
}

363 
	$Uni°dU∆ök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

365 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u∆ök
(
P¨am
[0]->VÆ->
Poöãr
);

366 
	}
}

368 
	$Uni°dU¶ìp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

370 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u¶ìp
(
P¨am
[0]->Val->Integer);

371 
	}
}

373 
	$Uni°dVf‹k
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

375 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`vf‹k
();

376 
	}
}

378 
	$Uni°dWrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

380 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`wrôe
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

381 
	}
}

385 c⁄° 
	gUni°dDefs
[] = "\
 int uid_t; \
 int gid_t; \
 intÖid_t; \
 int off_t; \
 int size_t; \
 int ssize_t; \
 int useconds_t;\
 int intptr_t;\
";

397 
LibøryFun˘i⁄
 
	gUni°dFun˘i⁄s
[] =

399 { 
Uni°dAc˚ss
, "intáccess(char *, int);" },

400 { 
Uni°dAœrm
, "unsigned intálarm(unsigned int);" },

402 { 
Uni°dChdú
, "int chdir(char *);" },

403 { 
Uni°dChroŸ
, "int chroot(char *);" },

404 { 
Uni°dChown
, "int chown(char *, uid_t, gid_t);" },

405 { 
Uni°dClo£
, "int close(int);" },

406 { 
Uni°dC⁄f°r
, "size_t confstr(int, char *, size_t);" },

409 { 
Uni°dDup
, "int dup(int);" },

410 { 
Uni°dDup2
, "int dup2(int, int);" },

418 { 
Uni°d_Exô
, "void _exit(int);" },

419 { 
Uni°dFchown
, "int fchown(int, uid_t, gid_t);" },

420 { 
Uni°dFchdú
, "int fchdir(int);" },

421 { 
Uni°dFd©async
, "int fdatasync(int);" },

422 { 
Uni°dF‹k
, "pid_t fork(void);" },

423 { 
Uni°dF∑thc⁄f
, "long fpathconf(int, int);" },

424 { 
Uni°dFsync
, "int fsync(int);" },

425 { 
Uni°dFåunˇã
, "int ftruncate(int, off_t);" },

426 { 
Uni°dGëcwd
, "char *getcwd(char *, size_t);" },

427 { 
Uni°dGëdèbÀsize
, "int getdtablesize(void);" },

428 { 
Uni°dGëegid
, "gid_t getegid(void);" },

429 { 
Uni°dGëeuid
, "uid_t geteuid(void);" },

430 { 
Uni°dGëgid
, "gid_t getgid(void);" },

432 { 
Uni°dGëho°id
, "long gethostid(void);" },

433 { 
Uni°dGëlogö
, "char *getlogin(void);" },

434 { 
Uni°dGëlogö_r
, "int getlogin_r(char *, size_t);" },

436 { 
Uni°dGë∑gesize
, "int getpagesize(void);" },

437 { 
Uni°dGë∑ss
, "char *getpass(char *);" },

439 { 
Uni°dGëpgΩ
, "pid_t getpgrp(void);" },

440 { 
Uni°dGëpid
, "pid_t getpid(void);" },

441 { 
Uni°dGëµid
, "pid_t getppid(void);" },

443 { 
Uni°dGëuid
, "uid_t getuid(void);" },

444 { 
Uni°dGëwd
, "char *getwd(char *);" },

445 { 
Uni°dIßây
, "int isatty(int);" },

446 { 
Uni°dLchown
, "intÜchown(char *, uid_t, gid_t);" },

447 { 
Uni°dLök
, "intÜink(char *, char *);" },

448 { 
Uni°dLockf
, "intÜockf(int, int, off_t);" },

449 { 
Uni°dL£ek
, "off_tÜseek(int, off_t, int);" },

450 { 
Uni°dNi˚
, "intÇice(int);" },

451 { 
Uni°dP©hc⁄f
, "longÖathconf(char *, int);" },

452 { 
Uni°dPau£
, "intÖause(void);" },

457 { 
Uni°dRód
, "ssize_tÑead(int, void *, size_t);" },

458 { 
Uni°dRódlök
, "intÑeadlink(char *, char *, size_t);" },

459 { 
Uni°dRmdú
, "intÑmdir(char *);" },

460 { 
Uni°dSbrk
, "void *sbrk(intptr_t);" },

461 { 
Uni°dSëgid
, "int setgid(gid_t);" },

462 { 
Uni°dSëpgid
, "int setpgid(pid_t,Öid_t);" },

463 { 
Uni°dSëpgΩ
, "pid_t setpgrp(void);" },

464 { 
Uni°dSëªgid
, "int setregid(gid_t, gid_t);" },

465 { 
Uni°dSëªuid
, "int setreuid(uid_t, uid_t);" },

466 { 
Uni°dSësid
, "pid_t setsid(void);" },

467 { 
Uni°dSëuid
, "int setuid(uid_t);" },

468 { 
Uni°dSÀï
, "unsigned int sleep(unsigned int);" },

470 { 
Uni°dSymlök
, "int symlink(char *, char *);" },

471 { 
Uni°dSync
, "void sync(void);" },

472 { 
Uni°dSysc⁄f
, "long sysconf(int);" },

473 { 
Uni°dTcgëpgΩ
, "pid_tÅcgetpgrp(int);" },

474 { 
Uni°dTc£çgΩ
, "intÅcsetpgrp(int,Öid_t);" },

475 { 
Uni°dTrunˇã
, "intÅruncate(char *, off_t);" },

476 { 
Uni°dTty«me
, "char *ttyname(int);" },

477 { 
Uni°dTty«me_r
, "intÅtyname_r(int, char *, size_t);" },

478 { 
Uni°dUÆ¨m
, "useconds_t ualarm(useconds_t, useconds_t);" },

479 { 
Uni°dU∆ök
, "int unlink(char *);" },

480 { 
Uni°dU¶ìp
, "int usleep(useconds_t);" },

481 { 
Uni°dVf‹k
, "pid_t vfork(void);" },

482 { 
Uni°dWrôe
, "ssize_t write(int, void *, size_t);" },

483 { 
NULL
, NULL }

487 
	$Uni°dSëupFunc
()

490 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

491 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

494 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›èrg", 
Ch¨PåTy≥
, (
AnyVÆue
 *)&
›èrg
, 
TRUE
);

495 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›töd", &
I¡Ty≥
, (
AnyVÆue
 *)&
›töd
, 
TRUE
);

496 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›ãº", &
I¡Ty≥
, (
AnyVÆue
 *)&
›ãº
, 
TRUE
);

497 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›t›t", &
I¡Ty≥
, (
AnyVÆue
 *)&
›t›t
, 
TRUE
);

498 
	}
}

	@cstdlib/unistd.c

3 
	~"../öãΩªãr.h
"

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<uni°d.h
>

7 
	~<limôs.h
>

9 #i‚de‡
BUILTIN_MINI_STDLIB


11 
	gZîoVÆue
 = 0;

13 
	$Uni°dAc˚ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

15 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ac˚ss
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

16 
	}
}

18 
	$Uni°dAœrm
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

20 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`Æ¨m
(
P¨am
[0]->Val->Integer);

21 
	}
}

23 
	$Uni°dChdú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

25 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`chdú
(
P¨am
[0]->VÆ->
Poöãr
);

26 
	}
}

28 
	$Uni°dChroŸ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

30 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`chroŸ
(
P¨am
[0]->VÆ->
Poöãr
);

31 
	}
}

33 
	$Uni°dChown
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

35 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`chown
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer);

36 
	}
}

38 
	$Uni°dClo£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

40 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`˛o£
(
P¨am
[0]->Val->Integer);

41 
	}
}

43 
	$Uni°dC⁄f°r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

45 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`c⁄f°r
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

46 
	}
}

48 
	$Uni°dCãrmid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

50 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`˘îmid
(
P¨am
[0]->Val->Pointer);

51 
	}
}

54 
	$Uni°dCu£rid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

56 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`cu£rid
(
P¨am
[0]->Val->Pointer);

57 
	}
}

60 
	$Uni°dDup
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

62 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`dup
(
P¨am
[0]->Val->Integer);

63 
	}
}

65 
	$Uni°dDup2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

67 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`dup2
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

68 
	}
}

70 
	$Uni°d_Exô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

72 
	`_exô
(
P¨am
[0]->
VÆ
->
I¡egî
);

73 
	}
}

75 
	$Uni°dFchown
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

77 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fchown
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer, Param[2]->Val->Integer);

78 
	}
}

80 
	$Uni°dFchdú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

82 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fchdú
(
P¨am
[0]->Val->Integer);

83 
	}
}

85 
	$Uni°dFd©async
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

87 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fd©async
(
P¨am
[0]->Val->Integer);

88 
	}
}

90 
	$Uni°dF‹k
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

92 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`f‹k
();

93 
	}
}

95 
	$Uni°dF∑thc⁄f
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

97 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`Â©hc⁄f
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

98 
	}
}

100 
	$Uni°dFsync
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

102 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`fsync
(
P¨am
[0]->Val->Integer);

103 
	}
}

105 
	$Uni°dFåunˇã
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

107 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`·runˇã
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

108 
	}
}

110 
	$Uni°dGëcwd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

112 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëcwd
(
P¨am
[0]->VÆ->Poöãr, P¨am[1]->VÆ->
I¡egî
);

113 
	}
}

115 
	$Uni°dGëdèbÀsize
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

117 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëdèbÀsize
();

118 
	}
}

120 
	$Uni°dGëegid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

122 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëegid
();

123 
	}
}

125 
	$Uni°dGëeuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

127 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëeuid
();

128 
	}
}

130 
	$Uni°dGëgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

132 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëgid
();

133 
	}
}

135 
	$Uni°dGëho°id
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

137 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëho°id
();

138 
	}
}

140 
	$Uni°dGëlogö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

142 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëlogö
();

143 
	}
}

145 
	$Uni°dGëlogö_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

147 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëlogö_r
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

148 
	}
}

150 
	$Uni°dGë∑gesize
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

152 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gë∑gesize
();

153 
	}
}

155 
	$Uni°dGë∑ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

157 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gë∑ss
(
P¨am
[0]->Val->Pointer);

158 
	}
}

161 
	$Uni°dGëpgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

163 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëpgid
(
P¨am
[0]->Val->Integer);

164 
	}
}

167 
	$Uni°dGëpgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

169 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëpgΩ
();

170 
	}
}

172 
	$Uni°dGëpid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

174 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëpid
();

175 
	}
}

177 
	$Uni°dGëµid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

179 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëµid
();

180 
	}
}

183 
	$Uni°dGësid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

185 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gësid
(
P¨am
[0]->Val->Integer);

186 
	}
}

189 
	$Uni°dGëuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

191 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëuid
();

192 
	}
}

194 
	$Uni°dGëwd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

196 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`gëcwd
(
P¨am
[0]->VÆ->Poöãr, 
PATH_MAX
);

197 
	}
}

199 
	$Uni°dIßây
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

201 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ißây
(
P¨am
[0]->Val->Integer);

202 
	}
}

204 
	$Uni°dLchown
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

206 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`lchown
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer, Param[2]->Val->Integer);

207 
	}
}

209 
	$Uni°dLök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

211 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`lök
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

212 
	}
}

214 
	$Uni°dLockf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

216 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`lockf
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer, Param[2]->Val->Integer);

217 
	}
}

219 
	$Uni°dL£ek
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

221 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`l£ek
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer, Param[2]->Val->Integer);

222 
	}
}

224 
	$Uni°dNi˚
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

226 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ni˚
(
P¨am
[0]->Val->Integer);

227 
	}
}

229 
	$Uni°dP©hc⁄f
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

231 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`∑thc⁄f
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

232 
	}
}

234 
	$Uni°dPau£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

236 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`∑u£
();

237 
	}
}

240 
	$Uni°dPªad
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

242 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`¥ód
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer, Param[3]->Val->Integer);

243 
	}
}

245 
	$Uni°dPwrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

247 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`pwrôe
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer, Param[3]->Val->Integer);

248 
	}
}

251 
	$Uni°dRód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

253 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ªad
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

254 
	}
}

256 
	$Uni°dRódlök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

258 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ªadlök
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

259 
	}
}

261 
	$Uni°dRmdú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

263 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`rmdú
(
P¨am
[0]->VÆ->
Poöãr
);

264 
	}
}

266 
	$Uni°dSbrk
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

268 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`sbrk
(
P¨am
[0]->VÆ->
I¡egî
);

269 
	}
}

271 
	$Uni°dSëgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

273 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£tgid
(
P¨am
[0]->Val->Integer);

274 
	}
}

276 
	$Uni°dSëpgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

278 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£çgid
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

279 
	}
}

281 
	$Uni°dSëpgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

283 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£çgΩ
();

284 
	}
}

286 
	$Uni°dSëªgid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

288 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£åegid
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

289 
	}
}

291 
	$Uni°dSëªuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

293 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£åeuid
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

294 
	}
}

296 
	$Uni°dSësid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

298 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£tsid
();

299 
	}
}

301 
	$Uni°dSëuid
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

303 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`£tuid
(
P¨am
[0]->Val->Integer);

304 
	}
}

306 
	$Uni°dSÀï
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

308 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`¶ìp
(
P¨am
[0]->Val->Integer);

309 
	}
}

312 
	$Uni°dSwab
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

314 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`swab
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer, Param[2]->Val->Integer);

315 
	}
}

318 
	$Uni°dSymlök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

320 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`symlök
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Pointer);

321 
	}
}

323 
	$Uni°dSync
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

325 
	`sync
();

326 
	}
}

328 
	$Uni°dSysc⁄f
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

330 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sysc⁄f
(
P¨am
[0]->Val->Integer);

331 
	}
}

333 
	$Uni°dTcgëpgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

335 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tcgëpgΩ
(
P¨am
[0]->Val->Integer);

336 
	}
}

338 
	$Uni°dTc£çgΩ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

340 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tc£çgΩ
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

341 
	}
}

343 
	$Uni°dTrunˇã
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

345 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`åunˇã
(
P¨am
[0]->VÆ->
Poöãr
, Param[1]->Val->Integer);

346 
	}
}

348 
	$Uni°dTty«me
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

350 
Rëu∫VÆue
->
VÆ
->
Poöãr
 = 
	`ây«me
(
P¨am
[0]->VÆ->
I¡egî
);

351 
	}
}

353 
	$Uni°dTty«me_r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

355 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ây«me_r
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

356 
	}
}

358 
	$Uni°dUÆ¨m
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

360 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`uÆ¨m
(
P¨am
[0]->Val->Integer, Param[1]->Val->Integer);

361 
	}
}

363 
	$Uni°dU∆ök
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

365 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u∆ök
(
P¨am
[0]->VÆ->
Poöãr
);

366 
	}
}

368 
	$Uni°dU¶ìp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

370 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u¶ìp
(
P¨am
[0]->Val->Integer);

371 
	}
}

373 
	$Uni°dVf‹k
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

375 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`vf‹k
();

376 
	}
}

378 
	$Uni°dWrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

380 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`wrôe
(
P¨am
[0]->VÆ->I¡egî, P¨am[1]->VÆ->
Poöãr
, Param[2]->Val->Integer);

381 
	}
}

385 c⁄° 
	gUni°dDefs
[] = "\
 int uid_t; \
 int gid_t; \
 intÖid_t; \
 int off_t; \
 int size_t; \
 int ssize_t; \
 int useconds_t;\
 int intptr_t;\
";

397 
LibøryFun˘i⁄
 
	gUni°dFun˘i⁄s
[] =

399 { 
Uni°dAc˚ss
, "intáccess(char *, int);" },

400 { 
Uni°dAœrm
, "unsigned intálarm(unsigned int);" },

402 { 
Uni°dChdú
, "int chdir(char *);" },

403 { 
Uni°dChroŸ
, "int chroot(char *);" },

404 { 
Uni°dChown
, "int chown(char *, uid_t, gid_t);" },

405 { 
Uni°dClo£
, "int close(int);" },

406 { 
Uni°dC⁄f°r
, "size_t confstr(int, char *, size_t);" },

409 { 
Uni°dDup
, "int dup(int);" },

410 { 
Uni°dDup2
, "int dup2(int, int);" },

418 { 
Uni°d_Exô
, "void _exit(int);" },

419 { 
Uni°dFchown
, "int fchown(int, uid_t, gid_t);" },

420 { 
Uni°dFchdú
, "int fchdir(int);" },

421 { 
Uni°dFd©async
, "int fdatasync(int);" },

422 { 
Uni°dF‹k
, "pid_t fork(void);" },

423 { 
Uni°dF∑thc⁄f
, "long fpathconf(int, int);" },

424 { 
Uni°dFsync
, "int fsync(int);" },

425 { 
Uni°dFåunˇã
, "int ftruncate(int, off_t);" },

426 { 
Uni°dGëcwd
, "char *getcwd(char *, size_t);" },

427 { 
Uni°dGëdèbÀsize
, "int getdtablesize(void);" },

428 { 
Uni°dGëegid
, "gid_t getegid(void);" },

429 { 
Uni°dGëeuid
, "uid_t geteuid(void);" },

430 { 
Uni°dGëgid
, "gid_t getgid(void);" },

432 { 
Uni°dGëho°id
, "long gethostid(void);" },

433 { 
Uni°dGëlogö
, "char *getlogin(void);" },

434 { 
Uni°dGëlogö_r
, "int getlogin_r(char *, size_t);" },

436 { 
Uni°dGë∑gesize
, "int getpagesize(void);" },

437 { 
Uni°dGë∑ss
, "char *getpass(char *);" },

439 { 
Uni°dGëpgΩ
, "pid_t getpgrp(void);" },

440 { 
Uni°dGëpid
, "pid_t getpid(void);" },

441 { 
Uni°dGëµid
, "pid_t getppid(void);" },

443 { 
Uni°dGëuid
, "uid_t getuid(void);" },

444 { 
Uni°dGëwd
, "char *getwd(char *);" },

445 { 
Uni°dIßây
, "int isatty(int);" },

446 { 
Uni°dLchown
, "intÜchown(char *, uid_t, gid_t);" },

447 { 
Uni°dLök
, "intÜink(char *, char *);" },

448 { 
Uni°dLockf
, "intÜockf(int, int, off_t);" },

449 { 
Uni°dL£ek
, "off_tÜseek(int, off_t, int);" },

450 { 
Uni°dNi˚
, "intÇice(int);" },

451 { 
Uni°dP©hc⁄f
, "longÖathconf(char *, int);" },

452 { 
Uni°dPau£
, "intÖause(void);" },

457 { 
Uni°dRód
, "ssize_tÑead(int, void *, size_t);" },

458 { 
Uni°dRódlök
, "intÑeadlink(char *, char *, size_t);" },

459 { 
Uni°dRmdú
, "intÑmdir(char *);" },

460 { 
Uni°dSbrk
, "void *sbrk(intptr_t);" },

461 { 
Uni°dSëgid
, "int setgid(gid_t);" },

462 { 
Uni°dSëpgid
, "int setpgid(pid_t,Öid_t);" },

463 { 
Uni°dSëpgΩ
, "pid_t setpgrp(void);" },

464 { 
Uni°dSëªgid
, "int setregid(gid_t, gid_t);" },

465 { 
Uni°dSëªuid
, "int setreuid(uid_t, uid_t);" },

466 { 
Uni°dSësid
, "pid_t setsid(void);" },

467 { 
Uni°dSëuid
, "int setuid(uid_t);" },

468 { 
Uni°dSÀï
, "unsigned int sleep(unsigned int);" },

470 { 
Uni°dSymlök
, "int symlink(char *, char *);" },

471 { 
Uni°dSync
, "void sync(void);" },

472 { 
Uni°dSysc⁄f
, "long sysconf(int);" },

473 { 
Uni°dTcgëpgΩ
, "pid_tÅcgetpgrp(int);" },

474 { 
Uni°dTc£çgΩ
, "intÅcsetpgrp(int,Öid_t);" },

475 { 
Uni°dTrunˇã
, "intÅruncate(char *, off_t);" },

476 { 
Uni°dTty«me
, "char *ttyname(int);" },

477 { 
Uni°dTty«me_r
, "intÅtyname_r(int, char *, size_t);" },

478 { 
Uni°dUÆ¨m
, "useconds_t ualarm(useconds_t, useconds_t);" },

479 { 
Uni°dU∆ök
, "int unlink(char *);" },

480 { 
Uni°dU¶ìp
, "int usleep(useconds_t);" },

481 { 
Uni°dVf‹k
, "pid_t vfork(void);" },

482 { 
Uni°dWrôe
, "ssize_t write(int, void *, size_t);" },

483 { 
NULL
, NULL }

487 
	$Uni°dSëupFunc
()

490 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("NULL")))

491 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "NULL", &
I¡Ty≥
, (
AnyVÆue
 *)&
ZîoVÆue
, 
FALSE
);

494 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›èrg", 
Ch¨PåTy≥
, (
AnyVÆue
 *)&
›èrg
, 
TRUE
);

495 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›töd", &
I¡Ty≥
, (
AnyVÆue
 *)&
›töd
, 
TRUE
);

496 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›ãº", &
I¡Ty≥
, (
AnyVÆue
 *)&
›ãº
, 
TRUE
);

497 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "›t›t", &
I¡Ty≥
, (
AnyVÆue
 *)&
›t›t
, 
TRUE
);

498 
	}
}

	@expression.c

1 
	~"öãΩªãr.h
"

5 
	#IS_LEFT_TO_RIGHT
(
p
Ë(’Ë!2 && (pË!14)

	)

6 
	#BRACKET_PRECEDENCE
 20

	)

7 
	#IS_TYPE_TOKEN
(
t
Ë(—Ë>
TokíI¡Ty≥
 && (tË<
TokíUnsig√dTy≥
)

	)

9 
	#DEEP_PRECEDENCE
 (
BRACKET_PRECEDENCE
*1000)

	)

11 #ifde‡
DEBUG_EXPRESSIONS


12 
	#debugf
 
¥ötf


	)

14 
	$debugf
(*
F‹m©
, ...)

16 
	}
}

20 
	eO≥øt‹Ordî


22 
	mOrdîN⁄e
,

23 
	mOrdîPªfix
,

24 
	mOrdîInfix
,

25 
	mOrdîPo°fix


29 
	sEx¥essi⁄Sèck


31 
Ex¥essi⁄Sèck
 *
	mNext
;

32 
VÆue
 *
	mVÆ
;

33 
LexTokí
 
	mOp
;

34 
	mPª˚dí˚
;

35 
	mOrdî
;

39 
	sOpPª˚dí˚


41 
	mPªfixPª˚dí˚
:4;

42 
	mPo°fixPª˚dí˚
:4;

43 
	mInfixPª˚dí˚
:4;

44 *
	mName
;

48 
OpPª˚dí˚
 
	gO≥øt‹Pª˚dí˚
[] =

72 
Ex¥essi⁄P¨£Fun˘i⁄CÆl
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, c⁄° *
FuncName
, 
RunIt
);

74 #ifde‡
DEBUG_EXPRESSIONS


76 
	$Ex¥essi⁄SèckShow
(
Ex¥essi⁄Sèck
 *
SèckT›
)

78 
	`¥ötf
("Ex¥essi⁄ sèck [0x%lx,0x%lx]: ", ()
HópSèckT›
, ()
SèckT›
);

80 
SèckT›
 !
NULL
)

82 i‡(
SèckT›
->
Ordî
 =
OrdîN⁄e
)

85 i‡(
SèckT›
->
VÆ
->
IsLVÆue
)

86 
	`¥ötf
("lvalue=");

88 
	`¥ötf
("value=");

90 
SèckT›
->
VÆ
->
Typ
->
Ba£
)

92 
Ty≥Void
: 
	`¥ötf
("void"); ;

93 
Ty≥I¡
: 
	`¥ötf
("%d:öt", 
SèckT›
->
VÆ
->VÆ->
I¡egî
); ;

94 
Ty≥Sh‹t
: 
	`¥ötf
("%d:sh‹t", 
SèckT›
->
VÆ
->VÆ->
Sh‹tI¡egî
); ;

95 
Ty≥Ch¨
: 
	`¥ötf
("%d:ch¨", 
SèckT›
->
VÆ
->VÆ->
Ch¨a˘î
); ;

96 
Ty≥L⁄g
: 
	`¥ötf
("%d:l⁄g", 
SèckT›
->
VÆ
->VÆ->
L⁄gI¡egî
); ;

97 
Ty≥Unsig√dSh‹t
: 
	`¥ötf
("%d:unsig√d sh‹t", 
SèckT›
->
VÆ
->VÆ->
Unsig√dSh‹tI¡egî
); ;

98 
Ty≥Unsig√dI¡
: 
	`¥ötf
("%d:unsig√d i¡", 
SèckT›
->
VÆ
->VÆ->
Unsig√dI¡egî
); ;

99 
Ty≥Unsig√dL⁄g
: 
	`¥ötf
("%d:unsig√dÜ⁄g", 
SèckT›
->
VÆ
->VÆ->
Unsig√dL⁄gI¡egî
); ;

100 
Ty≥FP
: 
	`¥ötf
("%f:Â", 
SèckT›
->
VÆ
->VÆ->
FP
); ;

101 
Ty≥Fun˘i⁄
: 
	`¥ötf
("%s:fun˘i⁄", 
SèckT›
->
VÆ
->VÆ->
Idítifõr
); ;

102 
Ty≥Ma¸o
: 
	`¥ötf
("%s:ma¸o", 
SèckT›
->
VÆ
->VÆ->
Idítifõr
); ;

103 
Ty≥Poöãr
:

104 i‡(
SèckT›
->
VÆ
->VÆ->
Poöãr
 =
NULL
)

105 
	`¥ötf
("ptr(NULL)");

106 i‡(
SèckT›
->
VÆ
->
Typ
->
FromTy≥
->
Ba£
 =
Ty≥Ch¨
)

107 
	`¥ötf
("\"%s\":°rög", (*)
SèckT›
->
VÆ
->VÆ->
Poöãr
);

109 
	`¥ötf
("±r(0x%lx)", ()
SèckT›
->
VÆ
->VÆ->
Poöãr
);

111 
Ty≥Aºay
: 
	`¥ötf
("array"); ;

112 
Ty≥Såu˘
: 
	`¥ötf
("%s:°ru˘", 
SèckT›
->
VÆ
->VÆ->
Idítifõr
); ;

113 
Ty≥Uni⁄
: 
	`¥ötf
("%s:uni⁄", 
SèckT›
->
VÆ
->VÆ->
Idítifõr
); ;

114 
Ty≥Enum
: 
	`¥ötf
("%s:íum", 
SèckT›
->
VÆ
->VÆ->
Idítifõr
); ;

115 
Ty≥_Ty≥
: 
	`PrötTy≥
(
SèckT›
->
VÆ
->VÆ->
Typ
, 
CStdOut
); 
	`¥ötf
(":type"); ;

116 : 
	`¥ötf
("unknown"); ;

118 
	`¥ötf
("[0x%lx,0x%lx]", ()
SèckT›
, ()SèckT›->
VÆ
);

123 
	`¥ötf
("›='%s' %†%d", 
O≥øt‹Pª˚dí˚
[()
SèckT›
->
Op
].
Name
,

124 (
SèckT›
->
Ordî
 =
OrdîPªfix
Ë? "¥efix" : ((SèckT›->Ordî =
OrdîPo°fix
) ? "postfix" : "infix"),

125 
SèckT›
->
Pª˚dí˚
);

126 
	`¥ötf
("[0x%lx]", ()
SèckT›
);

129 
SèckT›
 = SèckT›->
Next
;

130 i‡(
SèckT›
 !
NULL
)

131 
	`¥ötf
(", ");

134 
	`¥ötf
("\n");

135 
	}
}

138 
	$Ex¥essi⁄C€r˚I¡egî
(
VÆue
 *
VÆ
)

140 
VÆ
->
Typ
->
Ba£
)

142 
Ty≥I¡
:  ()
VÆ
->VÆ->
I¡egî
;

143 
Ty≥Ch¨
:  ()
VÆ
->VÆ->
Ch¨a˘î
;

144 
Ty≥Sh‹t
:  ()
VÆ
->VÆ->
Sh‹tI¡egî
;

145 
Ty≥L⁄g
:  ()
VÆ
->VÆ->
L⁄gI¡egî
;

146 
Ty≥Unsig√dI¡
:  ()
VÆ
->VÆ->
Unsig√dI¡egî
;

147 
Ty≥Unsig√dSh‹t
:  ()
VÆ
->VÆ->
Unsig√dSh‹tI¡egî
;

148 
Ty≥Unsig√dL⁄g
:  ()
VÆ
->VÆ->
Unsig√dL⁄gI¡egî
;

149 
Ty≥Poöãr
:  ()
VÆ
->VÆ->
Poöãr
;

150 #i‚de‡
NO_FP


151 
Ty≥FP
:  ()
VÆ
->VÆ->
FP
;

155 
	}
}

157 
	$Ex¥essi⁄C€r˚Unsig√dI¡egî
(
VÆue
 *
VÆ
)

159 
VÆ
->
Typ
->
Ba£
)

161 
Ty≥I¡
:  ()
VÆ
->VÆ->
I¡egî
;

162 
Ty≥Ch¨
:  ()
VÆ
->VÆ->
Ch¨a˘î
;

163 
Ty≥Sh‹t
:  ()
VÆ
->VÆ->
Sh‹tI¡egî
;

164 
Ty≥L⁄g
:  ()
VÆ
->VÆ->
L⁄gI¡egî
;

165 
Ty≥Unsig√dI¡
:  ()
VÆ
->VÆ->
Unsig√dI¡egî
;

166 
Ty≥Unsig√dSh‹t
:  ()
VÆ
->VÆ->
Unsig√dSh‹tI¡egî
;

167 
Ty≥Unsig√dL⁄g
:  ()
VÆ
->VÆ->
Unsig√dL⁄gI¡egî
;

168 
Ty≥Poöãr
:  ()
VÆ
->VÆ->
Poöãr
;

169 #i‚de‡
NO_FP


170 
Ty≥FP
:  ()
VÆ
->VÆ->
FP
;

174 
	}
}

176 #i‚de‡
NO_FP


177 
	$Ex¥essi⁄C€r˚FP
(
VÆue
 *
VÆ
)

179 #i‚de‡
BROKEN_FLOAT_CASTS


180 
I¡VÆ
;

181 
Unsig√dVÆ
;

183 
VÆ
->
Typ
->
Ba£
)

185 
Ty≥I¡
: 
I¡VÆ
 = 
VÆ
->VÆ->
I¡egî
;  ()IntVal;

186 
Ty≥Ch¨
: 
I¡VÆ
 = 
VÆ
->VÆ->
Ch¨a˘î
;  ()IntVal;

187 
Ty≥Sh‹t
: 
I¡VÆ
 = 
VÆ
->VÆ->
Sh‹tI¡egî
;  ()IntVal;

188 
Ty≥L⁄g
: 
I¡VÆ
 = 
VÆ
->VÆ->
L⁄gI¡egî
;  ()IntVal;

189 
Ty≥Unsig√dI¡
: 
Unsig√dVÆ
 = 
VÆ
->VÆ->
Unsig√dI¡egî
;  ()UnsignedVal;

190 
Ty≥Unsig√dSh‹t
: 
Unsig√dVÆ
 = 
VÆ
->VÆ->
Unsig√dSh‹tI¡egî
;  ()UnsignedVal;

191 
Ty≥Unsig√dL⁄g
: 
Unsig√dVÆ
 = 
VÆ
->VÆ->
Unsig√dL⁄gI¡egî
;  ()UnsignedVal;

192 
Ty≥FP
:  
VÆ
->VÆ->
FP
;

196 
VÆ
->
Typ
->
Ba£
)

198 
Ty≥I¡
:  ()
VÆ
->VÆ->
I¡egî
;

199 
Ty≥Ch¨
:  ()
VÆ
->VÆ->
Ch¨a˘î
;

200 
Ty≥Sh‹t
:  ()
VÆ
->VÆ->
Sh‹tI¡egî
;

201 
Ty≥L⁄g
:  ()
VÆ
->VÆ->
L⁄gI¡egî
;

202 
Ty≥Unsig√dI¡
:  ()
VÆ
->VÆ->
Unsig√dI¡egî
;

203 
Ty≥Unsig√dSh‹t
:  ()
VÆ
->VÆ->
Unsig√dSh‹tI¡egî
;

204 
Ty≥Unsig√dL⁄g
:  ()
VÆ
->VÆ->
Unsig√dL⁄gI¡egî
;

205 
Ty≥FP
:  ()
VÆ
->VÆ->
FP
;

209 
	}
}

213 
	$Ex¥essi⁄AssignI¡
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
De°VÆue
, 
FromI¡
, 
A·î
)

215 
Resu…
;

217 i‡(!
De°VÆue
->
IsLVÆue
)

218 
	`ProgømFaû
(
P¨£r
, "can'tássignÅoÅhis");

220 i‡(
A·î
)

221 
Resu…
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
De°VÆue
);

223 
Resu…
 = 
FromI¡
;

225 
De°VÆue
->
Typ
->
Ba£
)

227 
Ty≥I¡
: 
De°VÆue
->
VÆ
->
I¡egî
 = 
FromI¡
; ;

228 
Ty≥Sh‹t
: 
De°VÆue
->
VÆ
->
Sh‹tI¡egî
 = ()
FromI¡
; ;

229 
Ty≥Ch¨
: 
De°VÆue
->
VÆ
->
Ch¨a˘î
 = ()
FromI¡
; ;

230 
Ty≥L⁄g
: 
De°VÆue
->
VÆ
->
L⁄gI¡egî
 = ()
FromI¡
; ;

231 
Ty≥Unsig√dI¡
: 
De°VÆue
->
VÆ
->
Unsig√dI¡egî
 = ()
FromI¡
; ;

232 
Ty≥Unsig√dSh‹t
: 
De°VÆue
->
VÆ
->
Unsig√dSh‹tI¡egî
 = ()
FromI¡
; ;

233 
Ty≥Unsig√dL⁄g
: 
De°VÆue
->
VÆ
->
Unsig√dL⁄gI¡egî
 = ()
FromI¡
; ;

236  
Resu…
;

237 
	}
}

239 #i‚de‡
NO_FP


241 
	$Ex¥essi⁄AssignFP
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
De°VÆue
, 
FromFP
)

243 i‡(!
De°VÆue
->
IsLVÆue
)

244 
	`ProgømFaû
(
P¨£r
, "can'tássignÅoÅhis");

246 
De°VÆue
->
VÆ
->
FP
 = 
FromFP
;

247  
FromFP
;

248 
	}
}

252 
	$Ex¥essi⁄SèckPushVÆueNode
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
VÆue
 *
VÆueLoc
)

254 
Ex¥essi⁄Sèck
 *
SèckNode
 = 
	`V¨übÀAŒoc
(
P¨£r
, (Ex¥essi⁄Sèck), 
FALSE
);

255 
SèckNode
->
Next
 = *
SèckT›
;

256 
SèckNode
->
VÆ
 = 
VÆueLoc
;

257 *
SèckT›
 = 
SèckNode
;

258 #ifde‡
FANCY_ERROR_MESSAGES


259 
SèckNode
->
Löe
 = 
P¨£r
->Line;

260 
SèckNode
->
Ch¨a˘îPos
 = 
P¨£r
->CharacterPos;

262 #ifde‡
DEBUG_EXPRESSIONS


263 
	`Ex¥essi⁄SèckShow
(*
SèckT›
);

265 
	}
}

268 
VÆue
 *
	$Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
VÆueTy≥
 *
PushTy≥
)

270 
VÆue
 *
VÆueLoc
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, 
PushTy≥
, 
FALSE
, 
NULL
, FALSE);

271 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
VÆueLoc
);

273  
VÆueLoc
;

274 
	}
}

277 
	$Ex¥essi⁄SèckPushVÆue
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
VÆue
 *
PushVÆue
)

279 
VÆue
 *
VÆueLoc
 = 
	`V¨übÀAŒocVÆueAndC›y
(
P¨£r
, 
PushVÆue
, 
FALSE
);

280 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
VÆueLoc
);

281 
	}
}

283 
	$Ex¥essi⁄SèckPushLVÆue
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
VÆue
 *
PushVÆue
, 
Off£t
)

285 
VÆue
 *
VÆueLoc
 = 
	`V¨übÀAŒocVÆueSh¨ed
(
P¨£r
, 
PushVÆue
);

286 
VÆueLoc
->
VÆ
 = (*)((*)VÆueLoc->VÆ + 
Off£t
);

287 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
VÆueLoc
);

288 
	}
}

290 
	$Ex¥essi⁄SèckPushDîe„ªn˚
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
VÆue
 *
Dîe„ªn˚VÆue
)

292 
VÆue
 *
DîefVÆ
;

293 
VÆue
 *
VÆueLoc
;

294 
Off£t
;

295 
VÆueTy≥
 *
DîefTy≥
;

296 
DîefIsLVÆue
;

297 *
DîefD©aLoc
 = 
	`V¨übÀDîe„ªn˚Poöãr
(
P¨£r
, 
Dîe„ªn˚VÆue
, &
DîefVÆ
, &
Off£t
, &
DîefTy≥
, &
DîefIsLVÆue
);

298 i‡(
DîefD©aLoc
 =
NULL
)

299 
	`ProgømFaû
(
P¨£r
, "NULLÖointer dereference");

301 
VÆueLoc
 = 
	`V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£r
, 
DîefTy≥
, (
AnyVÆue
 *)
DîefD©aLoc
, 
DîefIsLVÆue
, 
DîefVÆ
);

302 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
VÆueLoc
);

303 
	}
}

305 
	$Ex¥essi⁄PushI¡
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
I¡VÆue
)

307 
VÆue
 *
VÆueLoc
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, &
I¡Ty≥
, 
FALSE
, 
NULL
, FALSE);

308 
VÆueLoc
->
VÆ
->
I¡egî
 = 
I¡VÆue
;

309 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
VÆueLoc
);

310 
	}
}

312 #i‚de‡
NO_FP


313 
	$Ex¥essi⁄PushFP
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
FPVÆue
)

315 
VÆue
 *
VÆueLoc
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, &
FPTy≥
, 
FALSE
, 
NULL
, FALSE);

316 
VÆueLoc
->
VÆ
->
FP
 = 
FPVÆue
;

317 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
VÆueLoc
);

318 
	}
}

322 
	$Ex¥essi⁄AssignToPoöãr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
ToVÆue
, VÆuê*
FromVÆue
, c⁄° *
FuncName
, 
P¨amNo
, 
AŒowPoöãrC€rci⁄
)

324 
VÆueTy≥
 *
PoöãdToTy≥
 = 
ToVÆue
->
Typ
->
FromTy≥
;

326 i‡(
FromVÆue
->
Typ
 =
ToVÆue
->Ty∞|| FromVÆue->Ty∞=
VoidPåTy≥
 || (ToVÆue->Ty∞=VoidPåTy≥ && FromVÆue->Typ->
Ba£
 =
Ty≥Poöãr
))

327 
ToVÆue
->
VÆ
->
Poöãr
 = 
FromVÆue
->Val->Pointer;

329 i‡(
FromVÆue
->
Typ
->
Ba£
 =
Ty≥Aºay
 && (
PoöãdToTy≥
 =FromVÆue->Typ->
FromTy≥
 || 
ToVÆue
->Ty∞=
VoidPåTy≥
))

332 
ToVÆue
->
VÆ
->
Poöãr
 = (*)&
FromVÆue
->VÆ->
AºayMem
[0];

334 i‡(
FromVÆue
->
Typ
->
Ba£
 =
Ty≥Poöãr
 && FromVÆue->Typ->
FromTy≥
->Ba£ =
Ty≥Aºay
 &&

335 (
PoöãdToTy≥
 =
FromVÆue
->
Typ
->
FromTy≥
->FromTy≥ || 
ToVÆue
->Ty∞=
VoidPåTy≥
) )

338 
ToVÆue
->
VÆ
->
Poöãr
 = 
	`V¨übÀDîe„ªn˚Poöãr
(
P¨£r
, 
FromVÆue
, 
NULL
, NULL, NULL, NULL);

340 i‡(
	`IS_NUMERIC_COERCIBLE
(
FromVÆue
Ë&& 
	`Ex¥essi⁄C€r˚I¡egî
(FromValue) == 0)

343 
ToVÆue
->
VÆ
->
Poöãr
 = 
NULL
;

345 i‡(
AŒowPoöãrC€rci⁄
 && 
	`IS_NUMERIC_COERCIBLE
(
FromVÆue
))

348 
ToVÆue
->
VÆ
->
Poöãr
 = (*)()
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
FromVÆue
);

350 i‡(
AŒowPoöãrC€rci⁄
 && 
FromVÆue
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

353 
ToVÆue
->
VÆ
->
Poöãr
 = 
FromVÆue
->Val->Pointer;

356 
	`AssignFaû
(
P¨£r
, "%à‰om %t", 
ToVÆue
->
Typ
, 
FromVÆue
->Typ, 0, 0, 
FuncName
, 
P¨amNo
);

357 
	}
}

360 
	$Ex¥essi⁄Assign
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
De°VÆue
, VÆuê*
Sour˚VÆue
, 
F‹˚
, c⁄° *
FuncName
, 
P¨amNo
, 
AŒowPoöãrC€rci⁄
)

362 i‡(!
De°VÆue
->
IsLVÆue
 && !
F‹˚
)

363 
	`AssignFaû
(
P¨£r
, "nŸá¿lvÆue", 
NULL
, NULL, 0, 0, 
FuncName
, 
P¨amNo
);

365 i‡(
	`IS_NUMERIC_COERCIBLE
(
De°VÆue
Ë&& !
	`IS_NUMERIC_COERCIBLE_PLUS_POINTERS
(
Sour˚VÆue
, 
AŒowPoöãrC€rci⁄
))

366 
	`AssignFaû
(
P¨£r
, "%à‰om %t", 
De°VÆue
->
Typ
, 
Sour˚VÆue
->Typ, 0, 0, 
FuncName
, 
P¨amNo
);

368 
De°VÆue
->
Typ
->
Ba£
)

370 
Ty≥I¡
: 
De°VÆue
->
VÆ
->
I¡egî
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
Sour˚VÆue
); ;

371 
Ty≥Sh‹t
: 
De°VÆue
->
VÆ
->
Sh‹tI¡egî
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
Sour˚VÆue
); ;

372 
Ty≥Ch¨
: 
De°VÆue
->
VÆ
->
Ch¨a˘î
 = 
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
Sour˚VÆue
); ;

373 
Ty≥L⁄g
: 
De°VÆue
->
VÆ
->
L⁄gI¡egî
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
Sour˚VÆue
); ;

374 
Ty≥Unsig√dI¡
: 
De°VÆue
->
VÆ
->
Unsig√dI¡egî
 = 
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
Sour˚VÆue
); ;

375 
Ty≥Unsig√dSh‹t
: 
De°VÆue
->
VÆ
->
Unsig√dSh‹tI¡egî
 = 
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
Sour˚VÆue
); ;

376 
Ty≥Unsig√dL⁄g
: 
De°VÆue
->
VÆ
->
Unsig√dL⁄gI¡egî
 = 
	`Ex¥essi⁄C€r˚Unsig√dI¡egî
(
Sour˚VÆue
); ;

378 #i‚de‡
NO_FP


379 
Ty≥FP
:

380 i‡(!
	`IS_NUMERIC_COERCIBLE_PLUS_POINTERS
(
Sour˚VÆue
, 
AŒowPoöãrC€rci⁄
))

381 
	`AssignFaû
(
P¨£r
, "%à‰om %t", 
De°VÆue
->
Typ
, 
Sour˚VÆue
->Typ, 0, 0, 
FuncName
, 
P¨amNo
);

383 
De°VÆue
->
VÆ
->
FP
 = 
	`Ex¥essi⁄C€r˚FP
(
Sour˚VÆue
);

386 
Ty≥Poöãr
:

387 
	`Ex¥essi⁄AssignToPoöãr
(
P¨£r
, 
De°VÆue
, 
Sour˚VÆue
, 
FuncName
, 
P¨amNo
, 
AŒowPoöãrC€rci⁄
);

390 
Ty≥Aºay
:

391 i‡(
De°VÆue
->
Typ
 !
Sour˚VÆue
->Typ)

392 
	`AssignFaû
(
P¨£r
, "%à‰om %t", 
De°VÆue
->
Typ
, 
Sour˚VÆue
->Typ, 0, 0, 
FuncName
, 
P¨amNo
);

394 i‡(
De°VÆue
->
Typ
->
AºaySize
 !
Sour˚VÆue
->Typ->ArraySize)

395 
	`AssignFaû
(
P¨£r
, "‰omá¿¨øy o‡sizê%dÅÿ⁄êo‡sizê%d", 
NULL
, NULL, 
De°VÆue
->
Typ
->
AºaySize
, 
Sour˚VÆue
->Typ->AºaySize, 
FuncName
, 
P¨amNo
);

397 
	`mem˝y
((*)
De°VÆue
->
VÆ
, (*)
Sour˚VÆue
->VÆ, 
	`Ty≥SizeVÆue
(De°VÆue, 
FALSE
));

400 
Ty≥Såu˘
:

401 
Ty≥Uni⁄
:

402 i‡(
De°VÆue
->
Typ
 !
Sour˚VÆue
->Typ)

403 
	`AssignFaû
(
P¨£r
, "%à‰om %t", 
De°VÆue
->
Typ
, 
Sour˚VÆue
->Typ, 0, 0, 
FuncName
, 
P¨amNo
);

405 
	`mem˝y
((*)
De°VÆue
->
VÆ
, (*)
Sour˚VÆue
->VÆ, 
	`Ty≥SizeVÆue
(Sour˚VÆue, 
FALSE
));

409 
	`AssignFaû
(
P¨£r
, "%t", 
De°VÆue
->
Typ
, 
NULL
, 0, 0, 
FuncName
, 
P¨amNo
);

412 
	}
}

415 
	$Ex¥essi⁄Que°i⁄M¨kO≥øt‹
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
VÆue
 *
BŸtomVÆue
, VÆuê*
T›VÆue
)

417 i‡(!
	`IS_NUMERIC_COERCIBLE
(
T›VÆue
))

418 
	`ProgømFaû
(
P¨£r
, "firstárgumentÅo '?' should beáÇumber");

420 i‡(
	`Ex¥essi⁄C€r˚I¡egî
(
T›VÆue
))

423 
	`Ex¥essi⁄SèckPushVÆue
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
);

428 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, &
VoidTy≥
);

430 
	}
}

433 
	$Ex¥essi⁄Cﬁ⁄O≥øt‹
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
VÆue
 *
BŸtomVÆue
, VÆuê*
T›VÆue
)

435 i‡(
T›VÆue
->
Typ
->
Ba£
 =
Ty≥Void
)

438 
	`Ex¥essi⁄SèckPushVÆue
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
);

443 
	`Ex¥essi⁄SèckPushVÆue
(
P¨£r
, 
SèckT›
, 
T›VÆue
);

445 
	}
}

448 
	$Ex¥essi⁄PªfixO≥øt‹
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
LexTokí
 
Op
, 
VÆue
 *
T›VÆue
)

450 
VÆue
 *
Resu…
;

451 
AnyVÆue
 *
VÆPå
;

453 
	`debugf
("ExpressionPrefixOperator()\n");

454 
Op
)

456 
TokíAm≥rßnd
:

457 i‡(!
T›VÆue
->
IsLVÆue
)

458 
	`ProgømFaû
(
P¨£r
, "can't getÅheáddress ofÅhis");

460 
VÆPå
 = 
T›VÆue
->
VÆ
;

461 
Resu…
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, 
	`Ty≥GëM©chög
(P¨£r, 
T›VÆue
->
Typ
, 
Ty≥Poöãr
, 0, 
SåEm±y
, 
TRUE
), 
FALSE
, 
NULL
, FALSE);

462 
Resu…
->
VÆ
->
Poöãr
 = (*)
VÆPå
;

463 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
Resu…
);

466 
TokíA°îisk
:

467 
	`Ex¥essi⁄SèckPushDîe„ªn˚
(
P¨£r
, 
SèckT›
, 
T›VÆue
);

470 
TokíSizeof
:

472 i‡(
T›VÆue
->
Typ
 =&
Ty≥Ty≥
)

473 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
	`Ty≥Size
(
T›VÆue
->
VÆ
->
Typ
, T›VÆue->VÆ->Typ->
AºaySize
, 
TRUE
));

475 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
	`Ty≥Size
(
T›VÆue
->
Typ
, T›VÆue->Typ->
AºaySize
, 
TRUE
));

480 #i‚de‡
NO_FP


481 i‡(
T›VÆue
->
Typ
 =&
FPTy≥
)

484 
Resu…FP
 = 0.0;

486 
Op
)

488 
TokíPlus
: 
Resu…FP
 = 
T›VÆue
->
VÆ
->
FP
; ;

489 
TokíMöus
: 
Resu…FP
 = -
T›VÆue
->
VÆ
->
FP
; ;

490 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

493 
	`Ex¥essi⁄PushFP
(
P¨£r
, 
SèckT›
, 
Resu…FP
);

497 i‡(
	`IS_NUMERIC_COERCIBLE
(
T›VÆue
))

500 
Resu…I¡
 = 0;

501 
T›I¡
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
T›VÆue
);

502 
Op
)

504 
TokíPlus
: 
Resu…I¡
 = 
T›I¡
; ;

505 
TokíMöus
: 
Resu…I¡
 = -
T›I¡
; ;

506 
TokíIn¸emít
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
T›VÆue
, 
T›I¡
+1, 
FALSE
); ;

507 
TokíDe¸emít
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
T›VÆue
, 
T›I¡
-1, 
FALSE
); ;

508 
TokíU«ryNŸ
: 
Resu…I¡
 = !
T›I¡
; ;

509 
TokíU«ryEx‹
: 
Resu…I¡
 = ~
T›I¡
; ;

510 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

513 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
Resu…I¡
);

515 i‡(
T›VÆue
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

518 
Size
 = 
	`Ty≥Size
(
T›VÆue
->
Typ
->
FromTy≥
, 0, 
TRUE
);

519 
VÆue
 *
SèckVÆue
;

520 *
Resu…På
;

522 i‡(
T›VÆue
->
VÆ
->
Poöãr
 =
NULL
)

523 
	`ProgømFaû
(
P¨£r
, "invalid use ofá NULLÖointer");

525 i‡(!
T›VÆue
->
IsLVÆue
)

526 
	`ProgømFaû
(
P¨£r
, "can'tássignÅoÅhis");

528 
Op
)

530 
TokíIn¸emít
: 
T›VÆue
->
VÆ
->
Poöãr
 = (*)((*)T›VÆue->VÆ->Poöã∏+ 
Size
); ;

531 
TokíDe¸emít
: 
T›VÆue
->
VÆ
->
Poöãr
 = (*)((*)T›VÆue->VÆ->Poöã∏- 
Size
); ;

532 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

535 
Resu…På
 = 
T›VÆue
->
VÆ
->
Poöãr
;

536 
SèckVÆue
 = 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, 
T›VÆue
->
Typ
);

537 
SèckVÆue
->
VÆ
->
Poöãr
 = 
Resu…På
;

540 
	`ProgømFaû
(
P¨£r
, "invalid operation");

543 
	}
}

546 
	$Ex¥essi⁄Po°fixO≥øt‹
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
LexTokí
 
Op
, 
VÆue
 *
T›VÆue
)

548 
	`debugf
("ExpressionPostfixOperator()\n");

549 i‡(
	`IS_NUMERIC_COERCIBLE
(
T›VÆue
))

551 
Resu…I¡
 = 0;

552 
T›I¡
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
T›VÆue
);

553 
Op
)

555 
TokíIn¸emít
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
T›VÆue
, 
T›I¡
+1, 
TRUE
); ;

556 
TokíDe¸emít
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
T›VÆue
, 
T›I¡
-1, 
TRUE
); ;

557 
TokíRightSqu¨eBøckë
: 
	`ProgømFaû
(
P¨£r
, "not supported"); ;

558 
TokíClo£Bøckë
: 
	`ProgømFaû
(
P¨£r
, "not supported"); ;

559 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

562 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
Resu…I¡
);

564 i‡(
T›VÆue
->
Typ
->
Ba£
 =
Ty≥Poöãr
)

567 
Size
 = 
	`Ty≥Size
(
T›VÆue
->
Typ
->
FromTy≥
, 0, 
TRUE
);

568 
VÆue
 *
SèckVÆue
;

569 *
OrigPoöãr
 = 
T›VÆue
->
VÆ
->
Poöãr
;

571 i‡(
T›VÆue
->
VÆ
->
Poöãr
 =
NULL
)

572 
	`ProgømFaû
(
P¨£r
, "invalid use ofá NULLÖointer");

574 i‡(!
T›VÆue
->
IsLVÆue
)

575 
	`ProgømFaû
(
P¨£r
, "can'tássignÅoÅhis");

577 
Op
)

579 
TokíIn¸emít
: 
T›VÆue
->
VÆ
->
Poöãr
 = (*)((*)T›VÆue->VÆ->Poöã∏+ 
Size
); ;

580 
TokíDe¸emít
: 
T›VÆue
->
VÆ
->
Poöãr
 = (*)((*)T›VÆue->VÆ->Poöã∏- 
Size
); ;

581 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

584 
SèckVÆue
 = 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, 
T›VÆue
->
Typ
);

585 
SèckVÆue
->
VÆ
->
Poöãr
 = 
OrigPoöãr
;

588 
	`ProgømFaû
(
P¨£r
, "invalid operation");

589 
	}
}

592 
	$Ex¥essi⁄InfixO≥øt‹
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
LexTokí
 
Op
, 
VÆue
 *
BŸtomVÆue
, VÆuê*
T›VÆue
)

594 
Resu…I¡
 = 0;

595 
VÆue
 *
SèckVÆue
;

596 *
Poöãr
;

598 
	`debugf
("ExpressionInfixOperator()\n");

599 i‡(
BŸtomVÆue
 =
NULL
 || 
T›VÆue
 == NULL)

600 
	`ProgømFaû
(
P¨£r
, "invalidÉxpression");

602 i‡(
Op
 =
TokíLe·Squ¨eBøckë
)

605 
AºayIndex
;

606 
VÆue
 *
Resu…
 = 
NULL
;

608 i‡(!
	`IS_NUMERIC_COERCIBLE
(
T›VÆue
))

609 
	`ProgømFaû
(
P¨£r
, "array index must beán integer");

611 
AºayIndex
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
T›VÆue
);

614 
BŸtomVÆue
->
Typ
->
Ba£
)

616 
Ty≥Aºay
: 
Resu…
 = 
	`V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£r
, 
BŸtomVÆue
->
Typ
->
FromTy≥
, (
AnyVÆue
 *)(&BŸtomVÆue->
VÆ
->
AºayMem
[0] + 
	`Ty≥Size
(BŸtomVÆue->Typ, 
AºayIndex
, 
TRUE
)), BŸtomVÆue->
IsLVÆue
, BŸtomVÆue->
LVÆueFrom
); ;

617 
Ty≥Poöãr
: 
Resu…
 = 
	`V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£r
, 
BŸtomVÆue
->
Typ
->
FromTy≥
, (
AnyVÆue
 *)((*)BŸtomVÆue->
VÆ
->
Poöãr
 + 
	`Ty≥Size
(BŸtomVÆue->Typ->FromTy≥, 0, 
TRUE
Ë* 
AºayIndex
), BŸtomVÆue->
IsLVÆue
, BŸtomVÆue->
LVÆueFrom
); ;

618 : 
	`ProgømFaû
(
P¨£r
, "thi†%ài†nŸá¿¨øy", 
BŸtomVÆue
->
Typ
);

621 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
Resu…
);

623 i‡(
Op
 =
TokíQue°i⁄M¨k
)

624 
	`Ex¥essi⁄Que°i⁄M¨kO≥øt‹
(
P¨£r
, 
SèckT›
, 
T›VÆue
, 
BŸtomVÆue
);

626 i‡(
Op
 =
TokíCﬁ⁄
)

627 
	`Ex¥essi⁄Cﬁ⁄O≥øt‹
(
P¨£r
, 
SèckT›
, 
T›VÆue
, 
BŸtomVÆue
);

629 #i‚de‡
NO_FP


630 i‡–(
T›VÆue
->
Typ
 =&
FPTy≥
 && 
BŸtomVÆue
->Typ == &FPType) ||

631 (
T›VÆue
->
Typ
 =&
FPTy≥
 && 
	`IS_NUMERIC_COERCIBLE
(
BŸtomVÆue
)) ||

632 (
	`IS_NUMERIC_COERCIBLE
(
T›VÆue
Ë&& 
BŸtomVÆue
->
Typ
 =&
FPTy≥
) )

635 
Resu…IsI¡
 = 
FALSE
;

636 
Resu…FP
 = 0.0;

637 
T›FP
 = (
T›VÆue
->
Typ
 =&
FPTy≥
Ë? T›VÆue->
VÆ
->
FP
 : ()
	`Ex¥essi⁄C€r˚I¡egî
(TopValue);

638 
BŸtomFP
 = (
BŸtomVÆue
->
Typ
 =&
FPTy≥
Ë? BŸtomVÆue->
VÆ
->
FP
 : ()
	`Ex¥essi⁄C€r˚I¡egî
(BottomValue);

640 
Op
)

642 
TokíAssign
: 
Resu…FP
 = 
	`Ex¥essi⁄AssignFP
(
P¨£r
, 
BŸtomVÆue
, 
T›FP
); ;

643 
TokíAddAssign
: 
Resu…FP
 = 
	`Ex¥essi⁄AssignFP
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomFP
 + 
T›FP
); ;

644 
TokíSubåa˘Assign
: 
Resu…FP
 = 
	`Ex¥essi⁄AssignFP
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomFP
 - 
T›FP
); ;

645 
TokíMu…ùlyAssign
: 
Resu…FP
 = 
	`Ex¥essi⁄AssignFP
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomFP
 * 
T›FP
); ;

646 
TokíDivideAssign
: 
Resu…FP
 = 
	`Ex¥essi⁄AssignFP
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomFP
 / 
T›FP
); ;

647 
TokíEquÆ
: 
Resu…I¡
 = 
BŸtomFP
 =
T›FP
; 
Resu…IsI¡
 = 
TRUE
; ;

648 
TokíNŸEquÆ
: 
Resu…I¡
 = 
BŸtomFP
 !
T›FP
; 
Resu…IsI¡
 = 
TRUE
; ;

649 
TokíLessTh™
: 
Resu…I¡
 = 
BŸtomFP
 < 
T›FP
; 
Resu…IsI¡
 = 
TRUE
; ;

650 
TokíGª©îTh™
: 
Resu…I¡
 = 
BŸtomFP
 > 
T›FP
; 
Resu…IsI¡
 = 
TRUE
; ;

651 
TokíLessEquÆ
: 
Resu…I¡
 = 
BŸtomFP
 <
T›FP
; 
Resu…IsI¡
 = 
TRUE
; ;

652 
TokíGª©îEquÆ
: 
Resu…I¡
 = 
BŸtomFP
 >
T›FP
; 
Resu…IsI¡
 = 
TRUE
; ;

653 
TokíPlus
: 
Resu…FP
 = 
BŸtomFP
 + 
T›FP
; ;

654 
TokíMöus
: 
Resu…FP
 = 
BŸtomFP
 - 
T›FP
; ;

655 
TokíA°îisk
: 
Resu…FP
 = 
BŸtomFP
 * 
T›FP
; ;

656 
TokíSœsh
: 
Resu…FP
 = 
BŸtomFP
 / 
T›FP
; ;

657 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

660 i‡(
Resu…IsI¡
)

661 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
Resu…I¡
);

663 
	`Ex¥essi⁄PushFP
(
P¨£r
, 
SèckT›
, 
Resu…FP
);

666 i‡(
	`IS_NUMERIC_COERCIBLE
(
T›VÆue
Ë&& IS_NUMERIC_COERCIBLE(
BŸtomVÆue
))

669 
T›I¡
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
T›VÆue
);

670 
BŸtomI¡
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
BŸtomVÆue
);

671 
Op
)

673 
TokíAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
T›I¡
, 
FALSE
); ;

674 
TokíAddAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 + 
T›I¡
, 
FALSE
); ;

675 
TokíSubåa˘Assign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 - 
T›I¡
, 
FALSE
); ;

676 
TokíMu…ùlyAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 * 
T›I¡
, 
FALSE
); ;

677 
TokíDivideAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 / 
T›I¡
, 
FALSE
); ;

678 #i‚de‡
NO_MODULUS


679 
TokíModulusAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 % 
T›I¡
, 
FALSE
); ;

681 
TokíShi·Le·Assign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 << 
T›I¡
, 
FALSE
); ;

682 
TokíShi·RightAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 >> 
T›I¡
, 
FALSE
); ;

683 
TokíArôhmëicAndAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 & 
T›I¡
, 
FALSE
); ;

684 
TokíArôhmëicOrAssign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 | 
T›I¡
, 
FALSE
); ;

685 
TokíArôhmëicEx‹Assign
: 
Resu…I¡
 = 
	`Ex¥essi⁄AssignI¡
(
P¨£r
, 
BŸtomVÆue
, 
BŸtomI¡
 ^ 
T›I¡
, 
FALSE
); ;

686 
TokíLogiˇlOr
: 
Resu…I¡
 = 
BŸtomI¡
 || 
T›I¡
; ;

687 
TokíLogiˇlAnd
: 
Resu…I¡
 = 
BŸtomI¡
 && 
T›I¡
; ;

688 
TokíArôhmëicOr
: 
Resu…I¡
 = 
BŸtomI¡
 | 
T›I¡
; ;

689 
TokíArôhmëicEx‹
: 
Resu…I¡
 = 
BŸtomI¡
 ^ 
T›I¡
; ;

690 
TokíAm≥rßnd
: 
Resu…I¡
 = 
BŸtomI¡
 & 
T›I¡
; ;

691 
TokíEquÆ
: 
Resu…I¡
 = 
BŸtomI¡
 =
T›I¡
; ;

692 
TokíNŸEquÆ
: 
Resu…I¡
 = 
BŸtomI¡
 !
T›I¡
; ;

693 
TokíLessTh™
: 
Resu…I¡
 = 
BŸtomI¡
 < 
T›I¡
; ;

694 
TokíGª©îTh™
: 
Resu…I¡
 = 
BŸtomI¡
 > 
T›I¡
; ;

695 
TokíLessEquÆ
: 
Resu…I¡
 = 
BŸtomI¡
 <
T›I¡
; ;

696 
TokíGª©îEquÆ
: 
Resu…I¡
 = 
BŸtomI¡
 >
T›I¡
; ;

697 
TokíShi·Le·
: 
Resu…I¡
 = 
BŸtomI¡
 << 
T›I¡
; ;

698 
TokíShi·Right
: 
Resu…I¡
 = 
BŸtomI¡
 >> 
T›I¡
; ;

699 
TokíPlus
: 
Resu…I¡
 = 
BŸtomI¡
 + 
T›I¡
; ;

700 
TokíMöus
: 
Resu…I¡
 = 
BŸtomI¡
 - 
T›I¡
; ;

701 
TokíA°îisk
: 
Resu…I¡
 = 
BŸtomI¡
 * 
T›I¡
; ;

702 
TokíSœsh
: 
Resu…I¡
 = 
BŸtomI¡
 / 
T›I¡
; ;

703 #i‚de‡
NO_MODULUS


704 
TokíModulus
: 
Resu…I¡
 = 
BŸtomI¡
 % 
T›I¡
; ;

706 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

709 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
Resu…I¡
);

711 i‡(
BŸtomVÆue
->
Typ
->
Ba£
 =
Ty≥Poöãr
 && 
	`IS_NUMERIC_COERCIBLE
(
T›VÆue
))

714 
T›I¡
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
T›VÆue
);

716 i‡(
Op
 =
TokíEquÆ
 || O∞=
TokíNŸEquÆ
)

719 i‡(
T›I¡
 != 0)

720 
	`ProgømFaû
(
P¨£r
, "invalid operation");

722 i‡(
Op
 =
TokíEquÆ
)

723 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
->
VÆ
->
Poöãr
 =
NULL
);

725 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
->
VÆ
->
Poöãr
 !
NULL
);

727 i‡(
Op
 =
TokíPlus
 || O∞=
TokíMöus
)

730 
Size
 = 
	`Ty≥Size
(
BŸtomVÆue
->
Typ
->
FromTy≥
, 0, 
TRUE
);

732 
Poöãr
 = 
BŸtomVÆue
->
VÆ
->Pointer;

733 i‡(
Poöãr
 =
NULL
)

734 
	`ProgømFaû
(
P¨£r
, "invalid use ofá NULLÖointer");

736 i‡(
Op
 =
TokíPlus
)

737 
Poöãr
 = (*)((*)Poöã∏+ 
T›I¡
 * 
Size
);

739 
Poöãr
 = (*)((*)Poöã∏- 
T›I¡
 * 
Size
);

741 
SèckVÆue
 = 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
->
Typ
);

742 
SèckVÆue
->
VÆ
->
Poöãr
 = Pointer;

744 i‡(
Op
 =
TokíAssign
 && 
T›I¡
 == 0)

747 
	`HópU≈›Sèck
((
VÆue
));

748 
	`Ex¥essi⁄Assign
(
P¨£r
, 
BŸtomVÆue
, 
T›VÆue
, 
FALSE
, 
NULL
, 0, FALSE);

749 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
);

751 i‡(
Op
 =
TokíAddAssign
 || O∞=
TokíSubåa˘Assign
)

754 
Size
 = 
	`Ty≥Size
(
BŸtomVÆue
->
Typ
->
FromTy≥
, 0, 
TRUE
);

756 
Poöãr
 = 
BŸtomVÆue
->
VÆ
->Pointer;

757 i‡(
Poöãr
 =
NULL
)

758 
	`ProgømFaû
(
P¨£r
, "invalid use ofá NULLÖointer");

760 i‡(
Op
 =
TokíAddAssign
)

761 
Poöãr
 = (*)((*)Poöã∏+ 
T›I¡
 * 
Size
);

763 
Poöãr
 = (*)((*)Poöã∏- 
T›I¡
 * 
Size
);

765 
	`HópU≈›Sèck
((
VÆue
));

766 
BŸtomVÆue
->
VÆ
->
Poöãr
 = Pointer;

767 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
);

770 
	`ProgømFaû
(
P¨£r
, "invalid operation");

772 i‡(
BŸtomVÆue
->
Typ
->
Ba£
 =
Ty≥Poöãr
 && 
T›VÆue
->Typ->Ba£ =Ty≥Poöã∏&& 
Op
 !
TokíAssign
)

775 *
T›Loc
 = (*)
T›VÆue
->
VÆ
->
Poöãr
;

776 *
BŸtomLoc
 = (*)
BŸtomVÆue
->
VÆ
->
Poöãr
;

778 
Op
)

780 
TokíEquÆ
: 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
BŸtomLoc
 =
T›Loc
); ;

781 
TokíNŸEquÆ
: 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
BŸtomLoc
 !
T›Loc
); ;

782 
TokíMöus
: 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 
BŸtomLoc
 - 
T›Loc
); ;

783 : 
	`ProgømFaû
(
P¨£r
, "invalid operation"); ;

786 i‡(
Op
 =
TokíAssign
)

789 
	`HópU≈›Sèck
((
VÆue
));

790 
	`Ex¥essi⁄Assign
(
P¨£r
, 
BŸtomVÆue
, 
T›VÆue
, 
FALSE
, 
NULL
, 0, FALSE);

791 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
);

793 i‡(
Op
 =
TokíCa°
)

796 
VÆue
 *
VÆueLoc
 = 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, 
BŸtomVÆue
->
VÆ
->
Typ
);

797 
	`Ex¥essi⁄Assign
(
P¨£r
, 
VÆueLoc
, 
T›VÆue
, 
TRUE
, 
NULL
, 0, TRUE);

800 
	`ProgømFaû
(
P¨£r
, "invalid operation");

801 
	}
}

804 
	$Ex¥essi⁄SèckCﬁœp£
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
Pª˚dí˚
, *
Ign‹ePª˚dí˚
)

806 
FoundPª˚dí˚
 = 
Pª˚dí˚
;

807 
VÆue
 *
T›VÆue
;

808 
VÆue
 *
BŸtomVÆue
;

809 
Ex¥essi⁄Sèck
 *
T›SèckNode
 = *
SèckT›
;

810 
Ex¥essi⁄Sèck
 *
T›O≥øt‹Node
;

812 
	`debugf
("Ex¥essi⁄SèckCﬁœp£(%d):\n", 
Pª˚dí˚
);

813 #ifde‡
DEBUG_EXPRESSIONS


814 
	`Ex¥essi⁄SèckShow
(*
SèckT›
);

816 
T›SèckNode
 !
NULL
 && T›SèckNode->
Next
 !NULL && 
FoundPª˚dí˚
 >
Pª˚dí˚
)

819 i‡(
T›SèckNode
->
Ordî
 =
OrdîN⁄e
)

820 
T›O≥øt‹Node
 = 
T›SèckNode
->
Next
;

822 
T›O≥øt‹Node
 = 
T›SèckNode
;

824 
FoundPª˚dí˚
 = 
T›O≥øt‹Node
->
Pª˚dí˚
;

827 i‡(
FoundPª˚dí˚
 >
Pª˚dí˚
 && 
T›O≥øt‹Node
 !
NULL
)

830 
T›O≥øt‹Node
->
Ordî
)

832 
OrdîPªfix
:

834 
	`debugf
("prefixÉvaluation\n");

835 
T›VÆue
 = 
T›SèckNode
->
VÆ
;

838 
	`HópP›Sèck
(
NULL
, (
Ex¥essi⁄Sèck
Ë+ (
VÆue
Ë+ 
	`Ty≥SèckSizeVÆue
(
T›VÆue
));

839 
	`HópP›Sèck
(
T›O≥øt‹Node
, (
Ex¥essi⁄Sèck
));

840 *
SèckT›
 = 
T›O≥øt‹Node
->
Next
;

843 i‡(
P¨£r
->
Mode
 =
RunModeRun
 && 
FoundPª˚dí˚
 < *
Ign‹ePª˚dí˚
)

846 
	`Ex¥essi⁄PªfixO≥øt‹
(
P¨£r
, 
SèckT›
, 
T›O≥øt‹Node
->
Op
, 
T›VÆue
);

851 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 0);

855 
OrdîPo°fix
:

857 
	`debugf
("postfixÉvaluation\n");

858 
T›VÆue
 = 
T›SèckNode
->
Next
->
VÆ
;

861 
	`HópP›Sèck
(
NULL
, (
Ex¥essi⁄Sèck
));

862 
	`HópP›Sèck
(
T›VÆue
, (
Ex¥essi⁄Sèck
Ë+ (
VÆue
Ë+ 
	`Ty≥SèckSizeVÆue
(TopValue));

863 *
SèckT›
 = 
T›SèckNode
->
Next
->Next;

866 i‡(
P¨£r
->
Mode
 =
RunModeRun
 && 
FoundPª˚dí˚
 < *
Ign‹ePª˚dí˚
)

869 
	`Ex¥essi⁄Po°fixO≥øt‹
(
P¨£r
, 
SèckT›
, 
T›O≥øt‹Node
->
Op
, 
T›VÆue
);

874 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 0);

878 
OrdîInfix
:

880 
	`debugf
("infixÉvaluation\n");

881 
T›VÆue
 = 
T›SèckNode
->
VÆ
;

882 i‡(
T›VÆue
 !
NULL
)

884 
BŸtomVÆue
 = 
T›O≥øt‹Node
->
Next
->
VÆ
;

887 
	`HópP›Sèck
(
NULL
, (
Ex¥essi⁄Sèck
Ë+ (
VÆue
Ë+ 
	`Ty≥SèckSizeVÆue
(
T›VÆue
));

888 
	`HópP›Sèck
(
NULL
, (
Ex¥essi⁄Sèck
));

889 
	`HópP›Sèck
(
BŸtomVÆue
, (
Ex¥essi⁄Sèck
Ë+ (
VÆue
Ë+ 
	`Ty≥SèckSizeVÆue
(BottomValue));

890 *
SèckT›
 = 
T›O≥øt‹Node
->
Next
->Next;

893 i‡(
P¨£r
->
Mode
 =
RunModeRun
 && 
FoundPª˚dí˚
 <*
Ign‹ePª˚dí˚
)

896 
	`Ex¥essi⁄InfixO≥øt‹
(
P¨£r
, 
SèckT›
, 
T›O≥øt‹Node
->
Op
, 
BŸtomVÆue
, 
T›VÆue
);

901 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 0);

905 
FoundPª˚dí˚
 = -1;

908 
OrdîN⁄e
:

915 i‡(
FoundPª˚dí˚
 <*
Ign‹ePª˚dí˚
)

916 *
Ign‹ePª˚dí˚
 = 
DEEP_PRECEDENCE
;

918 #ifde‡
DEBUG_EXPRESSIONS


919 
	`Ex¥essi⁄SèckShow
(*
SèckT›
);

921 
T›SèckNode
 = *
SèckT›
;

923 
	`debugf
("ExpressionStackCollapse() finished\n");

924 #ifde‡
DEBUG_EXPRESSIONS


925 
	`Ex¥essi⁄SèckShow
(*
SèckT›
);

927 
	}
}

930 
	$Ex¥essi⁄SèckPushO≥øt‹
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
O≥øt‹Ordî
 
Ordî
, 
LexTokí
 
Tokí
, 
Pª˚dí˚
)

932 
Ex¥essi⁄Sèck
 *
SèckNode
 = 
	`V¨übÀAŒoc
(
P¨£r
, (Ex¥essi⁄Sèck), 
FALSE
);

933 
SèckNode
->
Next
 = *
SèckT›
;

934 
SèckNode
->
Ordî
 = Order;

935 
SèckNode
->
Op
 = 
Tokí
;

936 
SèckNode
->
Pª˚dí˚
 = Precedence;

937 *
SèckT›
 = 
SèckNode
;

938 
	`debugf
("ExpressionStackPushOperator()\n");

939 #ifde‡
FANCY_ERROR_MESSAGES


940 
SèckNode
->
Löe
 = 
P¨£r
->Line;

941 
SèckNode
->
Ch¨a˘îPos
 = 
P¨£r
->CharacterPos;

943 #ifde‡
DEBUG_EXPRESSIONS


944 
	`Ex¥essi⁄SèckShow
(*
SèckT›
);

946 
	}
}

949 
	$Ex¥essi⁄GëSåu˘EÀmít
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, 
LexTokí
 
Tokí
)

951 
VÆue
 *
Idít
;

954 i‡(
	`LexGëTokí
(
P¨£r
, &
Idít
, 
TRUE
Ë!
TokíIdítifõr
)

955 
	`ProgømFaû
(
P¨£r
, "√edá¿°ru˘uª o∏uni⁄ membîá·î '%s'", (
Tokí
 =
TokíDŸ
) ? "." : "->");

957 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

960 
VÆue
 *
P¨amVÆ
 = (*
SèckT›
)->
VÆ
;

961 
VÆue
 *
Såu˘VÆ
 = 
P¨amVÆ
;

962 
VÆueTy≥
 *
Såu˘Ty≥
 = 
P¨amVÆ
->
Typ
;

963 *
DîefD©aLoc
 = (*)
P¨amVÆ
->
VÆ
;

964 
VÆue
 *
MembîVÆue
;

965 
VÆue
 *
Resu…
;

968 i‡(
Tokí
 =
TokíAºow
)

969 
DîefD©aLoc
 = 
	`V¨übÀDîe„ªn˚Poöãr
(
P¨£r
, 
P¨amVÆ
, &
Såu˘VÆ
, 
NULL
, &
Såu˘Ty≥
, NULL);

971 i‡(
Såu˘Ty≥
->
Ba£
 !
Ty≥Såu˘
 && Såu˘Ty≥->Ba£ !
Ty≥Uni⁄
)

972 
	`ProgømFaû
(
P¨£r
, "ˇn'àu£ '%s' o¿somëhögÅh©'†nŸá såu˘ o∏uni⁄ %†: it'†®%t", (
Tokí
 =
TokíDŸ
Ë? "." : "->", (Tokí =
TokíAºow
Ë? "poöãr" : "", 
P¨amVÆ
->
Typ
);

974 i‡(!
	`TabÀGë
(
Såu˘Ty≥
->
Membîs
, 
Idít
->
VÆ
->
Idítifõr
, &
MembîVÆue
, 
NULL
, NULL, NULL))

975 
	`ProgømFaû
(
P¨£r
, "d€¢'àhavê®membî cÆÀd '%s'", 
Idít
->
VÆ
->
Idítifõr
);

978 
	`HópP›Sèck
(
P¨amVÆ
, (
Ex¥essi⁄Sèck
Ë+ (
VÆue
Ë+ 
	`Ty≥SèckSizeVÆue
(
Såu˘VÆ
));

979 *
SèckT›
 = (*SèckT›)->
Next
;

982 
Resu…
 = 
	`V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£r
, 
MembîVÆue
->
Typ
, (*)(
DîefD©aLoc
 + MembîVÆue->
VÆ
->
I¡egî
), 
TRUE
, (
Såu˘VÆ
 !
NULL
Ë? Såu˘VÆ->
LVÆueFrom
 : NULL);

983 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, 
SèckT›
, 
Resu…
);

985 
	}
}

988 
	$Ex¥essi⁄P¨£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 **
Resu…
)

991 
VÆue
 *
LexVÆue
;

992 
PªfixSèã
 = 
TRUE
;

993 
D⁄e
 = 
FALSE
;

994 
BøckëPª˚dí˚
 = 0;

995 
LoˇlPª˚dí˚
;

996 
Pª˚dí˚
 = 0;

997 
Ign‹ePª˚dí˚
 = 
DEEP_PRECEDENCE
;

998 
Ex¥essi⁄Sèck
 *
SèckT›
 = 
NULL
;

999 
Tî«ryDïth
 = 0;

1001 
	`debugf
("ExpressionParse():\n");

1004 
P¨£Sèã
 
PªSèã
;

1005 
LexTokí
 
Tokí
;

1007 
	`P¨£rC›y
(&
PªSèã
, 
P¨£r
);

1008 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
TRUE
);

1009 i‡–––()
Tokí
 > 
TokíComma
 && ()Tokí <()
TokíO≥nBøckë
) ||

1010 (
Tokí
 =
TokíClo£Bøckë
 && 
BøckëPª˚dí˚
 != 0)) &&

1011 (
Tokí
 !
TokíCﬁ⁄
 || 
Tî«ryDïth
 > 0) )

1014 i‡(
PªfixSèã
)

1017 i‡(
O≥øt‹Pª˚dí˚
[()
Tokí
].
PªfixPª˚dí˚
 == 0)

1018 
	`ProgømFaû
(
P¨£r
, "operatorÇotÉxpected here");

1020 
LoˇlPª˚dí˚
 = 
O≥øt‹Pª˚dí˚
[()
Tokí
].
PªfixPª˚dí˚
;

1021 
Pª˚dí˚
 = 
BøckëPª˚dí˚
 + 
LoˇlPª˚dí˚
;

1023 i‡(
Tokí
 =
TokíO≥nBøckë
)

1026 
LexTokí
 
BøckëTokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
FALSE
);

1027 i‡(
	`IS_TYPE_TOKEN
(
BøckëTokí
Ë&& (
SèckT›
 =
NULL
 || SèckT›->
Op
 !
TokíSizeof
) )

1030 
VÆueTy≥
 *
Ca°Ty≥
;

1031 *
Ca°Idítifõr
;

1032 
VÆue
 *
Ca°Ty≥VÆue
;

1034 
	`Ty≥P¨£
(
P¨£r
, &
Ca°Ty≥
, &
Ca°Idítifõr
, 
NULL
);

1035 i‡(
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
TRUE
Ë!
TokíClo£Bøckë
)

1036 
	`ProgømFaû
(
P¨£r
, "bracketsÇot closed");

1039 
Pª˚dí˚
 = 
BøckëPª˚dí˚
 + 
O≥øt‹Pª˚dí˚
[()
TokíCa°
].
PªfixPª˚dí˚
;

1041 
	`Ex¥essi⁄SèckCﬁœp£
(
P¨£r
, &
SèckT›
, 
Pª˚dí˚
+1, &
Ign‹ePª˚dí˚
);

1042 
Ca°Ty≥VÆue
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, &
Ty≥Ty≥
, 
FALSE
, 
NULL
, FALSE);

1043 
Ca°Ty≥VÆue
->
VÆ
->
Typ
 = 
Ca°Ty≥
;

1044 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, &
SèckT›
, 
Ca°Ty≥VÆue
);

1045 
	`Ex¥essi⁄SèckPushO≥øt‹
(
P¨£r
, &
SèckT›
, 
OrdîInfix
, 
TokíCa°
, 
Pª˚dí˚
);

1050 
BøckëPª˚dí˚
 +
BRACKET_PRECEDENCE
;

1056 
	`Ex¥essi⁄SèckCﬁœp£
(
P¨£r
, &
SèckT›
, 
Pª˚dí˚
, &
Ign‹ePª˚dí˚
);

1057 
	`Ex¥essi⁄SèckPushO≥øt‹
(
P¨£r
, &
SèckT›
, 
OrdîPªfix
, 
Tokí
, 
Pª˚dí˚
);

1063 i‡(
O≥øt‹Pª˚dí˚
[()
Tokí
].
Po°fixPª˚dí˚
 != 0)

1065 
Tokí
)

1067 
TokíClo£Bøckë
:

1068 
TokíRightSqu¨eBøckë
:

1069 i‡(
BøckëPª˚dí˚
 == 0)

1072 
	`P¨£rC›y
(
P¨£r
, &
PªSèã
);

1073 
D⁄e
 = 
TRUE
;

1078 
	`Ex¥essi⁄SèckCﬁœp£
(
P¨£r
, &
SèckT›
, 
BøckëPª˚dí˚
, &
Ign‹ePª˚dí˚
);

1079 
BøckëPª˚dí˚
 -
BRACKET_PRECEDENCE
;

1085 
Pª˚dí˚
 = 
BøckëPª˚dí˚
 + 
O≥øt‹Pª˚dí˚
[()
Tokí
].
Po°fixPª˚dí˚
;

1086 
	`Ex¥essi⁄SèckCﬁœp£
(
P¨£r
, &
SèckT›
, 
Pª˚dí˚
, &
Ign‹ePª˚dí˚
);

1087 
	`Ex¥essi⁄SèckPushO≥øt‹
(
P¨£r
, &
SèckT›
, 
OrdîPo°fix
, 
Tokí
, 
Pª˚dí˚
);

1091 i‡(
O≥øt‹Pª˚dí˚
[()
Tokí
].
InfixPª˚dí˚
 != 0)

1094 
Pª˚dí˚
 = 
BøckëPª˚dí˚
 + 
O≥øt‹Pª˚dí˚
[()
Tokí
].
InfixPª˚dí˚
;

1098 i‡(
	`IS_LEFT_TO_RIGHT
(
O≥øt‹Pª˚dí˚
[()
Tokí
].
InfixPª˚dí˚
))

1099 
	`Ex¥essi⁄SèckCﬁœp£
(
P¨£r
, &
SèckT›
, 
Pª˚dí˚
, &
Ign‹ePª˚dí˚
);

1101 
	`Ex¥essi⁄SèckCﬁœp£
(
P¨£r
, &
SèckT›
, 
Pª˚dí˚
+1, &
Ign‹ePª˚dí˚
);

1103 i‡(
Tokí
 =
TokíDŸ
 || Tokí =
TokíAºow
)

1105 
	`Ex¥essi⁄GëSåu˘EÀmít
(
P¨£r
, &
SèckT›
, 
Tokí
);

1110 i‡–(
Tokí
 =
TokíLogiˇlOr
 || Tokí =
TokíLogiˇlAnd
Ë&& 
	`IS_NUMERIC_COERCIBLE
(
SèckT›
->
VÆ
))

1112 
LHSI¡
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
SèckT›
->
VÆ
);

1113 i‡––(
Tokí
 =
TokíLogiˇlOr
 && 
LHSI¡
Ë|| (Tokí =
TokíLogiˇlAnd
 && !LHSInt) ) &&

1114 (
Ign‹ePª˚dí˚
 > 
Pª˚dí˚
) )

1115 
Ign‹ePª˚dí˚
 = 
Pª˚dí˚
;

1119 
	`Ex¥essi⁄SèckPushO≥øt‹
(
P¨£r
, &
SèckT›
, 
OrdîInfix
, 
Tokí
, 
Pª˚dí˚
);

1120 
PªfixSèã
 = 
TRUE
;

1122 
Tokí
)

1124 
TokíQue°i⁄M¨k
: 
Tî«ryDïth
++; ;

1125 
TokíCﬁ⁄
: 
Tî«ryDïth
--; ;

1131 i‡(
Tokí
 =
TokíLe·Squ¨eBøckë
)

1134 
BøckëPª˚dí˚
 +
BRACKET_PRECEDENCE
;

1138 
	`ProgømFaû
(
P¨£r
, "operatorÇotÉxpected here");

1141 i‡(
Tokí
 =
TokíIdítifõr
)

1144 i‡(!
PªfixSèã
)

1145 
	`ProgømFaû
(
P¨£r
, "identifierÇotÉxpected here");

1147 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíO≥nBøckë
)

1149 
	`Ex¥essi⁄P¨£Fun˘i⁄CÆl
(
P¨£r
, &
SèckT›
, 
LexVÆue
->
VÆ
->
Idítifõr
, P¨£r->
Mode
 =
RunModeRun
 && 
Pª˚dí˚
 < 
Ign‹ePª˚dí˚
);

1153 i‡(
P¨£r
->
Mode
 =
RunModeRun
 && 
Pª˚dí˚
 < 
Ign‹ePª˚dí˚
)

1155 
VÆue
 *
V¨übÀVÆue
 = 
NULL
;

1157 
	`V¨übÀGë
(
P¨£r
, 
LexVÆue
->
VÆ
->
Idítifõr
, &
V¨übÀVÆue
);

1158 i‡(
V¨übÀVÆue
->
Typ
->
Ba£
 =
Ty≥Ma¸o
)

1161 
P¨£Sèã
 
Ma¸oP¨£r
;

1162 
VÆue
 *
Ma¸oResu…
;

1164 
	`P¨£rC›y
(&
Ma¸oP¨£r
, &
V¨übÀVÆue
->
VÆ
->
Ma¸oDef
.
Body
);

1165 i‡(
V¨übÀVÆue
->
VÆ
->
Ma¸oDef
.
NumP¨ams
 != 0)

1166 
	`ProgømFaû
(&
Ma¸oP¨£r
, "macroárguments missing");

1168 i‡(!
	`Ex¥essi⁄P¨£
(&
Ma¸oP¨£r
, &
Ma¸oResu…
Ë|| 
	`LexGëTokí
(&Ma¸oP¨£r, 
NULL
, 
FALSE
Ë!
TokíEndOfFun˘i⁄
)

1169 
	`ProgømFaû
(&
Ma¸oP¨£r
, "expressionÉxpected");

1171 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, &
SèckT›
, 
Ma¸oResu…
);

1173 i‡(
V¨übÀVÆue
->
Typ
 =
Ty≥Void
)

1174 
	`ProgømFaû
(
P¨£r
, "a void value isn't much use here");

1176 
	`Ex¥essi⁄SèckPushLVÆue
(
P¨£r
, &
SèckT›
, 
V¨übÀVÆue
, 0);

1179 
	`Ex¥essi⁄PushI¡
(
P¨£r
, &
SèckT›
, 0);

1184 i‡(
Pª˚dí˚
 <
Ign‹ePª˚dí˚
)

1185 
Ign‹ePª˚dí˚
 = 
DEEP_PRECEDENCE
;

1187 
PªfixSèã
 = 
FALSE
;

1189 i‡(()
Tokí
 > 
TokíClo£Bøckë
 && ()Tokí <
TokíCh¨a˘îC⁄°™t
)

1192 i‡(!
PªfixSèã
)

1193 
	`ProgømFaû
(
P¨£r
, "valueÇotÉxpected here");

1195 
PªfixSèã
 = 
FALSE
;

1196 
	`Ex¥essi⁄SèckPushVÆue
(
P¨£r
, &
SèckT›
, 
LexVÆue
);

1198 i‡(
	`IS_TYPE_TOKEN
(
Tokí
))

1201 
VÆueTy≥
 *
Typ
;

1202 *
Idítifõr
;

1203 
VÆue
 *
Ty≥VÆue
;

1205 i‡(!
PªfixSèã
)

1206 
	`ProgømFaû
(
P¨£r
, "typeÇotÉxpected here");

1208 
PªfixSèã
 = 
FALSE
;

1209 
	`P¨£rC›y
(
P¨£r
, &
PªSèã
);

1210 
	`Ty≥P¨£
(
P¨£r
, &
Typ
, &
Idítifõr
, 
NULL
);

1211 
Ty≥VÆue
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, &
Ty≥Ty≥
, 
FALSE
, 
NULL
, FALSE);

1212 
Ty≥VÆue
->
VÆ
->
Typ
 = Typ;

1213 
	`Ex¥essi⁄SèckPushVÆueNode
(
P¨£r
, &
SèckT›
, 
Ty≥VÆue
);

1218 
	`P¨£rC›y
(
P¨£r
, &
PªSèã
);

1219 
D⁄e
 = 
TRUE
;

1222 } !
D⁄e
);

1225 i‡(
BøckëPª˚dí˚
 > 0)

1226 
	`ProgømFaû
(
P¨£r
, "bracketsÇot closed");

1229 
	`Ex¥essi⁄SèckCﬁœp£
(
P¨£r
, &
SèckT›
, 0, &
Ign‹ePª˚dí˚
);

1232 i‡(
SèckT›
 !
NULL
)

1235 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

1237 i‡(
SèckT›
->
Ordî
 !
OrdîN⁄e
 || SèckT›->
Next
 !
NULL
)

1238 
	`ProgømFaû
(
P¨£r
, "invalidÉxpression");

1240 *
Resu…
 = 
SèckT›
->
VÆ
;

1241 
	`HópP›Sèck
(
SèckT›
, (
Ex¥essi⁄Sèck
));

1244 
	`HópP›Sèck
(
SèckT›
->
VÆ
, (
Ex¥essi⁄Sèck
Ë+ (
VÆue
Ë+ 
	`Ty≥SèckSizeVÆue
(StackTop->Val));

1247 
	`debugf
("ExpressionParse() done\n\n");

1248 #ifde‡
DEBUG_EXPRESSIONS


1249 
	`Ex¥essi⁄SèckShow
(
SèckT›
);

1251  
SèckT›
 !
NULL
;

1252 
	}
}

1256 
	$Ex¥essi⁄P¨£Ma¸oCÆl
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, c⁄° *
Ma¸oName
, 
Ma¸oDef
 *
MDef
)

1258 
	`¥ötf
("ExpressionParseMacroCall\n");

1259 
VÆue
 *
Rëu∫VÆue
 = 
NULL
;

1260 
VÆue
 *
P¨am
;

1261 
VÆue
 **
P¨amAºay
 = 
NULL
;

1262 
ArgCou¡
;

1263 
LexTokí
 
Tokí
;

1265 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

1268 #i‚de‡
NO_FP


1269 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, &
FPTy≥
);

1271 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, &
I¡Ty≥
);

1273 
Rëu∫VÆue
 = (*
SèckT›
)->
VÆ
;

1274 
	`HópPushSèckFøme
();

1275 
P¨amAºay
 = 
	`HópAŒocSèck
((
VÆue
 *Ë* 
MDef
->
NumP¨ams
);

1276 i‡(
P¨amAºay
 =
NULL
)

1277 
	`ProgømFaû
(
P¨£r
, "out of memory");

1280 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 0);

1283 
ArgCou¡
 = 0;

1285 i‡(
	`Ex¥essi⁄P¨£
(
P¨£r
, &
P¨am
))

1287 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

1289 i‡(
ArgCou¡
 < 
MDef
->
NumP¨ams
)

1290 
P¨amAºay
[
ArgCou¡
] = 
P¨am
;

1292 
	`ProgømFaû
(
P¨£r
, "toÿm™yárgumít†tÿ%s()", 
Ma¸oName
);

1295 
ArgCou¡
++;

1296 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

1297 i‡(
Tokí
 !
TokíComma
 && Tokí !
TokíClo£Bøckë
)

1298 
	`ProgømFaû
(
P¨£r
, "commaÉxpected");

1303 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

1304 i‡(!
TokíClo£Bøckë
)

1305 
	`ProgømFaû
(
P¨£r
, "badárgument");

1308 } 
Tokí
 !
TokíClo£Bøckë
);

1310 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

1313 
P¨£Sèã
 
Ma¸oP¨£r
;

1314 
Cou¡
;

1315 
VÆue
 *
EvÆVÆue
;

1317 i‡(
ArgCou¡
 < 
MDef
->
NumP¨ams
)

1318 
	`ProgømFaû
(
P¨£r
, "nŸÉnoughárgumít†tÿ'%s'", 
Ma¸oName
);

1320 i‡(
MDef
->
Body
.
Pos
 =
NULL
)

1321 
	`ProgømFaû
(
P¨£r
, "'%s' i†undeföed", 
Ma¸oName
);

1323 
	`P¨£rC›y
(&
Ma¸oP¨£r
, &
MDef
->
Body
);

1324 
	`V¨übÀSèckFømeAdd
(
P¨£r
, 
Ma¸oName
, 0);

1325 
T›SèckFøme
->
NumP¨ams
 = 
ArgCou¡
;

1326 
T›SèckFøme
->
Rëu∫VÆue
 = ReturnValue;

1327 
Cou¡
 = 0; Cou¡ < 
MDef
->
NumP¨ams
; Count++)

1328 
	`V¨übÀDeföe
(
P¨£r
, 
MDef
->
P¨amName
[
Cou¡
], 
P¨amAºay
[Cou¡], 
NULL
, 
TRUE
);

1330 
	`Ex¥essi⁄P¨£
(&
Ma¸oP¨£r
, &
EvÆVÆue
);

1331 
	`Ex¥essi⁄Assign
(
P¨£r
, 
Rëu∫VÆue
, 
EvÆVÆue
, 
TRUE
, 
Ma¸oName
, 0, 
FALSE
);

1332 
	`V¨übÀSèckFømeP›
(
P¨£r
);

1333 
	`HópP›SèckFøme
();

1335 
	}
}

1338 
	$Ex¥essi⁄P¨£Fun˘i⁄CÆl
(
P¨£Sèã
 *
P¨£r
, 
Ex¥essi⁄Sèck
 **
SèckT›
, c⁄° *
FuncName
, 
RunIt
)

1341 
VÆue
 *
Rëu∫VÆue
 = 
NULL
;

1342 
VÆue
 *
FuncVÆue
;

1343 
VÆue
 *
P¨am
;

1344 
VÆue
 **
P¨amAºay
 = 
NULL
;

1345 
ArgCou¡
;

1346 
LexTokí
 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

1347 
RunMode
 
OldMode
 = 
P¨£r
->
Mode
;

1349 i‡(
RunIt
)

1352 
	`V¨übÀGë
(
P¨£r
, 
FuncName
, &
FuncVÆue
);

1354 i‡(
FuncVÆue
->
Typ
->
Ba£
 =
Ty≥Ma¸o
)

1357 
	`Ex¥essi⁄P¨£Ma¸oCÆl
(
P¨£r
, 
SèckT›
, 
FuncName
, &
FuncVÆue
->
VÆ
->
Ma¸oDef
);

1361 i‡(
FuncVÆue
->
Typ
->
Ba£
 !
Ty≥Fun˘i⁄
)

1362 
	`ProgømFaû
(
P¨£r
, "%ài†nŸá fun˘i⁄ - c™'àˇŒ", 
FuncVÆue
->
Typ
);

1364 
	`Ex¥essi⁄SèckPushVÆueByTy≥
(
P¨£r
, 
SèckT›
, 
FuncVÆue
->
VÆ
->
FuncDef
.
Rëu∫Ty≥
);

1365 
Rëu∫VÆue
 = (*
SèckT›
)->
VÆ
;

1366 
	`HópPushSèckFøme
();

1367 
P¨amAºay
 = 
	`HópAŒocSèck
((
VÆue
 *Ë* 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
);

1368 i‡(
P¨amAºay
 =
NULL
)

1369 
	`ProgømFaû
(
P¨£r
, "out of memory");

1373 
	`Ex¥essi⁄PushI¡
(
P¨£r
, 
SèckT›
, 0);

1374 
P¨£r
->
Mode
 = 
RunModeSkù
;

1378 
ArgCou¡
 = 0;

1380 i‡(
RunIt
 && 
ArgCou¡
 < 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
)

1381 
P¨amAºay
[
ArgCou¡
] = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, 
FuncVÆue
->
VÆ
->
FuncDef
.
P¨amTy≥
[ArgCou¡], 
FALSE
, 
NULL
, FALSE);

1383 i‡(
	`Ex¥essi⁄P¨£
(
P¨£r
, &
P¨am
))

1385 i‡(
RunIt
)

1387 i‡(
ArgCou¡
 < 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
)

1389 
	`Ex¥essi⁄Assign
(
P¨£r
, 
P¨amAºay
[
ArgCou¡
], 
P¨am
, 
TRUE
, 
FuncName
, ArgCou¡+1, 
FALSE
);

1390 
	`V¨übÀSèckP›
(
P¨£r
, 
P¨am
);

1394 i‡(!
FuncVÆue
->
VÆ
->
FuncDef
.
V¨Args
)

1395 
	`ProgømFaû
(
P¨£r
, "toÿm™yárgumít†tÿ%s()", 
FuncName
);

1399 
ArgCou¡
++;

1400 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

1401 i‡(
Tokí
 !
TokíComma
 && Tokí !
TokíClo£Bøckë
)

1402 
	`ProgømFaû
(
P¨£r
, "commaÉxpected");

1407 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

1408 i‡(!
TokíClo£Bøckë
)

1409 
	`ProgømFaû
(
P¨£r
, "badárgument");

1412 } 
Tokí
 !
TokíClo£Bøckë
);

1414 i‡(
RunIt
)

1417 i‡(
ArgCou¡
 < 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
)

1418 
	`ProgømFaû
(
P¨£r
, "nŸÉnoughárgumít†tÿ'%s'", 
FuncName
);

1420 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
I¡rösic
 =
NULL
)

1423 
P¨£Sèã
 
FuncP¨£r
;

1424 
Cou¡
;

1426 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
Body
.
Pos
 =
NULL
)

1427 
	`ProgømFaû
(
P¨£r
, "'%s' i†undeföed", 
FuncName
);

1429 
	`P¨£rC›y
(&
FuncP¨£r
, &
FuncVÆue
->
VÆ
->
FuncDef
.
Body
);

1430 
	`V¨übÀSèckFømeAdd
(
P¨£r
, 
FuncName
, 
FuncVÆue
->
VÆ
->
FuncDef
.
I¡rösic
 ? FuncVÆue->VÆ->FuncDef.
NumP¨ams
 : 0);

1431 
T›SèckFøme
->
NumP¨ams
 = 
ArgCou¡
;

1432 
T›SèckFøme
->
Rëu∫VÆue
 = ReturnValue;

1433 
Cou¡
 = 0; Cou¡ < 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
; Count++)

1434 
	`V¨übÀDeföe
(
P¨£r
, 
FuncVÆue
->
VÆ
->
FuncDef
.
P¨amName
[
Cou¡
], 
P¨amAºay
[Cou¡], 
NULL
, 
TRUE
);

1436 i‡(
	`P¨£Sèãmít
(&
FuncP¨£r
, 
TRUE
Ë!
P¨£Resu…Ok
)

1437 
	`ProgømFaû
(&
FuncP¨£r
, "function bodyÉxpected");

1439 i‡(
RunIt
)

1441 i‡(
FuncP¨£r
.
Mode
 =
RunModeRun
 && 
FuncVÆue
->
VÆ
->
FuncDef
.
Rëu∫Ty≥
 !&
VoidTy≥
)

1442 
	`ProgømFaû
(&
FuncP¨£r
, "nÿvÆuêªtu∫ed fromá fun˘i⁄Ñëu∫ög %t", 
FuncVÆue
->
VÆ
->
FuncDef
.
Rëu∫Ty≥
);

1444 i‡(
FuncP¨£r
.
Mode
 =
RunModeGŸo
)

1445 
	`ProgømFaû
(&
FuncP¨£r
, "couldn'àföd gŸÿœbñ '%s'", FuncP¨£r.
SórchGŸoLabñ
);

1448 
	`V¨übÀSèckFømeP›
(
P¨£r
);

1451 
FuncVÆue
->
VÆ
->
FuncDef
.
	`I¡rösic
(
P¨£r
, 
Rëu∫VÆue
, 
P¨amAºay
, 
ArgCou¡
);

1453 
	`HópP›SèckFøme
();

1456 
P¨£r
->
Mode
 = 
OldMode
;

1457 
	}
}

1460 
	$Ex¥essi⁄P¨£I¡
(
P¨£Sèã
 *
P¨£r
)

1462 
VÆue
 *
VÆ
;

1463 
Resu…
 = 0;

1465 i‡(!
	`Ex¥essi⁄P¨£
(
P¨£r
, &
VÆ
))

1466 
	`ProgømFaû
(
P¨£r
, "expressionÉxpected");

1468 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

1470 i‡(!
	`IS_NUMERIC_COERCIBLE
(
VÆ
))

1471 
	`ProgømFaû
(
P¨£r
, "öãgî vÆuêex≥˘ed in°ód o‡%t", 
VÆ
->
Typ
);

1473 
Resu…
 = 
	`Ex¥essi⁄C€r˚I¡egî
(
VÆ
);

1474 
	`V¨übÀSèckP›
(
P¨£r
, 
VÆ
);

1477  
Resu…
;

1478 
	}
}

	@fcntl.h

1 #i‚de‡
FCNTL_H


2 
	#FCNTL_H


	)

3 
	~<°dlib.h
>

4 
	#O_RDONLY
 0x000

	)

5 
	#O_WRONLY
 0x001

	)

6 
	#O_RDWR
 0x002

	)

7 
	#O_CREATE
 0x200

	)

9 
	sFILEL
 {

10 
	mdesc
;

13 
	#size_t
 

	)

14 
FILEL
 
	tFILE
;

	@heap.c

2 
	~"öãΩªãr.h
"

4 
	#FREELIST_BUCKETS
 8

	)

5 
	#SPLIT_MEM_THRESHOLD
 16

	)

7 #ifde‡
USE_MALLOC_STACK


8 *
	gHópMem‹y
 = 
NULL
;

9 *
	gHópBŸtom
 = 
NULL
;

10 *
	gSèckFøme
 = 
NULL
;

11 *
	gHópSèckT›
 = 
NULL
;

13 #ifde‡
SURVEYOR_HOST


14 *
	gHópMem‹y
 = (*)
C_HEAPSTART
;

15 *
	gHópBŸtom
 = (*)
C_HEAPSTART
 + 
HEAP_SIZE
;

16 *
	gSèckFøme
 = (*)
C_HEAPSTART
;

17 *
	gHópSèckT›
 = (*)
C_HEAPSTART
;

18 *
	gHópMemSèπ
 = (*)
C_HEAPSTART
;

20 
	gHópMem‹y
[
HEAP_SIZE
];

21 *
	gHópBŸtom
 = &
HópMem‹y
[
HEAP_SIZE
];

22 *
	gSèckFøme
 = &
HópMem‹y
[0];

23 *
	gHópSèckT›
 = &
HópMem‹y
[0];

27 
AŒocNode
 *
	gFªeLi°Buckë
[
FREELIST_BUCKETS
];

28 
AŒocNode
 *
	gFªeLi°Big
;

30 #ifde‡
DEBUG_HEAP


31 
	$ShowBigLi°
()

33 
AŒocNode
 *
LPos
;

35 
	`¥ötf
("Hóp: bŸtom=0x%lx 0x%lx-0x%lx, big fªñi°=", ()
HópBŸtom
, ()&
HópMem‹y
[0], ()&HópMem‹y[
HEAP_SIZE
]);

36 
LPos
 = 
FªeLi°Big
; LPo†!
NULL
; LPo†LPos->
NextFªe
)

37 
	`¥ötf
("0x%lx:%d ", ()
LPos
, LPos->
Size
);

39 
	`¥ötf
("\n");

40 
	}
}

44 
	$HópInô
(
SèckOrHópSize
)

46 
Cou¡
;

47 
AlignOff£t
 = 0;

49 #ifde‡
USE_MALLOC_STACK


50 
HópMem‹y
 = 
	`mÆloc
(
SèckOrHópSize
);

53 (()&
HópMem‹y
[
AlignOff£t
] & ((
ALIGN_TYPE
)-1)) != 0)

54 
AlignOff£t
++;

56 
SèckFøme
 = &
HópMem‹y
[
AlignOff£t
];

57 
HópSèckT›
 = &
HópMem‹y
[
AlignOff£t
];

58 *(**)
SèckFøme
 = 
NULL
;

59 
HópBŸtom
 = &
HópMem‹y
[
SèckOrHópSize
-(
ALIGN_TYPE
)+
AlignOff£t
];

60 
FªeLi°Big
 = 
NULL
;

61 
Cou¡
 = 0; Cou¡ < 
FREELIST_BUCKETS
; Count++)

62 
FªeLi°Buckë
[
Cou¡
] = 
NULL
;

63 
	}
}

65 
	$HópCÀ™up
()

67 #ifde‡
USE_MALLOC_STACK


68 
	`‰ì
(
HópMem‹y
);

70 
	}
}

74 *
	$HópAŒocSèck
(
Size
)

77 *
NewMem
 = 
HópSèckT›
;

78 *
NewT›
 = (*)
HópSèckT›
 + 
	`MEM_ALIGN
(
Size
);

79 #ifde‡
DEBUG_HEAP


80 
	`¥ötf
("HópAŒocSèck(%ldË© 0x%lx\n", ()
	`MEM_ALIGN
(
Size
), ()
HópSèckT›
);

82 i‡(
NewT›
 > (*)
HópBŸtom
)

83  
NULL
;

85 
HópSèckT›
 = (*)
NewT›
;

86 
	`mem£t
((*)
NewMem
, '\0', 
Size
);

87  
NewMem
;

88 
	}
}

91 
	$HópU≈›Sèck
(
Size
)

93 #ifde‡
DEBUG_HEAP


94 
	`¥ötf
("HópU≈›Sèck(%ldË© 0x%lx\n", ()
	`MEM_ALIGN
(
Size
), ()
HópSèckT›
);

96 
HópSèckT›
 = (*)((*)HópSèckT› + 
	`MEM_ALIGN
(
Size
));

97 
	}
}

100 
	$HópP›Sèck
(*
Addr
, 
Size
)

102 
ToLo£
 = 
	`MEM_ALIGN
(
Size
);

103 i‡(
ToLo£
 > ((*)
HópSèckT›
 - (*)&
HópMem‹y
[0]))

104  
FALSE
;

106 #ifde‡
DEBUG_HEAP


107 
	`¥ötf
("HópP›Sèck(0x%lx, %ldËbackÅÿ0x%lx\n", ()
Addr
, ()
	`MEM_ALIGN
(
Size
), ()
HópSèckT›
 - 
ToLo£
);

109 
HópSèckT›
 = (*)((*)HópSèckT› - 
ToLo£
);

112  
TRUE
;

113 
	}
}

116 
	$HópPushSèckFøme
()

118 #ifde‡
DEBUG_HEAP


119 
	`¥ötf
("Addög sèck fømê© 0x%lx\n", ()
HópSèckT›
);

121 *(**)
HópSèckT›
 = 
SèckFøme
;

122 
SèckFøme
 = 
HópSèckT›
;

123 
HópSèckT›
 = (*)((*)HópSèckT› + 
	`MEM_ALIGN
((
ALIGN_TYPE
)));

124 
	}
}

127 
	$HópP›SèckFøme
()

129 i‡(*(**)
SèckFøme
 !
NULL
)

131 
HópSèckT›
 = 
SèckFøme
;

132 
SèckFøme
 = *(**)StackFrame;

133 #ifde‡
DEBUG_HEAP


134 
	`¥ötf
("P›pög sèck fømêbackÅÿ0x%lx\n", ()
HópSèckT›
);

136  
TRUE
;

139  
FALSE
;

140 
	}
}

143 *
	$HópAŒocMem
(
Size
)

145 #ifde‡
USE_MALLOC_HEAP


147  
	`mÆloc
(
Size
*1);

149 
AŒocNode
 *
NewMem
 = 
NULL
;

150 
AŒocNode
 **
FªeNode
;

151 
AŒocSize
 = 
	`MEM_ALIGN
(
Size
Ë+ MEM_ALIGN((
NewMem
->Size));

152 
Buckë
;

153 *
Rëu∫Mem
;

155 i‡(
Size
 == 0)

156  
NULL
;

161 i‡(
AŒocSize
 < (
AŒocNode
))

162 
AŒocSize
 = (
AŒocNode
);

164 
Buckë
 = 
AŒocSize
 >> 2;

165 i‡(
Buckë
 < 
FREELIST_BUCKETS
 && 
FªeLi°Buckë
[Buckë] !
NULL
)

168 #ifde‡
DEBUG_HEAP


169 
	`¥ötf
("Æloˇtög %d(%dË‰om buckë", 
Size
, 
AŒocSize
);

171 
NewMem
 = 
FªeLi°Buckë
[
Buckë
];

173 
FªeLi°Buckë
[
Buckë
] = *(
AŒocNode
 **)
NewMem
;

175 
NewMem
->
Size
 = 
AŒocSize
;

177 i‡(
FªeLi°Big
 !
NULL
)

180 
FªeNode
 = &
FªeLi°Big
; *FªeNodê!
NULL
 && (*FªeNode)->
Size
 < 
AŒocSize
; FªeNodê&(*FªeNode)->
NextFªe
)

183 i‡(*
FªeNode
 !
NULL
)

187 i‡((*
FªeNode
)->
Size
 < 
AŒocSize
 + 
SPLIT_MEM_THRESHOLD
)

190 #ifde‡
DEBUG_HEAP


191 
	`¥ötf
("Æloˇtög %d(%dË‰om fªñi°,Çÿ•lô (%d)", 
Size
, 
AŒocSize
, (*
FªeNode
)->Size);

193 
NewMem
 = *
FªeNode
;

195 *
FªeNode
 = 
NewMem
->
NextFªe
;

200 #ifde‡
DEBUG_HEAP


201 
	`¥ötf
("Æloˇtög %d(%dË‰om fªñi°, s∂ô chunk (%d)", 
Size
, 
AŒocSize
, (*
FªeNode
)->Size);

203 
NewMem
 = (*)((*)*
FªeNode
 + (*FªeNode)->
Size
 - 
AŒocSize
);

205 (*
FªeNode
)->
Size
 -
AŒocSize
;

206 
NewMem
->
Size
 = 
AŒocSize
;

211 i‡(
NewMem
 =
NULL
)

214 #ifde‡
DEBUG_HEAP


215 
	`¥ötf
("Æloˇtög %d(%dË© bŸtom o‡hó∞(0x%lx-0x%lx)", 
Size
, 
AŒocSize
, ()((*)
HópBŸtom
 - AllocSize), ()HeapBottom);

217 i‡((*)
HópBŸtom
 - 
AŒocSize
 < (*)
HópSèckT›
)

218  
NULL
;

220 
HópBŸtom
 = (*)((*)HópBŸtom - 
AŒocSize
);

221 
NewMem
 = 
HópBŸtom
;

222 
NewMem
->
Size
 = 
AŒocSize
;

225 
Rëu∫Mem
 = (*)((*)
NewMem
 + 
	`MEM_ALIGN
((NewMem->
Size
)));

226 
	`mem£t
(
Rëu∫Mem
, '\0', 
AŒocSize
 - 
	`MEM_ALIGN
((
NewMem
->
Size
)));

227 #ifde‡
DEBUG_HEAP


228 
	`¥ötf
(" = %lx\n", ()
Rëu∫Mem
);

230  
Rëu∫Mem
;

232 
	}
}

235 
	$HópFªeMem
(*
Mem
)

237 #ifde‡
USE_MALLOC_HEAP


238 
	`‰ì
(
Mem
);

240 
AŒocNode
 *
MemNode
 = (AŒocNodê*)((*)
Mem
 - 
	`MEM_ALIGN
((MemNode->
Size
)));

241 
Buckë
 = 
MemNode
->
Size
 >> 2;

243 #ifde‡
DEBUG_HEAP


244 
	`¥ötf
("HópFªeMem(0x%lx)\n", ()
Mem
);

248 i‡(
Mem
 =
NULL
)

251 i‡((*)
MemNode
 =
HópBŸtom
)

254 #ifde‡
DEBUG_HEAP


255 
	`¥ötf
("‰ìög %d from bŸtom o‡hóp\n", 
MemNode
->
Size
);

257 
HópBŸtom
 = (*)((*)HópBŸtom + 
MemNode
->
Size
);

258 #ifde‡
DEBUG_HEAP


259 
	`ShowBigLi°
();

262 i‡(
Buckë
 < 
FREELIST_BUCKETS
)

265 #ifde‡
DEBUG_HEAP


266 
	`¥ötf
("‰ìög %dÅÿbuckë\n", 
MemNode
->
Size
);

269 *(
AŒocNode
 **)
MemNode
 = 
FªeLi°Buckë
[
Buckë
];

270 
FªeLi°Buckë
[
Buckë
] = (
AŒocNode
 *)
MemNode
;

275 #ifde‡
DEBUG_HEAP


276 
	`¥ötf
("‰ìög %lx:%dÅÿ‰ìli°\n", ()
Mem
, 
MemNode
->
Size
);

279 
MemNode
->
NextFªe
 = 
FªeLi°Big
;

280 
FªeLi°Big
 = 
MemNode
;

281 #ifde‡
DEBUG_HEAP


282 
	`ShowBigLi°
();

286 
	}
}

	@include.c

1 
	~"picoc.h
"

2 
	~"öãΩªãr.h
"

4 #i‚de‡
NO_HASH_INCLUDE


7 
	sIn˛udeLibøry


9 *
	mIn˛udeName
;

10 (*
	mSëupFun˘i⁄
)();

11 
LibøryFun˘i⁄
 *
	mFuncLi°
;

12 c⁄° *
	mSëupCSour˚
;

13 
In˛udeLibøry
 *
	mNextLib
;

16 
In˛udeLibøry
 *
	gIn˛udeLibLi°
 = 
NULL
;

20 
	$In˛udeInô
()

22 #i‚de‡
BUILTIN_MINI_STDLIB


25 #i‚de‡
NO_FP


29 
	`In˛udeRegi°î
("°dio.h", &
StdioSëupFunc
, &
StdioFun˘i⁄s
[0], 
StdioDefs
);

35 
	}
}

38 
	$In˛udeCÀ™up
()

40 
In˛udeLibøry
 *
ThisIn˛ude
 = 
In˛udeLibLi°
;

41 
In˛udeLibøry
 *
NextIn˛ude
;

43 
ThisIn˛ude
 !
NULL
)

45 
NextIn˛ude
 = 
ThisIn˛ude
->
NextLib
;

46 
	`HópFªeMem
(
ThisIn˛ude
);

47 
ThisIn˛ude
 = 
NextIn˛ude
;

50 
In˛udeLibLi°
 = 
NULL
;

51 
	}
}

54 
In˛udeRegi°î
(c⁄° *
In˛udeName
, (*
SëupFun˘i⁄
)(), 
LibøryFun˘i⁄
 *
FuncLi°
, c⁄° *
SëupCSour˚
)

56 
In˛udeLibøry
 *
NewLib
 = 
	`HópAŒocMem
((IncludeLibrary));

57 
NewLib
->
In˛udeName
 = 
	`TabÀSåRegi°î
(IncludeName);

58 
NewLib
->
SëupFun˘i⁄
 = SetupFunction;

59 
NewLib
->
FuncLi°
 = FuncList;

60 
NewLib
->
SëupCSour˚
 = SetupCSource;

61 
NewLib
->
NextLib
 = 
In˛udeLibLi°
;

62 
In˛udeLibLi°
 = 
NewLib
;

63 
	}
}

66 
	$PicocIn˛udeAŒSy°emHódîs
()

68 
In˛udeLibøry
 *
ThisIn˛ude
 = 
In˛udeLibLi°
;

70 ; 
ThisIn˛ude
 !
NULL
; ThisIn˛udêThisIn˛ude->
NextLib
)

71 
	`In˛udeFûe
(
ThisIn˛ude
->
In˛udeName
);

72 
	}
}

75 
	$In˛udeFûe
(*
FûeName
)

77 
In˛udeLibøry
 *
LIn˛ude
;

81 
LIn˛ude
 = 
In˛udeLibLi°
; LIn˛udê!
NULL
; LIn˛udêLIn˛ude->
NextLib
)

84 i‡(
	`°rcmp
(
LIn˛ude
->
In˛udeName
, 
FûeName
) == 0)

87 i‡(!
	`V¨übÀDeföed
(
FûeName
))

89 
	`V¨übÀDeföe
(
NULL
, 
FûeName
, NULL, &
VoidTy≥
, 
FALSE
);

92 i‡(
LIn˛ude
->
SëupFun˘i⁄
 !
NULL
){

93 (*
LIn˛ude
->
SëupFun˘i⁄
)();

98 i‡(
LIn˛ude
->
SëupCSour˚
 !
NULL
){

99 
	`PicocP¨£
(
FûeName
, 
LIn˛ude
->
SëupCSour˚
, 
	`°æí
(LIn˛ude->SëupCSour˚), 
TRUE
, TRUE, 
FALSE
);

103 i‡(
LIn˛ude
->
FuncLi°
 !
NULL
){

104 
	`LibøryAdd
(&
GlobÆTabÀ
, 
FûeName
, 
LIn˛ude
->
FuncLi°
);

113 
	`PicocPœtf‹mSˇnFûe
(
FûeName
);

114 
	}
}

	@interpreter.h

1 #i‚de‡
INTERPRETER_H


2 
	#INTERPRETER_H


	)

4 
	~"∂©f‹m.h
"

7 #i‚de‡
TRUE


8 
	#TRUE
 1

	)

9 
	#FALSE
 0

	)

12 #i‚de‡
NULL


13 
	#NULL
 0

	)

16 #i‚de‡
mö


17 
	#mö
(
x
,
y
Ë(((x)<(y))?(x):(y))

	)

20 
	#MEM_ALIGN
(
x
Ë(((xË+ (
ALIGN_TYPE
Ë- 1Ë& ~((ALIGN_TYPE)-1))

	)

22 
	#GETS_BUF_MAX
 256

	)

25 #ifde‡
BUILTIN_MINI_STDLIB


26 
OuçutSåóm
 
	tIOFILE
;

28 
FILE
 
	tIOFILE
;

32 #i‚de‡
NO_FP


33 
	#IS_FP
(
v
Ë((v)->
Typ
->
Ba£
 =
Ty≥FP
)

	)

34 
	#FP_VAL
(
v
Ë((v)->
VÆ
->
FP
)

	)

36 
	#IS_FP
(
v
Ë0

	)

37 
	#FP_VAL
(
v
Ë0

	)

40 
	#IS_POINTER_COERCIBLE
(
v
, 
≠
Ë(◊pË? ((v)->
Typ
->
Ba£
 =
Ty≥Poöãr
Ë: 0)

	)

41 
	#POINTER_COERCE
(
v
Ë(()(v)->
VÆ
->
Poöãr
)

	)

43 
	#IS_INTEGER_NUMERIC_TYPE
(
t
Ë(—)->
Ba£
 >
Ty≥I¡
 && (t)->Ba£ <
Ty≥Unsig√dL⁄g
)

	)

44 
	#IS_INTEGER_NUMERIC
(
v
Ë
	`IS_INTEGER_NUMERIC_TYPE
((v)->
Typ
)

	)

45 
	#IS_NUMERIC_COERCIBLE
(
v
Ë(
	`IS_INTEGER_NUMERIC
(vË|| 
	`IS_FP
(v))

	)

46 
	#IS_NUMERIC_COERCIBLE_PLUS_POINTERS
(
v
,
≠
Ë(
	`IS_NUMERIC_COERCIBLE
(vË|| 
	`IS_POINTER_COERCIBLE
(v,≠))

	)

49 
	gTabÀ
;

52 
	eLexTokí


54  
	mTokíN⁄e
,

55  
	mTokíComma
,

56  
	mTokíAssign
, 
	mTokíAddAssign
, 
	mTokíSubåa˘Assign
, 
	mTokíMu…ùlyAssign
, 
	mTokíDivideAssign
, 
	mTokíModulusAssign
,

57  
	mTokíShi·Le·Assign
, 
	mTokíShi·RightAssign
, 
	mTokíArôhmëicAndAssign
, 
	mTokíArôhmëicOrAssign
, 
	mTokíArôhmëicEx‹Assign
,

58  
	mTokíQue°i⁄M¨k
, 
	mTokíCﬁ⁄
,

59  
	mTokíLogiˇlOr
,

60  
	mTokíLogiˇlAnd
,

61  
	mTokíArôhmëicOr
,

62  
	mTokíArôhmëicEx‹
,

63  
	mTokíAm≥rßnd
,

64  
	mTokíEquÆ
, 
	mTokíNŸEquÆ
,

65  
	mTokíLessTh™
, 
	mTokíGª©îTh™
, 
	mTokíLessEquÆ
, 
	mTokíGª©îEquÆ
,

66  
	mTokíShi·Le·
, 
	mTokíShi·Right
,

67  
	mTokíPlus
, 
	mTokíMöus
,

68  
	mTokíA°îisk
, 
	mTokíSœsh
, 
	mTokíModulus
,

69  
	mTokíIn¸emít
, 
	mTokíDe¸emít
, 
	mTokíU«ryNŸ
, 
	mTokíU«ryEx‹
, 
	mTokíSizeof
, 
	mTokíCa°
,

70  
	mTokíLe·Squ¨eBøckë
, 
	mTokíRightSqu¨eBøckë
, 
	mTokíDŸ
, 
	mTokíAºow
,

71  
	mTokíO≥nBøckë
, 
	mTokíClo£Bøckë
,

72  
	mTokíIdítifõr
, 
	mTokíI¡egîC⁄°™t
, 
	mTokíFPC⁄°™t
, 
	mTokíSåögC⁄°™t
, 
	mTokíCh¨a˘îC⁄°™t
,

73  
	mTokíSemicﬁ⁄
, 
	mTokíEŒùsis
,

74  
	mTokíLe·Bø˚
, 
	mTokíRightBø˚
,

75  
	mTokíI¡Ty≥
, 
	mTokíCh¨Ty≥
, 
	mTokíFlﬂtTy≥
, 
	mTokíDoubÀTy≥
, 
	mTokíVoidTy≥
, 
	mTokíEnumTy≥
,

76  
	mTokíL⁄gTy≥
, 
	mTokíSig√dTy≥
, 
	mTokíSh‹tTy≥
, 
	mTokíSèticTy≥
, 
	mTokíAutoTy≥
, 
	mTokíRegi°îTy≥
, 
	mTokíExã∫Ty≥
, 
	mTokíSåu˘Ty≥
, 
	mTokíUni⁄Ty≥
, 
	mTokíUnsig√dTy≥
, 
	mTokíTy≥def
,

77  
	mTokíC⁄töue
, 
	mTokíDo
, 
	mTokíEl£
, 
	mTokíF‹
, 
	mTokíGŸo
, 
	mTokíIf
, 
	mTokíWhûe
, 
	mTokíBªak
, 
	mTokíSwôch
, 
	mTokíCa£
, 
	mTokíDeÁu…
, 
	mTokíRëu∫
,

78  
	mTokíHashDeföe
, 
	mTokíHashIn˛ude
, 
	mTokíHashIf
, 
	mTokíHashIfdef
, 
	mTokíHashI‚def
, 
	mTokíHashEl£
, 
	mTokíHashEndif
,

79  
	mTokíNew
, 
	mTokíDñëe
,

80  
	mTokíO≥nMa¸oBøckë
,

81  
	mTokíEOF
, 
	mTokíEndOfLöe
, 
	mTokíEndOfFun˘i⁄


85 
	sAŒocNode


87 
	mSize
;

88 
AŒocNode
 *
	mNextFªe
;

92 
	eRunMode


94 
	mRunModeRun
,

95 
	mRunModeSkù
,

96 
	mRunModeRëu∫
,

97 
	mRunModeCa£Sórch
,

98 
	mRunModeBªak
,

99 
	mRunModeC⁄töue
,

100 
	mRunModeGŸo


104 
	sP¨£Sèã


106 c⁄° *
	mPos
;

107 c⁄° *
	mFûeName
;

108 
	mLöe
;

109 
	mCh¨a˘îPos
;

110 
RunMode
 
	mMode
;

111 
	mSórchLabñ
;

112 c⁄° *
	mSórchGŸoLabñ
;

113 
	mHashIfLevñ
;

114 
	mHashIfEvÆu©eToLevñ
;

115 c⁄° *
	mSour˚Text
;

119 
	eBa£Ty≥


121 
	mTy≥Void
,

122 
	mTy≥I¡
,

123 
	mTy≥Sh‹t
,

124 
	mTy≥Ch¨
,

125 
	mTy≥L⁄g
,

126 
	mTy≥Unsig√dI¡
,

127 
	mTy≥Unsig√dSh‹t
,

128 
	mTy≥Unsig√dL⁄g
,

129 #i‚de‡
NO_FP


130 
	mTy≥FP
,

132 
	mTy≥Fun˘i⁄
,

133 
	mTy≥Ma¸o
,

134 
	mTy≥Poöãr
,

135 
	mTy≥Aºay
,

136 
	mTy≥Såu˘
,

137 
	mTy≥Uni⁄
,

138 
	mTy≥Enum
,

139 
	mTy≥GŸoLabñ
,

140 
	mTy≥_Ty≥


144 
	sVÆueTy≥


146 
Ba£Ty≥
 
	mBa£
;

147 
	mAºaySize
;

148 
	mSizeof
;

149 
	mAlignByãs
;

150 c⁄° *
	mIdítifõr
;

151 
VÆueTy≥
 *
	mFromTy≥
;

152 
VÆueTy≥
 *
	mDîivedTy≥Li°
;

153 
VÆueTy≥
 *
	mNext
;

154 
TabÀ
 *
	mMembîs
;

155 
	mOnHóp
;

156 
	mSèticQuÆifõr
;

160 
	sFuncDef


162 
VÆueTy≥
 *
	mRëu∫Ty≥
;

163 
	mNumP¨ams
;

164 
	mV¨Args
;

165 
VÆueTy≥
 **
	mP¨amTy≥
;

166 **
	mP¨amName
;

167 (*
	mI¡rösic
)();

168 
P¨£Sèã
 
	mBody
;

172 
	sMa¸oDef


174 
	mNumP¨ams
;

175 **
	mP¨amName
;

176 
P¨£Sèã
 
	mBody
;

180 
	uAnyVÆue


182 
	mCh¨a˘î
;

183 
	mSh‹tI¡egî
;

184 
	mI¡egî
;

185 
	mL⁄gI¡egî
;

186 
	mUnsig√dSh‹tI¡egî
;

187 
	mUnsig√dI¡egî
;

188 
	mUnsig√dL⁄gI¡egî
;

189 *
	mIdítifõr
;

190 
	mAºayMem
[2];

191 
VÆueTy≥
 *
	mTyp
;

192 
FuncDef
 
	mFuncDef
;

193 
Ma¸oDef
 
	mMa¸oDef
;

194 #i‚de‡
NO_FP


195 
	mFP
;

197 *
	mPoöãr
;

200 
	sVÆue


202 
VÆueTy≥
 *
	mTyp
;

203 
AnyVÆue
 *
	mVÆ
;

204 
VÆue
 *
	mLVÆueFrom
;

205 
	mVÆOnHóp
;

206 
	mVÆOnSèck
;

207 
	mIsLVÆue
;

211 
	sTabÀE¡ry


213 
TabÀE¡ry
 *
	mNext
;

214 c⁄° *
	mDe˛FûeName
;

215 
	mDe˛Löe
;

216 
	mDe˛Cﬁumn
;

218 
	uTabÀE¡ryPaylﬂd


220 
	sVÆueE¡ry


222 *
	mKey
;

223 
VÆue
 *
	mVÆ
;

224 } 
	mv
;

226 
	mKey
[1];

227 } 
	mp
;

230 
	sTabÀ


232 
	mSize
;

233 
	mOnHóp
;

234 
TabÀE¡ry
 **
	mHashTabÀ
;

238 
	sSèckFøme


240 
P¨£Sèã
 
	mRëu∫P¨£r
;

241 c⁄° *
	mFuncName
;

242 
VÆue
 *
	mRëu∫VÆue
;

243 
VÆue
 **
	mP¨amëî
;

244 
	mNumP¨ams
;

245 
TabÀ
 
	mLoˇlTabÀ
;

246 
TabÀE¡ry
 *
	mLoˇlHashTabÀ
[
LOCAL_TABLE_SIZE
];

247 
SèckFøme
 *
	mPªviousSèckFøme
;

251 
	eLexMode


253 
	mLexModeN‹mÆ
,

254 
	mLexModeHashIn˛ude
,

255 
	mLexModeHashDeföe
,

256 
	mLexModeHashDeföeS∑˚
,

257 
	mLexModeHashDeföeS∑˚Idít


260 
	sLexSèã


262 c⁄° *
	mPos
;

263 c⁄° *
	mEnd
;

264 c⁄° *
	mFûeName
;

265 
	mLöe
;

266 
	mCh¨a˘îPos
;

267 c⁄° *
	mSour˚Text
;

268 
LexMode
 
	mMode
;

269 
	mEmôExåaNewlöes
;

273 
	sLibøryFun˘i⁄


275 (*
	mFunc
)(
P¨£Sèã
 *
	mP¨£r
, 
	mVÆue
 *, Value **, );

276 c⁄° *
	mPrŸŸy≥
;

280 
	uOuçutSåómInfo


282 
	sSåögOuçutSåóm


284 
P¨£Sèã
 *
	mP¨£r
;

285 *
	mWrôePos
;

286 } 
	mSå
;

290 
	tCh¨Wrôî
(, 
	tOuçutSåómInfo
 *);

293 
	sOuçutSåóm


295 
Ch¨Wrôî
 *
	mPutch
;

296 
OuçutSåómInfo
 
	mi
;

300 
	eP¨£Resu…
 { 
	mP¨£Resu…EOF
, 
	mP¨£Resu…Eº‹
, 
	mP¨£Resu…Ok
 };

303 *
HópSèckT›
;

304 
TabÀ
 
GlobÆTabÀ
;

305 
SèckFøme
 *
T›SèckFøme
;

306 
VÆueTy≥
 
UbîTy≥
;

307 
VÆueTy≥
 
I¡Ty≥
;

308 
VÆueTy≥
 
Ch¨Ty≥
;

309 #i‚de‡
NO_FP


310 
VÆueTy≥
 
FPTy≥
;

312 
VÆueTy≥
 
VoidTy≥
;

313 
VÆueTy≥
 
Ty≥Ty≥
;

314 
VÆueTy≥
 
Fun˘i⁄Ty≥
;

315 
VÆueTy≥
 
Ma¸oTy≥
;

316 
VÆueTy≥
 
GŸoLabñTy≥
;

317 
VÆueTy≥
 *
Ch¨PåTy≥
;

318 
VÆueTy≥
 *
Ch¨PåPåTy≥
;

319 
VÆueTy≥
 *
Ch¨AºayTy≥
;

320 
VÆueTy≥
 *
VoidPåTy≥
;

321 *
SåEm±y
;

322 
PoöãrVÆue
 
NULLPoöãr
;

323 
LibøryFun˘i⁄
 
CLibøry
[];

324 
LibøryFun˘i⁄
 
Pœtf‹mLibøry
[];

325 
IOFILE
 *
CStdOut
;

328 
TabÀInô
();

329 *
TabÀSåRegi°î
(c⁄° *
Så
);

330 *
TabÀSåRegi°î2
(c⁄° *
Så
, 
Lí
);

331 
TabÀInôTabÀ
(
TabÀ
 *
Tbl
, 
TabÀE¡ry
 **
HashTabÀ
, 
Size
, 
OnHóp
);

332 
TabÀSë
(
TabÀ
 *
Tbl
, *
Key
, 
VÆue
 *
VÆ
, c⁄° *
De˛FûeName
, 
De˛Löe
, 
De˛Cﬁumn
);

333 
TabÀGë
(
TabÀ
 *
Tbl
, c⁄° *
Key
, 
VÆue
 **
VÆ
, c⁄° **
De˛FûeName
, *
De˛Löe
, *
De˛Cﬁumn
);

334 
VÆue
 *
TabÀDñëe
(
TabÀ
 *
Tbl
, c⁄° *
Key
);

335 *
TabÀSëIdítifõr
(
TabÀ
 *
Tbl
, c⁄° *
Idít
, 
IdítLí
);

336 
TabÀSåFªe
();

339 
LexInô
();

340 
LexCÀ™up
();

341 *
LexA«ly£
(c⁄° *
FûeName
, c⁄° *
Sour˚
, 
Sour˚Lí
, *
TokíLí
);

342 
LexInôP¨£r
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Sour˚Text
, *
TokíSour˚
, c⁄° *
FûeName
, 
RunIt
);

343 
LexTokí
 
LexGëTokí
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 **VÆue, 
IncPos
);

344 
LexTokí
 
LexRawPìkTokí
(
P¨£Sèã
 *
P¨£r
);

345 
LexToEndOfLöe
(
P¨£Sèã
 *
P¨£r
);

346 *
LexC›yTokís
(
P¨£Sèã
 *
SèπP¨£r
, P¨£Sèã *
EndP¨£r
);

347 
LexI¡îa˘iveCÀ¨
(
P¨£Sèã
 *
P¨£r
);

348 
LexI¡îa˘iveCom∂ëed
(
P¨£Sèã
 *
P¨£r
);

349 
LexI¡îa˘iveSèãmítProm±
();

355 
P¨£Resu…
 
P¨£Sèãmít
(
P¨£Sèã
 *
P¨£r
, 
CheckTøûögSemicﬁ⁄
);

356 
VÆue
 *
P¨£Fun˘i⁄Deföôi⁄
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
Rëu∫Ty≥
, *
Idítifõr
);

357 
P¨£CÀ™up
();

358 
P¨£rC›yPos
(
P¨£Sèã
 *
To
, P¨£Sèã *
From
);

359 
P¨£rC›y
(
P¨£Sèã
 *
To
, P¨£Sèã *
From
);

362 
Ex¥essi⁄P¨£
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 **
Resu…
);

363 
Ex¥essi⁄P¨£I¡
(
P¨£Sèã
 *
P¨£r
);

364 
Ex¥essi⁄Assign
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
De°VÆue
, VÆuê*
Sour˚VÆue
, 
F‹˚
, c⁄° *
FuncName
, 
P¨amNo
, 
AŒowPoöãrC€rci⁄
);

365 
Ex¥essi⁄C€r˚I¡egî
(
VÆue
 *
VÆ
);

366 
Ex¥essi⁄C€r˚Unsig√dI¡egî
(
VÆue
 *
VÆ
);

367 #i‚de‡
NO_FP


368 
Ex¥essi⁄C€r˚FP
(
VÆue
 *
VÆ
);

372 
Ty≥Inô
();

373 
Ty≥CÀ™up
();

374 
Ty≥Size
(
VÆueTy≥
 *
Typ
, 
AºaySize
, 
Com∑˘
);

375 
Ty≥SizeVÆue
(
VÆue
 *
VÆ
, 
Com∑˘
);

376 
Ty≥SèckSizeVÆue
(
VÆue
 *
VÆ
);

377 
Ty≥La°Ac˚ssibÀOff£t
(
VÆue
 *
VÆ
);

378 
Ty≥P¨£Fr⁄t
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 **
Typ
, *
IsSètic
);

379 
Ty≥P¨£IdítP¨t
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
BasicTyp
, VÆueTy≥ **
Typ
, **
Idítifõr
);

380 
Ty≥P¨£
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 **
Typ
, **
Idítifõr
, *
IsSètic
);

381 
VÆueTy≥
 *
Ty≥GëM©chög
(
P¨£Sèã
 *
P¨£r
, VÆueTy≥ *
P¨ítTy≥
, 
Ba£Ty≥
 
Ba£
, 
AºaySize
, c⁄° *
Idítifõr
, 
AŒowDu∂iˇãs
);

382 
VÆueTy≥
 *
Ty≥Cª©eO∑queSåu˘
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Såu˘Name
, 
Size
);

385 
HópInô
(
SèckSize
);

386 
HópCÀ™up
();

387 *
HópAŒocSèck
(
Size
);

388 
HópP›Sèck
(*
Addr
, 
Size
);

389 
HópU≈›Sèck
(
Size
);

390 
HópPushSèckFøme
();

391 
HópP›SèckFøme
();

392 *
HópAŒocMem
(
Size
);

393 
HópFªeMem
(*
Mem
);

396 
V¨übÀInô
();

397 
V¨übÀCÀ™up
();

398 
V¨übÀFªe
(
VÆue
 *
VÆ
);

399 
V¨übÀTabÀCÀ™up
(
TabÀ
 *
HashTabÀ
);

400 *
V¨übÀAŒoc
(
P¨£Sèã
 *
P¨£r
, 
Size
, 
OnHóp
);

401 
V¨übÀSèckP›
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
V¨
);

402 
VÆue
 *
V¨übÀAŒocVÆueAndD©a
(
P¨£Sèã
 *
P¨£r
, 
D©aSize
, 
IsLVÆue
, VÆuê*
LVÆueFrom
, 
OnHóp
);

403 
VÆue
 *
V¨übÀAŒocVÆueAndC›y
(
P¨£Sèã
 *
P¨£r
, VÆuê*
FromVÆue
, 
OnHóp
);

404 
VÆue
 *
V¨übÀAŒocVÆueFromTy≥
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
Typ
, 
IsLVÆue
, VÆuê*
LVÆueFrom
, 
OnHóp
);

405 
VÆue
 *
V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
Typ
, 
AnyVÆue
 *
FromVÆue
, 
IsLVÆue
, VÆuê*
LVÆueFrom
);

406 
VÆue
 *
V¨übÀAŒocVÆueSh¨ed
(
P¨£Sèã
 *
P¨£r
, VÆuê*
FromVÆue
);

407 
VÆue
 *
V¨übÀDeföe
(
P¨£Sèã
 *
P¨£r
, *
Idít
, VÆuê*
InôVÆue
, 
VÆueTy≥
 *
Typ
, 
MakeWrôabÀ
);

408 
VÆue
 *
V¨übÀDeföeButIgn‹eIdítiˇl
(
P¨£Sèã
 *
P¨£r
, *
Idít
, 
VÆueTy≥
 *
Typ
, 
IsSètic
, *
Fú°Visô
);

409 
V¨übÀDeföed
(c⁄° *
Idít
);

410 
V¨übÀGë
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Idít
, 
VÆue
 **
LVÆ
);

411 
V¨übÀDeföePœtf‹mV¨
(
P¨£Sèã
 *
P¨£r
, *
Idít
, 
VÆueTy≥
 *
Typ
, 
AnyVÆue
 *
FromVÆue
, 
IsWrôabÀ
);

412 
V¨übÀSèckFømeAdd
(
P¨£Sèã
 *
P¨£r
, c⁄° *
FuncName
, 
NumP¨ams
);

413 
V¨übÀSèckFømeP›
(
P¨£Sèã
 *
P¨£r
);

414 
VÆue
 *
V¨übÀSåögLôîÆGë
(*
Idít
);

415 
V¨übÀSåögLôîÆDeföe
(*
Idít
, 
VÆue
 *
VÆ
);

416 *
V¨übÀDîe„ªn˚Poöãr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
PoöãrVÆue
, VÆuê**
DîefVÆ
, *
DîefOff£t
, 
VÆueTy≥
 **
DîefTy≥
, *
DîefIsLVÆue
);

419 
BasicIOInô
();

420 
LibøryInô
();

421 
LibøryAdd
(
TabÀ
 *
GlobÆTabÀ
, c⁄° *
LibøryName
, 
LibøryFun˘i⁄
 *
FuncLi°
);

422 
CLibøryInô
();

423 
PrötCh
(
OutCh
, 
IOFILE
 *
Såóm
);

424 
PrötSim∂eI¡
(
Num
, 
IOFILE
 *
Såóm
);

425 
PrötI¡
(
Num
, 
FõldWidth
, 
ZîoPad
, 
Le·Ju°ify
, 
IOFILE
 *
Såóm
);

426 
PrötSå
(c⁄° *
Så
, 
IOFILE
 *
Såóm
);

427 
PrötFP
(
Num
, 
IOFILE
 *
Såóm
);

428 
PrötTy≥
(
VÆueTy≥
 *
Typ
, 
IOFILE
 *
Såóm
);

429 
LibPrötf
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
);

439 
ProgømFaû
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Mesßge
, ...);

440 
AssignFaû
(
P¨£Sèã
 *
P¨£r
, c⁄° *
F‹m©
, 
VÆueTy≥
 *
Ty≥1
, VÆueTy≥ *
Ty≥2
, 
Num1
, 
Num2
, c⁄° *
FuncName
, 
P¨amNo
);

441 
LexFaû
(
LexSèã
 *
Lexî
, c⁄° *
Mesßge
, ...);

442 
Pœtf‹mCÀ™up
();

443 *
Pœtf‹mGëLöe
(*
Buf
, 
MaxLí
, c⁄° *
Prom±
);

444 
Pœtf‹mGëCh¨a˘î
();

445 
Pœtf‹mPutc
(
OutCh
, 
OuçutSåómInfo
 *);

446 
Pœtf‹mEº‹Pªfix
(
P¨£Sèã
 *
P¨£r
);

447 
Pœtf‹mPrötf
(c⁄° *
F‹m©
, ...);

448 
Pœtf‹mVPrötf
(c⁄° *
F‹m©
, 
va_li°
 
Args
);

449 
Pœtf‹mExô
(
ExôVÆ
);

450 *
Pœtf‹mMakeTempName
(*
TempNameBuf„r
);

451 
Pœtf‹mLibøryInô
();

454 
In˛udeInô
();

455 
In˛udeCÀ™up
();

456 
In˛udeRegi°î
(c⁄° *
In˛udeName
, (*
SëupFun˘i⁄
)(), 
LibøryFun˘i⁄
 *
FuncLi°
, c⁄° *
SëupCSour˚
);

457 
	`In˛udeFûe
(*
Fûíame
);

462 c⁄° 
StdioDefs
[];

463 
LibøryFun˘i⁄
 
StdioFun˘i⁄s
[];

464 
	`StdioSëupFunc
();

467 
LibøryFun˘i⁄
 
M©hFun˘i⁄s
[];

468 
	`M©hSëupFunc
();

471 
LibøryFun˘i⁄
 
SåögFun˘i⁄s
[];

472 
	`SåögSëupFunc
();

475 
LibøryFun˘i⁄
 
StdlibFun˘i⁄s
[];

476 
	`StdlibSëupFunc
();

479 c⁄° 
StdTimeDefs
[];

480 
LibøryFun˘i⁄
 
StdTimeFun˘i⁄s
[];

481 
	`StdTimeSëupFunc
();

484 
	`StdEºnoSëupFunc
();

487 
LibøryFun˘i⁄
 
StdCty≥Fun˘i⁄s
[];

490 c⁄° 
StdboﬁDefs
[];

491 
	`StdboﬁSëupFunc
();

494 c⁄° 
Uni°dDefs
[];

495 
LibøryFun˘i⁄
 
Uni°dFun˘i⁄s
[];

496 
	`Uni°dSëupFunc
();

	@lex.c

1 
	~"öãΩªãr.h
"

2 
	~<m©h.h
>

5 
	#ißÕha
(
c
Ë(((cË>'a' && (cË<'z'Ë|| ((cË>'A' && (cË<'Z'))

	)

6 
	#isdigô
(
c
Ë((cË>'0' && (cË<'9')

	)

7 
	#iß um
(
c
Ë(
	`ißÕha
(cË|| 
	`isdigô
(c))

	)

8 
	#is•a˚
(
c
Ë((cË=' ' || (cË='\t' || (cË='\r' || (cË='\n')

	)

10 
	#isCid°¨t
(
c
Ë(
	`ißÕha
(cË|| (c)=='_' || (c)=='#')

	)

11 
	#isCidít
(
c
Ë(
	`iß um
(cË|| (c)=='_')

	)

13 
	#IS_HEX_ALPHA_DIGIT
(
c
Ë(((cË>'a' && (cË<'f'Ë|| ((cË>'A' && (cË<'F'))

	)

14 
	#IS_BASE_DIGIT
(
c
,
b
Ë(((cË>'0' && (cË< '0' + (((b)<10)?(b):10)Ë|| (((bË> 10Ë? 
	`IS_HEX_ALPHA_DIGIT
(cË: 
FALSE
))

	)

15 
	#GET_BASE_DIGIT
(
c
Ë(((cË<'9'Ë? ((cË- '0'Ë: (((cË<'F'Ë? ((cË- 'A' + 10Ë: ((cË- 'a' + 10)))

	)

17 
	#NEXTIS
(
c
,
x
,
y
Ë{ i‡(
NextCh¨
 =(c)Ë{ 
	`LEXER_INC
(
Lexî
); 
GŸTokí
 = (x); } GŸTokí = (y); }

	)

18 
	#NEXTIS3
(
c
,
x
,
d
,
y
,
z
Ë{ i‡(
NextCh¨
 =(c)Ë{ 
	`LEXER_INC
(
Lexî
); 
GŸTokí
 = (x); } 
	`NEXTIS
(d,y,zË}

	)

19 
	#NEXTIS4
(
c
,
x
,
d
,
y
,
e
,
z
,
a
Ë{ i‡(
NextCh¨
 =(c)Ë{ 
	`LEXER_INC
(
Lexî
); 
GŸTokí
 = (x); } 
	`NEXTIS3
(d,y,e,z,aË}

	)

20 
	#NEXTIS3PLUS
(
c
,
x
,
d
,
y
,
e
,
z
,
a
Ë{ i‡(
NextCh¨
 =(c)Ë{ 
	`LEXER_INC
(
Lexî
); 
GŸTokí
 = (x); } i‡(NextCh¨ =(d)Ë{ i‡(Lexî->
Pos
[1] =”)Ë{ 
	`LEXER_INCN
(Lexî, 2); GŸTokí = (z); } { LEXER_INC(Lexî); GŸTokí = (y); } } GŸTokí = (a); }

	)

21 
	#NEXTISEXACTLY3
(
c
,
d
,
y
,
z
Ë{ i‡(
NextCh¨
 =(cË&& 
Lexî
->
Pos
[1] =(d)Ë{ 
	`LEXER_INCN
(Lexî, 2); 
GŸTokí
 = (y); } GŸTokí = (z); }

	)

23 
	#LEXER_INC
(
l
Ë–÷)->
Pos
++, (l)->
Ch¨a˘îPos
++ )

	)

24 
	#LEXER_INCN
(
l
, 
n
Ë–÷)->
Pos
+=“), (l)->
Ch¨a˘îPos
+=“Ë)

	)

25 
	#TOKEN_DATA_OFFSET
 2

	)

27 
	#MAX_CHAR_VALUE
 255

	)

29 
AnyVÆue
 
	gLexAnyVÆue
;

30 
VÆue
 
	gLexVÆue
 = { 
Ty≥Void
, &
LexAnyVÆue
, 
FALSE
, FALSE };

32 
	sRe£rvedW‹d


34 c⁄° *
	mW‹d
;

35 
LexTokí
 
	mTokí
;

36 c⁄° *
	mSh¨edW‹d
;

39 
Re£rvedW‹d
 
	gRe£rvedW‹ds
[] =

41 { "#deföe", 
TokíHashDeföe
, 
NULL
 },

42 { "#ñ£", 
TokíHashEl£
, 
NULL
 },

43 { "#ídif", 
TokíHashEndif
, 
NULL
 },

44 { "#if", 
TokíHashIf
, 
NULL
 },

45 { "#ifdef", 
TokíHashIfdef
, 
NULL
 },

46 { "#i‚def", 
TokíHashI‚def
, 
NULL
 },

47 { "#ö˛ude", 
TokíHashIn˛ude
, 
NULL
 },

48 { "auto", 
TokíAutoTy≥
, 
NULL
 },

49 { "bªak", 
TokíBªak
, 
NULL
 },

50 { "ˇ£", 
TokíCa£
, 
NULL
 },

51 { "ch¨", 
TokíCh¨Ty≥
, 
NULL
 },

52 { "c⁄töue", 
TokíC⁄töue
, 
NULL
 },

53 { "deÁu…", 
TokíDeÁu…
, 
NULL
 },

54 { "dñëe", 
TokíDñëe
, 
NULL
 },

55 { "do", 
TokíDo
, 
NULL
 },

56 #i‚de‡
NO_FP


57 { "doubÀ", 
TokíDoubÀTy≥
, 
NULL
 },

59 { "ñ£", 
TokíEl£
, 
NULL
 },

60 { "íum", 
TokíEnumTy≥
, 
NULL
 },

61 { "exã∫", 
TokíExã∫Ty≥
, 
NULL
 },

62 #i‚de‡
NO_FP


63 { "Êﬂt", 
TokíFlﬂtTy≥
, 
NULL
 },

65 { "f‹", 
TokíF‹
, 
NULL
 },

66 { "gŸo", 
TokíGŸo
, 
NULL
 },

67 { "if", 
TokíIf
, 
NULL
 },

68 { "öt", 
TokíI¡Ty≥
, 
NULL
 },

69 { "l⁄g", 
TokíL⁄gTy≥
, 
NULL
 },

70 { "√w", 
TokíNew
, 
NULL
 },

71 { "ªgi°î", 
TokíRegi°îTy≥
, 
NULL
 },

72 { "ªtu∫", 
TokíRëu∫
, 
NULL
 },

73 { "sh‹t", 
TokíSh‹tTy≥
, 
NULL
 },

74 { "sig√d", 
TokíSig√dTy≥
, 
NULL
 },

75 { "sizeof", 
TokíSizeof
, 
NULL
 },

76 { "°©ic", 
TokíSèticTy≥
, 
NULL
 },

77 { "°ru˘", 
TokíSåu˘Ty≥
, 
NULL
 },

78 { "swôch", 
TokíSwôch
, 
NULL
 },

79 { "ty≥def", 
TokíTy≥def
, 
NULL
 },

80 { "uni⁄", 
TokíUni⁄Ty≥
, 
NULL
 },

81 { "unsig√d", 
TokíUnsig√dTy≥
, 
NULL
 },

82 { "void", 
TokíVoidTy≥
, 
NULL
 },

83 { "whûe", 
TokíWhûe
, 
NULL
 }

87 
	sTokíLöe


89 
TokíLöe
 *
	mNext
;

90 *
	mTokís
;

91 
	mNumByãs
;

94 
TokíLöe
 *
	gI¡îa˘iveHód
 = 
NULL
;

95 
TokíLöe
 *
	gI¡îa˘iveTaû
 = 
NULL
;

96 
TokíLöe
 *
	gI¡îa˘iveCuºítLöe
 = 
NULL
;

97 
	gLexU£SèãmítProm±
 = 
FALSE
;

101 
	$LexInô
()

103 
Cou¡
;

105 
Cou¡
 = 0; Cou¡ < (
Re£rvedW‹ds
Ë/ (
Re£rvedW‹d
); Count++)

106 
Re£rvedW‹ds
[
Cou¡
].
Sh¨edW‹d
 = 
	`TabÀSåRegi°î
(Re£rvedW‹ds[Cou¡].
W‹d
);

107 
	}
}

110 
	$LexCÀ™up
()

112 
	`LexI¡îa˘iveCÀ¨
(
NULL
);

113 
	}
}

116 
LexTokí
 
	$LexCheckRe£rvedW‹d
(c⁄° *
W‹d
)

118 
Cou¡
;

120 
Cou¡
 = 0; Cou¡ < (
Re£rvedW‹ds
Ë/ (
Re£rvedW‹d
); Count++)

125 if(!
	`°rcmp
(
W‹d
,
Re£rvedW‹ds
[
Cou¡
].
Sh¨edW‹d
))

126  
Re£rvedW‹ds
[
Cou¡
].
Tokí
;

129  
TokíN⁄e
;

130 
	}
}

133 
LexTokí
 
	$LexGëNumbî
(
LexSèã
 *
Lexî
, 
VÆue
 *Value)

135 
Resu…
 = 0;

136 
Ba£
 = 10;

137 
LexTokí
 
Resu…Tokí
;

138 #i‚de‡
NO_FP


139 
FPResu…
;

140 
FPDiv
;

143 i‡(*
Lexî
->
Pos
 == '0')

146 
	`LEXER_INC
(
Lexî
);

147 i‡(
Lexî
->
Pos
 !Lexî->
End
)

149 i‡(*
Lexî
->
Pos
 == 'x' || *Lexer->Pos == 'X')

150 { 
Ba£
 = 16; 
	`LEXER_INC
(
Lexî
); }

151 i‡(*
Lexî
->
Pos
 == 'b' || *Lexer->Pos == 'B')

152 { 
Ba£
 = 2; 
	`LEXER_INC
(
Lexî
); }

153 i‡(*
Lexî
->
Pos
 != '.')

154 
Ba£
 = 8;

159 ; 
Lexî
->
Pos
 !Lexî->
End
 && 
	`IS_BASE_DIGIT
(*Lexî->Pos, 
Ba£
); 
	`LEXER_INC
(Lexer))

160 
Resu…
 = Resu… * 
Ba£
 + 
	`GET_BASE_DIGIT
(*
Lexî
->
Pos
);

162 i‡(
Resu…
 >0 && Resu… <
MAX_CHAR_VALUE
)

164 
VÆue
->
Typ
 = &
Ch¨Ty≥
;

165 
VÆue
->
VÆ
->
Ch¨a˘î
 = 
Resu…
;

166 
Resu…Tokí
 = 
TokíCh¨a˘îC⁄°™t
;

170 
VÆue
->
Typ
 = &
I¡Ty≥
;

171 
VÆue
->
VÆ
->
I¡egî
 = 
Resu…
;

172 
Resu…Tokí
 = 
TokíI¡egîC⁄°™t
;

175 i‡(
Lexî
->
Pos
 =Lexî->
End
)

176  
Resu…Tokí
;

178 i‡(*
Lexî
->
Pos
 == 'l' || *Lexer->Pos == 'L')

180 
	`LEXER_INC
(
Lexî
);

181  
Resu…Tokí
;

184 #i‚de‡
NO_FP


185 i‡(
Lexî
->
Pos
 =Lexî->
End
 || *Lexer->Pos != '.')

186  
Resu…Tokí
;

188 
VÆue
->
Typ
 = &
FPTy≥
;

189 
	`LEXER_INC
(
Lexî
);

190 
FPDiv
 = 1.0/
Ba£
, 
FPResu…
 = ()
Resu…
; 
Lexî
->
Pos
 !Lexî->
End
 && 
	`IS_BASE_DIGIT
(*Lexî->Pos, Ba£); 
	`LEXER_INC
(Lexer), FPDiv /= ()Base)

191 
FPResu…
 +
	`GET_BASE_DIGIT
(*
Lexî
->
Pos
Ë* 
FPDiv
;

193 i‡(
Lexî
->
Pos
 !Lexî->
End
 && (*Lexer->Pos == 'e' || *Lexer->Pos == 'E'))

195 
Exp⁄ítMu…ùlõr
 = 1.0;

197 
	`LEXER_INC
(
Lexî
);

198 i‡(
Lexî
->
Pos
 !Lexî->
End
 && *Lexer->Pos == '-')

200 
Exp⁄ítMu…ùlõr
 = -1.0;

201 
	`LEXER_INC
(
Lexî
);

204 
Resu…
 = 0; 
Lexî
->
Pos
 !Lexî->
End
 && 
	`IS_BASE_DIGIT
(*Lexî->Pos, 
Ba£
); 
	`LEXER_INC
(Lexer))

205 
Resu…
 = Resu… * ()
Ba£
 + 
	`GET_BASE_DIGIT
(*
Lexî
->
Pos
);

207 
FPResu…
 *
	`pow
(()
Ba£
, ()
Resu…
 * 
Exp⁄ítMu…ùlõr
);

210 
VÆue
->
VÆ
->
FP
 = 
FPResu…
;

212  
TokíFPC⁄°™t
;

214  
Resu…Tokí
;

216 
	}
}

219 
LexTokí
 
	$LexGëW‹d
(
LexSèã
 *
Lexî
, 
VÆue
 *Value)

221 c⁄° *
SèπPos
 = 
Lexî
->
Pos
;

222 
LexTokí
 
Tokí
;

225 
	`LEXER_INC
(
Lexî
);

226 } 
Lexî
->
Pos
 !Lexî->
End
 && 
	`isCidít
(()*Lexer->Pos));

228 
VÆue
->
Typ
 = 
NULL
;

229 
VÆue
->
VÆ
->
Idítifõr
 = 
	`TabÀSåRegi°î2
(
SèπPos
, 
Lexî
->
Pos
 - StartPos);

231 
Tokí
 = 
	`LexCheckRe£rvedW‹d
(
VÆue
->
VÆ
->
Idítifõr
);

232 
Tokí
)

234 
TokíHashIn˛ude
: 
Lexî
->
Mode
 = 
LexModeHashIn˛ude
; ;

235 
TokíHashDeföe
: 
Lexî
->
Mode
 = 
LexModeHashDeföe
; ;

239 i‡(
Tokí
 !
TokíN⁄e
)

240  
Tokí
;

242 i‡(
Lexî
->
Mode
 =
LexModeHashDeföeS∑˚
)

243 
Lexî
->
Mode
 = 
LexModeHashDeföeS∑˚Idít
;

245  
TokíIdítifõr
;

246 
	}
}

249 
	$LexUnEsˇ≥Ch¨a˘îC⁄°™t
(c⁄° **
From
, c⁄° *
End
, 
Fú°Ch¨
, 
Ba£
)

251 
TŸÆ
 = 
	`GET_BASE_DIGIT
(
Fú°Ch¨
);

252 
CCou¡
;

253 
CCou¡
 = 0; 
	`IS_BASE_DIGIT
(**
From
, 
Ba£
) && CCount < 2; CCount++, (*From)++)

254 
TŸÆ
 = TŸÆ * 
Ba£
 + 
	`GET_BASE_DIGIT
(**
From
);

256  
TŸÆ
;

257 
	}
}

260 
	$LexUnEsˇ≥Ch¨a˘î
(c⁄° **
From
, c⁄° *
End
)

262 
ThisCh¨
;

264  *
From
 !
End
 && **From == '\\' &&

265 &(*
From
)[1] !
End
 && (*From)[1] == '\n' )

266 (*
From
) += 2;

268  *
From
 !
End
 && **From == '\\' &&

269 &(*
From
)[1] !
End
 && &(*From)[2] != End && (*From)[1] == '\r' && (*From)[2] == '\n')

270 (*
From
) += 3;

272 i‡(*
From
 =
End
)

275 i‡(**
From
 == '\\')

278 (*
From
)++;

279 i‡(*
From
 =
End
)

282 
ThisCh¨
 = *(*
From
)++;

283 
ThisCh¨
)

295 '0': '1': '2': '3':  
	`LexUnEsˇ≥Ch¨a˘îC⁄°™t
(
From
, 
End
, 
ThisCh¨
, 8);

296 'x':  
	`LexUnEsˇ≥Ch¨a˘îC⁄°™t
(
From
, 
End
, '0', 16);

297 :  
ThisCh¨
;

301  *(*
From
)++;

302 
	}
}

305 
LexTokí
 
	$LexGëSåögC⁄°™t
(
LexSèã
 *
Lexî
, 
VÆue
 *VÆue, 
EndCh¨
)

307 
Esˇ≥
 = 
FALSE
;

308 c⁄° *
SèπPos
 = 
Lexî
->
Pos
;

309 c⁄° *
EndPos
;

310 *
EscBuf
;

311 *
EscBufPos
;

312 *
RegSåög
;

313 
VÆue
 *
AºayVÆue
;

315 
Lexî
->
Pos
 !Lexî->
End
 && (*Lexî->Po†!
EndCh¨
 || 
Esˇ≥
))

318 i‡(
Esˇ≥
)

320 i‡(*
Lexî
->
Pos
 ='\r' && Lexî->Pos+1 !Lexî->
End
)

321 
Lexî
->
Pos
++;

323 i‡(*
Lexî
->
Pos
 ='\n' && Lexî->Pos+1 !Lexî->
End
)

325 
Lexî
->
Löe
++;

326 
Lexî
->
Pos
++;

327 
Lexî
->
Ch¨a˘îPos
 = 0;

328 
Lexî
->
EmôExåaNewlöes
++;

331 
Esˇ≥
 = 
FALSE
;

333 i‡(*
Lexî
->
Pos
 == '\\')

334 
Esˇ≥
 = 
TRUE
;

336 
	`LEXER_INC
(
Lexî
);

338 
EndPos
 = 
Lexî
->
Pos
;

340 
EscBuf
 = 
	`HópAŒocSèck
(
EndPos
 - 
SèπPos
);

341 i‡(
EscBuf
 =
NULL
)

342 
	`LexFaû
(
Lexî
, "out of memory");

344 
EscBufPos
 = 
EscBuf
, 
Lexî
->
Pos
 = 
SèπPos
; Lexî->Po†!
EndPos
;)

345 *
EscBufPos
++ = 
	`LexUnEsˇ≥Ch¨a˘î
(&
Lexî
->
Pos
, 
EndPos
);

348 
RegSåög
 = 
	`TabÀSåRegi°î2
(
EscBuf
, 
EscBufPos
 - EscBuf);

349 
	`HópP›Sèck
(
EscBuf
, 
EndPos
 - 
SèπPos
);

350 
AºayVÆue
 = 
	`V¨übÀSåögLôîÆGë
(
RegSåög
);

351 i‡(
AºayVÆue
 =
NULL
)

354 
AºayVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
NULL
, 0, 
FALSE
, NULL, 
TRUE
);

355 
AºayVÆue
->
Typ
 = 
Ch¨AºayTy≥
;

356 
AºayVÆue
->
VÆ
 = (
AnyVÆue
 *)
RegSåög
;

357 
	`V¨übÀSåögLôîÆDeföe
(
RegSåög
, 
AºayVÆue
);

361 
VÆue
->
Typ
 = 
Ch¨PåTy≥
;

362 
VÆue
->
VÆ
->
Poöãr
 = 
RegSåög
;

363 i‡(*
Lexî
->
Pos
 =
EndCh¨
)

364 
	`LEXER_INC
(
Lexî
);

366  
TokíSåögC⁄°™t
;

367 
	}
}

370 
LexTokí
 
	$LexGëCh¨a˘îC⁄°™t
(
LexSèã
 *
Lexî
, 
VÆue
 *Value)

372 
VÆue
->
Typ
 = &
Ch¨Ty≥
;

373 
VÆue
->
VÆ
->
Ch¨a˘î
 = 
	`LexUnEsˇ≥Ch¨a˘î
(&
Lexî
->
Pos
, Lexî->
End
);

374 i‡(
Lexî
->
Pos
 !Lexî->
End
 && *Lexer->Pos != '\'')

375 
	`LexFaû
(
Lexî
, "expected \"'\"");

377 
	`LEXER_INC
(
Lexî
);

378  
TokíCh¨a˘îC⁄°™t
;

379 
	}
}

382 
	$LexSkùCommít
(
LexSèã
 *
Lexî
, 
NextCh¨
, 
LexTokí
 *
Rëu∫Tokí
)

384 i‡(
NextCh¨
 == '*')

387 
Lexî
->
Pos
 !Lexî->
End
 && (*(Lexer->Pos-1) != '*' || *Lexer->Pos != '/'))

389 i‡(*
Lexî
->
Pos
 == '\n')

390 
Lexî
->
EmôExåaNewlöes
++;

392 
	`LEXER_INC
(
Lexî
);

395 i‡(
Lexî
->
Pos
 !Lexî->
End
)

396 
	`LEXER_INC
(
Lexî
);

398 
Lexî
->
Mode
 = 
LexModeN‹mÆ
;

403 
Lexî
->
Pos
 !Lexî->
End
 && *Lexer->Pos != '\n')

404 
	`LEXER_INC
(
Lexî
);

406 
	}
}

409 
LexTokí
 
	$LexSˇnGëTokí
(
LexSèã
 *
Lexî
, 
VÆue
 **Value)

411 
ThisCh¨
;

412 
NextCh¨
;

413 
LexTokí
 
GŸTokí
 = 
TokíN⁄e
;

416 i‡(
Lexî
->
EmôExåaNewlöes
 > 0)

418 
Lexî
->
EmôExåaNewlöes
--;

419  
TokíEndOfLöe
;

425 *
VÆue
 = &
LexVÆue
;

426 
Lexî
->
Pos
 !Lexî->
End
 && 
	`is•a˚
(()*(Lexer->Pos)))

428 i‡(*
Lexî
->
Pos
 == '\n')

430 
Lexî
->
Löe
++;

431 
Lexî
->
Pos
++;

432 
Lexî
->
Mode
 = 
LexModeN‹mÆ
;

433 
Lexî
->
Ch¨a˘îPos
 = 0;

434  
TokíEndOfLöe
;

436 i‡(
Lexî
->
Mode
 =
LexModeHashDeföe
 || Lexî->Modê=
LexModeHashDeföeS∑˚
)

437 
Lexî
->
Mode
 = 
LexModeHashDeföeS∑˚
;

439 i‡(
Lexî
->
Mode
 =
LexModeHashDeföeS∑˚Idít
)

440 
Lexî
->
Mode
 = 
LexModeN‹mÆ
;

442 
	`LEXER_INC
(
Lexî
);

445 i‡(
Lexî
->
Pos
 =Lexî->
End
 || *(Lexer->Pos) == '\0')

446  
TokíEOF
;

448 
ThisCh¨
 = *
Lexî
->
Pos
;

449 i‡(
	`isCid°¨t
(()
ThisCh¨
))

450  
	`LexGëW‹d
(
Lexî
, *
VÆue
);

452 i‡(
	`isdigô
(()
ThisCh¨
))

453  
	`LexGëNumbî
(
Lexî
, *
VÆue
);

455 
NextCh¨
 = (
Lexî
->
Pos
+1 !Lexî->
End
) ? *(Lexer->Pos+1) : 0;

456 
	`LEXER_INC
(
Lexî
);

457 
ThisCh¨
)

459 '"': 
GŸTokí
 = 
	`LexGëSåögC⁄°™t
(
Lexî
, *
VÆue
, '"'); ;

460 '\'': 
GŸTokí
 = 
	`LexGëCh¨a˘îC⁄°™t
(
Lexî
, *
VÆue
); ;

461 '(': i‡(
Lexî
->
Mode
 =
LexModeHashDeföeS∑˚Idít
Ë
GŸTokí
 = 
TokíO≥nMa¸oBøckë
; GŸTokí = 
TokíO≥nBøckë
; Lexî->Modê
LexModeN‹mÆ
; ;

462 ')': 
GŸTokí
 = 
TokíClo£Bøckë
; ;

463 '=': 
	`NEXTIS
('=', 
TokíEquÆ
, 
TokíAssign
); ;

464 '+': 
	`NEXTIS3
('=', 
TokíAddAssign
, '+', 
TokíIn¸emít
, 
TokíPlus
); ;

465 '-': 
	`NEXTIS4
('=', 
TokíSubåa˘Assign
, '>', 
TokíAºow
, '-', 
TokíDe¸emít
, 
TokíMöus
); ;

466 '*': 
	`NEXTIS
('=', 
TokíMu…ùlyAssign
, 
TokíA°îisk
); ;

467 '/': i‡(
NextCh¨
 ='/' || NextCh¨ ='*'Ë{ 
	`LEXER_INC
(
Lexî
); 
	`LexSkùCommít
(Lexî, NextCh¨, &
GŸTokí
); } 
	`NEXTIS
('=', 
TokíDivideAssign
, 
TokíSœsh
); ;

468 '%': 
	`NEXTIS
('=', 
TokíModulusAssign
, 
TokíModulus
); ;

469 '<': i‡(
Lexî
->
Mode
 =
LexModeHashIn˛ude
Ë
GŸTokí
 = 
	`LexGëSåögC⁄°™t
(Lexî, *
VÆue
, '>'); { 
	`NEXTIS3PLUS
('=', 
TokíLessEquÆ
, '<', 
TokíShi·Le·
, '=', 
TokíShi·Le·Assign
, 
TokíLessTh™
); } ;

470 '>': 
	`NEXTIS3PLUS
('=', 
TokíGª©îEquÆ
, '>', 
TokíShi·Right
, '=', 
TokíShi·RightAssign
, 
TokíGª©îTh™
); ;

471 ';': 
GŸTokí
 = 
TokíSemicﬁ⁄
; ;

472 '&': 
	`NEXTIS3
('=', 
TokíArôhmëicAndAssign
, '&', 
TokíLogiˇlAnd
, 
TokíAm≥rßnd
); ;

473 '|': 
	`NEXTIS3
('=', 
TokíArôhmëicOrAssign
, '|', 
TokíLogiˇlOr
, 
TokíArôhmëicOr
); ;

474 '{': 
GŸTokí
 = 
TokíLe·Bø˚
; ;

475 '}': 
GŸTokí
 = 
TokíRightBø˚
; ;

476 '[': 
GŸTokí
 = 
TokíLe·Squ¨eBøckë
; ;

477 ']': 
GŸTokí
 = 
TokíRightSqu¨eBøckë
; ;

478 '!': 
	`NEXTIS
('=', 
TokíNŸEquÆ
, 
TokíU«ryNŸ
); ;

479 '^': 
	`NEXTIS
('=', 
TokíArôhmëicEx‹Assign
, 
TokíArôhmëicEx‹
); ;

480 '~': 
GŸTokí
 = 
TokíU«ryEx‹
; ;

481 ',': 
GŸTokí
 = 
TokíComma
; ;

482 '.': 
	`NEXTISEXACTLY3
('.', '.', 
TokíEŒùsis
, 
TokíDŸ
); ;

483 '?': 
GŸTokí
 = 
TokíQue°i⁄M¨k
; ;

484 ':': 
GŸTokí
 = 
TokíCﬁ⁄
; ;

485 : 
	`LexFaû
(
Lexî
, "ûÀgÆ ch¨a˘î '%c'", 
ThisCh¨
); ;

487 } 
GŸTokí
 =
TokíN⁄e
);

489  
GŸTokí
;

490 
	}
}

493 
	$LexTokíSize
(
LexTokí
 
Tokí
)

495 
Tokí
)

497 
TokíIdítifõr
: 
TokíSåögC⁄°™t
:  (*);

498 
TokíI¡egîC⁄°™t
:  ();

499 
TokíCh¨a˘îC⁄°™t
:  ();

500 
TokíFPC⁄°™t
:  ();

503 
	}
}

506 *
	$LexTokíi£
(
LexSèã
 *
Lexî
, *
TokíLí
)

508 
LexTokí
 
Tokí
;

509 *
HópMem
;

510 
VÆue
 *
GŸVÆue
;

511 
MemU£d
 = 0;

512 
VÆueSize
;

513 
Re£rveS∑˚
 = (
Lexî
->
End
 - Lexî->
Pos
) * 4 + 16;

514 *
TokíS∑˚
 = 
	`HópAŒocSèck
(
Re£rveS∑˚
);

515 *
TokíPos
 = (*)
TokíS∑˚
;

516 
La°Ch¨a˘îPos
 = 0;

518 i‡(
TokíS∑˚
 =
NULL
)

519 
	`LexFaû
(
Lexî
, "out of memory");

524 
Tokí
 = 
	`LexSˇnGëTokí
(
Lexî
, &
GŸVÆue
);

526 #ifde‡
DEBUG_LEXER


527 
	`¥ötf
("Tokí: %d\n", 
Tokí
);

529 *(*)
TokíPos
 = 
Tokí
;

530 
TokíPos
++;

531 
MemU£d
++;

533 *(*)
TokíPos
 = ()
La°Ch¨a˘îPos
;

534 
TokíPos
++;

535 
MemU£d
++;

537 
VÆueSize
 = 
	`LexTokíSize
(
Tokí
);

538 i‡(
VÆueSize
 > 0)

541 
	`mem˝y
((*)
TokíPos
, (*)
GŸVÆue
->
VÆ
, 
VÆueSize
);

542 
TokíPos
 +
VÆueSize
;

543 
MemU£d
 +
VÆueSize
;

546 
La°Ch¨a˘îPos
 = 
Lexî
->
Ch¨a˘îPos
;

548 } 
Tokí
 !
TokíEOF
);

550 
HópMem
 = 
	`HópAŒocMem
(
MemU£d
);

551 i‡(
HópMem
 =
NULL
)

552 
	`LexFaû
(
Lexî
, "out of memory");

555 
	`mem˝y
(
HópMem
, 
TokíS∑˚
, 
MemU£d
);

556 
	`HópP›Sèck
(
TokíS∑˚
, 
Re£rveS∑˚
);

557 #ifde‡
DEBUG_LEXER


559 
Cou¡
;

560 
	`¥ötf
("Tokens: ");

561 
Cou¡
 = 0; Cou¡ < 
MemU£d
; Count++)

562 
	`¥ötf
("%02x ", *((*)
HópMem
+
Cou¡
));

563 
	`¥ötf
("\n");

566 i‡(
TokíLí
)

567 *
TokíLí
 = 
MemU£d
;

569  
HópMem
;

570 
	}
}

573 *
	$LexA«ly£
(c⁄° *
FûeName
, c⁄° *
Sour˚
, 
Sour˚Lí
, *
TokíLí
)

575 
LexSèã
 
Lexî
;

577 
Lexî
.
Pos
 = 
Sour˚
;

578 
Lexî
.
End
 = 
Sour˚
 + 
Sour˚Lí
;

579 
Lexî
.
Löe
 = 1;

580 
Lexî
.
FûeName
 = FileName;

581 
Lexî
.
Mode
 = 
LexModeN‹mÆ
;

582 
Lexî
.
EmôExåaNewlöes
 = 0;

583 
Lexî
.
Ch¨a˘îPos
 = 1;

584 
Lexî
.
Sour˚Text
 = 
Sour˚
;

586  
	`LexTokíi£
(&
Lexî
, 
TokíLí
);

587 
	}
}

590 
	$LexInôP¨£r
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Sour˚Text
, *
TokíSour˚
, c⁄° *
FûeName
, 
RunIt
)

592 
P¨£r
->
Pos
 = 
TokíSour˚
;

593 
P¨£r
->
Löe
 = 1;

594 
P¨£r
->
FûeName
 = FileName;

595 
P¨£r
->
Mode
 = 
RunIt
 ? 
RunModeRun
 : 
RunModeSkù
;

596 
P¨£r
->
SórchLabñ
 = 0;

597 
P¨£r
->
HashIfLevñ
 = 0;

598 
P¨£r
->
HashIfEvÆu©eToLevñ
 = 0;

599 
P¨£r
->
Ch¨a˘îPos
 = 0;

600 
P¨£r
->
Sour˚Text
 = SourceText;

601 
	}
}

604 
LexTokí
 
	$LexGëRawTokí
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 **VÆue, 
IncPos
)

606 
LexTokí
 
Tokí
 = 
TokíN⁄e
;

607 
VÆueSize
;

608 *
Prom±
 = 
NULL
;

613 i‡(
P¨£r
->
Pos
 =
NULL
 && 
I¡îa˘iveHód
 != NULL)

614 
P¨£r
->
Pos
 = 
I¡îa˘iveHód
->
Tokís
;

616 i‡(
P¨£r
->
FûeName
 !
SåEm±y
 || 
I¡îa˘iveHód
 !
NULL
)

620 (
Tokí
 = (
LexTokí
)*(*)
P¨£r
->
Pos
Ë=
TokíEndOfLöe
)

622 
P¨£r
->
Löe
++;

623 
P¨£r
->
Pos
 +
TOKEN_DATA_OFFSET
;

628 i‡(
P¨£r
->
FûeName
 =
SåEm±y
 && (
I¡îa˘iveHód
 =
NULL
 || 
Tokí
 =
TokíEOF
))

631 
LöeBuf„r
[
LINEBUFFER_MAX
];

632 *
LöeTokís
;

633 
LöeByãs
;

634 
TokíLöe
 *
LöeNode
;

636 i‡(
I¡îa˘iveHód
 =
NULL
 || (*)
P¨£r
->
Pos
 =&
I¡îa˘iveTaû
->
Tokís
[I¡îa˘iveTaû->
NumByãs
-
TOKEN_DATA_OFFSET
])

639 i‡(
LexU£SèãmítProm±
)

641 
Prom±
 = 
INTERACTIVE_PROMPT_STATEMENT
;

642 
LexU£SèãmítProm±
 = 
FALSE
;

645 
Prom±
 = 
INTERACTIVE_PROMPT_LINE
;

647 i‡(
	`Pœtf‹mGëLöe
(&
LöeBuf„r
[0], 
LINEBUFFER_MAX
, 
Prom±
Ë=
NULL
)

648  
TokíEOF
;

651 
LöeTokís
 = 
	`LexA«ly£
(
SåEm±y
, &
LöeBuf„r
[0], 
	`°æí
(LöeBuf„r), &
LöeByãs
);

652 
LöeNode
 = 
	`V¨übÀAŒoc
(
P¨£r
, (
TokíLöe
), 
TRUE
);

653 
LöeNode
->
Tokís
 = 
LöeTokís
;

654 
LöeNode
->
NumByãs
 = 
LöeByãs
;

655 i‡(
I¡îa˘iveHód
 =
NULL
)

658 
I¡îa˘iveHód
 = 
LöeNode
;

659 
P¨£r
->
Löe
 = 1;

660 
P¨£r
->
Ch¨a˘îPos
 = 0;

663 
I¡îa˘iveTaû
->
Next
 = 
LöeNode
;

665 
I¡îa˘iveTaû
 = 
LöeNode
;

666 
I¡îa˘iveCuºítLöe
 = 
LöeNode
;

667 
P¨£r
->
Pos
 = 
LöeTokís
;

672 i‡(
P¨£r
->
Pos
 !&
I¡îa˘iveCuºítLöe
->
Tokís
[I¡îa˘iveCuºítLöe->
NumByãs
-
TOKEN_DATA_OFFSET
])

675 
I¡îa˘iveCuºítLöe
 = 
I¡îa˘iveHód
; 
P¨£r
->
Pos
 !&I¡îa˘iveCuºítLöe->
Tokís
[I¡îa˘iveCuºítLöe->
NumByãs
-
TOKEN_DATA_OFFSET
]; I¡îa˘iveCuºítLöêI¡îa˘iveCuºítLöe->
Next
)

680 
I¡îa˘iveCuºítLöe
 = I¡îa˘iveCuºítLöe->
Next
;

682 
P¨£r
->
Pos
 = 
I¡îa˘iveCuºítLöe
->
Tokís
;

685 
Tokí
 = (
LexTokí
)*(*)
P¨£r
->
Pos
;

687 } (
P¨£r
->
FûeName
 =
SåEm±y
 && 
Tokí
 =
TokíEOF
Ë|| Tokí =
TokíEndOfLöe
);

689 
P¨£r
->
Ch¨a˘îPos
 = *((*)P¨£r->
Pos
 + 1);

690 
VÆueSize
 = 
	`LexTokíSize
(
Tokí
);

691 i‡(
VÆueSize
 > 0)

694 i‡(
VÆue
 !
NULL
)

696 
Tokí
)

698 
TokíSåögC⁄°™t
: 
LexVÆue
.
Typ
 = 
Ch¨PåTy≥
; ;

699 
TokíIdítifõr
: 
LexVÆue
.
Typ
 = 
NULL
; ;

700 
TokíI¡egîC⁄°™t
: 
LexVÆue
.
Typ
 = &
I¡Ty≥
; ;

701 
TokíCh¨a˘îC⁄°™t
: 
LexVÆue
.
Typ
 = &
Ch¨Ty≥
; ;

702 #i‚de‡
NO_FP


703 
TokíFPC⁄°™t
: 
LexVÆue
.
Typ
 = &
FPTy≥
; ;

708 
	`mem˝y
((*)
LexVÆue
.
VÆ
, (*)((*)
P¨£r
->
Pos
 + 
TOKEN_DATA_OFFSET
), 
VÆueSize
);

709 
LexVÆue
.
VÆOnHóp
 = 
FALSE
;

710 
LexVÆue
.
VÆOnSèck
 = 
FALSE
;

711 
LexVÆue
.
IsLVÆue
 = 
FALSE
;

712 
LexVÆue
.
LVÆueFrom
 = 
NULL
;

713 *
VÆue
 = &
LexVÆue
;

716 i‡(
IncPos
)

717 
P¨£r
->
Pos
 +
VÆueSize
 + 
TOKEN_DATA_OFFSET
;

721 i‡(
IncPos
 && 
Tokí
 !
TokíEOF
)

722 
P¨£r
->
Pos
 +
TOKEN_DATA_OFFSET
;

725 #ifde‡
DEBUG_LEXER


726 
	`¥ötf
("GŸÅokí=%02x inc=%dÖos=%d\n", 
Tokí
, 
IncPos
, 
P¨£r
->
Ch¨a˘îPos
);

729  
Tokí
;

730 
	}
}

733 
	$LexHashIncPos
(
P¨£Sèã
 *
P¨£r
, 
IncPos
)

735 i‡(!
IncPos
)

736 
	`LexGëRawTokí
(
P¨£r
, 
NULL
, 
TRUE
);

737 
	}
}

740 
	$LexHashIfdef
(
P¨£Sèã
 *
P¨£r
, 
IfNŸ
)

743 
VÆue
 *
IdítVÆue
;

744 
VÆue
 *
SavedVÆue
;

745 
IsDeföed
;

746 
LexTokí
 
Tokí
 = 
	`LexGëRawTokí
(
P¨£r
, &
IdítVÆue
, 
TRUE
);

748 i‡(
Tokí
 !
TokíIdítifõr
)

749 
	`ProgømFaû
(
P¨£r
, "identifierÉxpected");

752 
IsDeföed
 = 
	`TabÀGë
(&
GlobÆTabÀ
, 
IdítVÆue
->
VÆ
->
Idítifõr
, &
SavedVÆue
, 
NULL
, NULL, NULL);

753 i‡(
P¨£r
->
HashIfEvÆu©eToLevñ
 =P¨£r->
HashIfLevñ
 && ( (
IsDeföed
 && !
IfNŸ
) || (!IsDefined && IfNot)) )

756 
P¨£r
->
HashIfEvÆu©eToLevñ
++;

759 
P¨£r
->
HashIfLevñ
++;

760 
	}
}

763 
	$LexHashIf
(
P¨£Sèã
 *
P¨£r
)

765 
	`¥ötf
("in LesHashIf\n");

767 
VÆue
 *
IdítVÆue
;

768 
VÆue
 *
SavedVÆue
;

769 
P¨£Sèã
 
Ma¸oP¨£r
;

770 
LexTokí
 
Tokí
 = 
	`LexGëRawTokí
(
P¨£r
, &
IdítVÆue
, 
TRUE
);

772 i‡(
Tokí
 =
TokíIdítifõr
)

775 i‡(!
	`TabÀGë
(&
GlobÆTabÀ
, 
IdítVÆue
->
VÆ
->
Idítifõr
, &
SavedVÆue
, 
NULL
, NULL, NULL))

776 
	`ProgømFaû
(
P¨£r
, "'%s' i†undeföed", 
IdítVÆue
->
VÆ
->
Idítifõr
);

778 i‡(
SavedVÆue
->
Typ
->
Ba£
 !
Ty≥Ma¸o
)

779 
	`ProgømFaû
(
P¨£r
, "valueÉxpected");

781 
	`P¨£rC›y
(&
Ma¸oP¨£r
, &
SavedVÆue
->
VÆ
->
Ma¸oDef
.
Body
);

782 
Tokí
 = 
	`LexGëRawTokí
(&
Ma¸oP¨£r
, &
IdítVÆue
, 
TRUE
);

785 i‡(
Tokí
 !
TokíCh¨a˘îC⁄°™t
)

786 
	`ProgømFaû
(
P¨£r
, "valueÉxpected");

789 i‡(
P¨£r
->
HashIfEvÆu©eToLevñ
 =P¨£r->
HashIfLevñ
 && 
IdítVÆue
->
VÆ
->
Ch¨a˘î
)

792 
P¨£r
->
HashIfEvÆu©eToLevñ
++;

795 
P¨£r
->
HashIfLevñ
++;

796 
	}
}

799 
	$LexHashEl£
(
P¨£Sèã
 *
P¨£r
)

801 i‡(
P¨£r
->
HashIfEvÆu©eToLevñ
 =P¨£r->
HashIfLevñ
 - 1)

802 
P¨£r
->
HashIfEvÆu©eToLevñ
++;

804 i‡(
P¨£r
->
HashIfEvÆu©eToLevñ
 =P¨£r->
HashIfLevñ
)

807 i‡(
P¨£r
->
HashIfLevñ
 == 0)

808 
	`ProgømFaû
(
P¨£r
, "#else without #if");

810 
P¨£r
->
HashIfEvÆu©eToLevñ
--;

812 
	}
}

815 
	$LexHashEndif
(
P¨£Sèã
 *
P¨£r
)

817 i‡(
P¨£r
->
HashIfLevñ
 == 0)

818 
	`ProgømFaû
(
P¨£r
, "#endif without #if");

820 
P¨£r
->
HashIfLevñ
--;

821 i‡(
P¨£r
->
HashIfEvÆu©eToLevñ
 > P¨£r->
HashIfLevñ
)

822 
P¨£r
->
HashIfEvÆu©eToLevñ
 = P¨£r->
HashIfLevñ
;

823 
	}
}

826 
LexTokí
 
	$LexGëTokí
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 **VÆue, 
IncPos
)

828 
LexTokí
 
Tokí
;

829 
TryNextTokí
;

830 
cou¡
 = 0;

836 
WasPªProcTokí
 = 
TRUE
;

838 
Tokí
 = 
	`LexGëRawTokí
(
P¨£r
, 
VÆue
, 
IncPos
);

840 
Tokí
)

842 
TokíHashIfdef
: 
	`LexHashIncPos
(
P¨£r
, 
IncPos
); 
	`LexHashIfdef
(P¨£r, 
FALSE
); ;

843 
TokíHashI‚def
: 
	`LexHashIncPos
(
P¨£r
, 
IncPos
); 
	`LexHashIfdef
(P¨£r, 
TRUE
); ;

844 
TokíHashIf
: 
	`LexHashIncPos
(
P¨£r
, 
IncPos
); 
	`LexHashIf
(Parser); ;

845 
TokíHashEl£
: 
	`LexHashIncPos
(
P¨£r
, 
IncPos
); 
	`LexHashEl£
(Parser); ;

846 
TokíHashEndif
: 
	`LexHashIncPos
(
P¨£r
, 
IncPos
); 
	`LexHashEndif
(Parser); ;

847 : 
WasPªProcTokí
 = 
FALSE
; ;

851 
TryNextTokí
 = (
P¨£r
->
HashIfEvÆu©eToLevñ
 < P¨£r->
HashIfLevñ
 && 
Tokí
 !
TokíEOF
Ë|| 
WasPªProcTokí
;

852 i‡(!
IncPos
 && 
TryNextTokí
)

853 
	`LexGëRawTokí
(
P¨£r
, 
NULL
, 
TRUE
);

855 } 
TryNextTokí
);

857  
Tokí
;

858 
	}
}

861 
LexTokí
 
	$LexRawPìkTokí
(
P¨£Sèã
 *
P¨£r
)

863  (
LexTokí
)*(*)
P¨£r
->
Pos
;

864 
	}
}

867 
	$LexToEndOfLöe
(
P¨£Sèã
 *
P¨£r
)

869 
TRUE
)

871 
LexTokí
 
Tokí
 = (LexTokí)*(*)
P¨£r
->
Pos
;

872 i‡(
Tokí
 =
TokíEndOfLöe
 || Tokí =
TokíEOF
)

875 
	`LexGëRawTokí
(
P¨£r
, 
NULL
, 
TRUE
);

877 
	}
}

880 *
	$LexC›yTokís
(
P¨£Sèã
 *
SèπP¨£r
, P¨£Sèã *
EndP¨£r
)

882 
MemSize
 = 0;

883 
C›ySize
;

884 *
Pos
 = (*)
SèπP¨£r
->Pos;

885 *
NewTokís
;

886 *
NewTokíPos
;

887 
TokíLöe
 *
ILöe
;

889 i‡(
I¡îa˘iveHód
 =
NULL
)

892 
MemSize
 = 
EndP¨£r
->
Pos
 - 
SèπP¨£r
->Pos;

893 
NewTokís
 = 
	`V¨übÀAŒoc
(
SèπP¨£r
, 
MemSize
 + 
TOKEN_DATA_OFFSET
, 
TRUE
);

894 
	`mem˝y
(
NewTokís
, (*)
SèπP¨£r
->
Pos
, 
MemSize
);

899 
I¡îa˘iveCuºítLöe
 = 
I¡îa˘iveHód
; I¡îa˘iveCuºítLöê!
NULL
 && (
Pos
 < &I¡îa˘iveCuºítLöe->
Tokís
[0] || Po†>&I¡îa˘iveCuºítLöe->Tokís[I¡îa˘iveCuºítLöe->
NumByãs
]); I¡îa˘iveCuºítLöêI¡îa˘iveCuºítLöe->
Next
)

902 i‡(
EndP¨£r
->
Pos
 >
SèπP¨£r
->Po†&& EndP¨£r->Po†< &
I¡îa˘iveCuºítLöe
->
Tokís
[I¡îa˘iveCuºítLöe->
NumByãs
])

905 
MemSize
 = 
EndP¨£r
->
Pos
 - 
SèπP¨£r
->Pos;

906 
NewTokís
 = 
	`V¨übÀAŒoc
(
SèπP¨£r
, 
MemSize
 + 
TOKEN_DATA_OFFSET
, 
TRUE
);

907 
	`mem˝y
(
NewTokís
, (*)
SèπP¨£r
->
Pos
, 
MemSize
);

912 
MemSize
 = &
I¡îa˘iveCuºítLöe
->
Tokís
[I¡îa˘iveCuºítLöe->
NumByãs
-
TOKEN_DATA_OFFSET
] - 
Pos
;

914 
ILöe
 = 
I¡îa˘iveCuºítLöe
->
Next
; ILöê!
NULL
 && (
EndP¨£r
->
Pos
 < &ILöe->
Tokís
[0] || EndP¨£r->Po†>&ILöe->Tokís[ILöe->
NumByãs
]); ILine = ILine->Next)

915 
MemSize
 +
ILöe
->
NumByãs
 - 
TOKEN_DATA_OFFSET
;

918 
MemSize
 +
EndP¨£r
->
Pos
 - &
ILöe
->
Tokís
[0];

919 
NewTokís
 = 
	`V¨übÀAŒoc
(
SèπP¨£r
, 
MemSize
 + 
TOKEN_DATA_OFFSET
, 
TRUE
);

921 
C›ySize
 = &
I¡îa˘iveCuºítLöe
->
Tokís
[I¡îa˘iveCuºítLöe->
NumByãs
-
TOKEN_DATA_OFFSET
] - 
Pos
;

922 
	`mem˝y
(
NewTokís
, 
Pos
, 
C›ySize
);

923 
NewTokíPos
 = 
NewTokís
 + 
C›ySize
;

924 
ILöe
 = 
I¡îa˘iveCuºítLöe
->
Next
; ILöê!
NULL
 && (
EndP¨£r
->
Pos
 < &ILöe->
Tokís
[0] || EndP¨£r->Po†>&ILöe->Tokís[ILöe->
NumByãs
]); ILine = ILine->Next)

926 
	`mem˝y
(
NewTokíPos
, &
ILöe
->
Tokís
[0], ILöe->
NumByãs
 - 
TOKEN_DATA_OFFSET
);

927 
NewTokíPos
 +
ILöe
->
NumByãs
-
TOKEN_DATA_OFFSET
;

930 
	`mem˝y
(
NewTokíPos
, &
ILöe
->
Tokís
[0], 
EndP¨£r
->
Pos
 - &ILine->Tokens[0]);

934 
NewTokís
[
MemSize
] = ()
TokíEndOfFun˘i⁄
;

936  
NewTokís
;

937 
	}
}

940 
	$LexI¡îa˘iveCÀ¨
(
P¨£Sèã
 *
P¨£r
)

942 
I¡îa˘iveHód
 !
NULL
)

944 
TokíLöe
 *
NextLöe
 = 
I¡îa˘iveHód
->
Next
;

946 
	`HópFªeMem
(
I¡îa˘iveHód
->
Tokís
);

947 
	`HópFªeMem
(
I¡îa˘iveHód
);

948 
I¡îa˘iveHód
 = 
NextLöe
;

951 i‡(
P¨£r
 !
NULL
)

952 
P¨£r
->
Pos
 = 
NULL
;

953 
I¡îa˘iveTaû
 = 
NULL
;

954 
	}
}

957 
	$LexI¡îa˘iveCom∂ëed
(
P¨£Sèã
 *
P¨£r
)

959 
I¡îa˘iveHód
 !
NULL
 && !(
P¨£r
->
Pos
 >&I¡îa˘iveHód->
Tokís
[0] && P¨£r->Po†< &I¡îa˘iveHód->Tokís[I¡îa˘iveHód->
NumByãs
]))

962 
TokíLöe
 *
NextLöe
 = 
I¡îa˘iveHód
->
Next
;

964 
	`HópFªeMem
(
I¡îa˘iveHód
->
Tokís
);

965 
	`HópFªeMem
(
I¡îa˘iveHód
);

966 
I¡îa˘iveHód
 = 
NextLöe
;

968 i‡(
I¡îa˘iveHód
 =
NULL
)

971 
P¨£r
->
Pos
 = 
NULL
;

972 
I¡îa˘iveTaû
 = 
NULL
;

975 
	}
}

978 
	$LexI¡îa˘iveSèãmítProm±
()

980 
LexU£SèãmítProm±
 = 
TRUE
;

981 
	}
}

	@parse.c

1 
	~"picoc.h
"

2 
	~"öãΩªãr.h
"

5 
	sCÀ™upTokíNode


7 *
	mTokís
;

8 c⁄° *
	mSour˚Text
;

9 
CÀ™upTokíNode
 *
	mNext
;

12 
CÀ™upTokíNode
 *
	gCÀ™upTokíLi°
 = 
NULL
;

16 
	$P¨£CÀ™up
()

18 
CÀ™upTokíLi°
 !
NULL
)

20 
CÀ™upTokíNode
 *
Next
 = 
CÀ™upTokíLi°
->Next;

22 
	`HópFªeMem
(
CÀ™upTokíLi°
->
Tokís
);

23 i‡(
CÀ™upTokíLi°
->
Sour˚Text
 !
NULL
)

24 
	`HópFªeMem
((*)
CÀ™upTokíLi°
->
Sour˚Text
);

26 
	`HópFªeMem
(
CÀ™upTokíLi°
);

27 
CÀ™upTokíLi°
 = 
Next
;

29 
	}
}

32 
P¨£Resu…
 
	$P¨£SèãmítMaybeRun
(
P¨£Sèã
 *
P¨£r
, 
C⁄dôi⁄
, 
CheckTøûögSemicﬁ⁄
)

34 i‡(
P¨£r
->
Mode
 !
RunModeSkù
 && !
C⁄dôi⁄
)

36 
RunMode
 
OldMode
 = 
P¨£r
->
Mode
;

37 
Resu…
;

38 
P¨£r
->
Mode
 = 
RunModeSkù
;

39 
Resu…
 = 
	`P¨£Sèãmít
(
P¨£r
, 
CheckTøûögSemicﬁ⁄
);

40 
P¨£r
->
Mode
 = 
OldMode
;

41  
Resu…
;

44  
	`P¨£Sèãmít
(
P¨£r
, 
CheckTøûögSemicﬁ⁄
);

45 
	}
}

48 
	$P¨£Cou¡P¨ams
(
P¨£Sèã
 *
P¨£r
)

50 
P¨amCou¡
 = 0;

52 
LexTokí
 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

53 i‡(
Tokí
 !
TokíClo£Bøckë
 && Tokí !
TokíEOF
)

56 
P¨amCou¡
++;

57 (
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
)Ë!
TokíClo£Bøckë
 && Tokí !
TokíEOF
)

59 i‡(
Tokí
 =
TokíComma
)

60 
P¨amCou¡
++;

64  
P¨amCou¡
;

65 
	}
}

68 
VÆue
 *
	$P¨£Fun˘i⁄Deföôi⁄
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
Rëu∫Ty≥
, *
Idítifõr
)

70 
VÆueTy≥
 *
P¨amTy≥
;

71 *
P¨amIdítifõr
;

72 
LexTokí
 
Tokí
 = 
TokíN⁄e
;

73 
P¨£Sèã
 
P¨amP¨£r
;

74 
VÆue
 *
FuncVÆue
;

75 
VÆue
 *
OldFuncVÆue
;

76 
P¨£Sèã
 
FuncBody
;

77 
P¨amCou¡
 = 0;

79 i‡(
T›SèckFøme
 !
NULL
)

80 
	`ProgømFaû
(
P¨£r
, "nested function definitionsáreÇotállowed");

82 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

83 
	`P¨£rC›y
(&
P¨amP¨£r
, 
P¨£r
);

84 
P¨amCou¡
 = 
	`P¨£Cou¡P¨ams
(
P¨£r
);

85 i‡(
P¨amCou¡
 > 
PARAMETER_MAX
)

86 
	`ProgømFaû
(
P¨£r
, "too manyÖarameters");

88 
FuncVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
P¨£r
, (
FuncDef
Ë+ (
VÆueTy≥
 *Ë* 
P¨amCou¡
 + (c⁄° *Ë* P¨amCou¡, 
FALSE
, 
NULL
, 
TRUE
);

89 
FuncVÆue
->
Typ
 = &
Fun˘i⁄Ty≥
;

90 
FuncVÆue
->
VÆ
->
FuncDef
.
Rëu∫Ty≥
 = ReturnType;

91 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
 = 
P¨amCou¡
;

92 
FuncVÆue
->
VÆ
->
FuncDef
.
V¨Args
 = 
FALSE
;

93 
FuncVÆue
->
VÆ
->
FuncDef
.
P¨amTy≥
 = (
VÆueTy≥
 **)((*)FuncValue->Val + (FuncDef));

94 
FuncVÆue
->
VÆ
->
FuncDef
.
P¨amName
 = (**)((*)FuncVÆue->VÆ->FuncDef.
P¨amTy≥
 + (
VÆueTy≥
 *Ë* 
P¨amCou¡
);

96 
P¨amCou¡
 = 0; P¨amCou¡ < 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
; ParamCount++)

99 i‡(
P¨amCou¡
 =
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
-1 && 
	`LexGëTokí
(&
P¨amP¨£r
, 
NULL
, 
FALSE
Ë=
TokíEŒùsis
)

102 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
--;

103 
FuncVÆue
->
VÆ
->
FuncDef
.
V¨Args
 = 
TRUE
;

109 
	`Ty≥P¨£
(&
P¨amP¨£r
, &
P¨amTy≥
, &
P¨amIdítifõr
, 
NULL
);

110 i‡(
P¨amTy≥
->
Ba£
 =
Ty≥Void
)

113 
P¨amCou¡
--;

114 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
--;

118 
FuncVÆue
->
VÆ
->
FuncDef
.
P¨amTy≥
[
P¨amCou¡
] = ParamType;

119 
FuncVÆue
->
VÆ
->
FuncDef
.
P¨amName
[
P¨amCou¡
] = 
P¨amIdítifõr
;

123 
Tokí
 = 
	`LexGëTokí
(&
P¨amP¨£r
, 
NULL
, 
TRUE
);

124 i‡(
Tokí
 !
TokíComma
 && 
P¨amCou¡
 < 
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
-1)

125 
	`ProgømFaû
(&
P¨amP¨£r
, "commaÉxpected");

128 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
 !0 && 
Tokí
 !
TokíClo£Bøckë
 && Tokí !
TokíComma
 && Tokí !
TokíEŒùsis
)

129 
	`ProgømFaû
(&
P¨amP¨£r
, "badÖarameter");

131 i‡(
	`°rcmp
(
Idítifõr
, "main") == 0)

134 i‡–
FuncVÆue
->
VÆ
->
FuncDef
.
Rëu∫Ty≥
 !&
I¡Ty≥
 &&

135 
FuncVÆue
->
VÆ
->
FuncDef
.
Rëu∫Ty≥
 !&
VoidTy≥
 )

136 
	`ProgømFaû
(
P¨£r
, "main() shouldÑeturnán int or void");

138 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
 != 0 &&

139 (
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
 !2 || FuncVÆue->VÆ->FuncDef.
P¨amTy≥
[0] !&
I¡Ty≥
) )

140 
	`ProgømFaû
(
P¨£r
, "badÖarametersÅo main()");

144 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
);

145 i‡(
Tokí
 =
TokíSemicﬁ⁄
)

146 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

150 i‡(
Tokí
 !
TokíLe·Bø˚
)

151 
	`ProgømFaû
(
P¨£r
, "bad function definition");

153 
	`P¨£rC›y
(&
FuncBody
, 
P¨£r
);

154 i‡(
	`P¨£SèãmítMaybeRun
(
P¨£r
, 
FALSE
, 
TRUE
Ë!
P¨£Resu…Ok
)

155 
	`ProgømFaû
(
P¨£r
, "function definitionÉxpected");

157 
FuncVÆue
->
VÆ
->
FuncDef
.
Body
 = 
FuncBody
;

158 
FuncVÆue
->
VÆ
->
FuncDef
.
Body
.
Pos
 = 
	`LexC›yTokís
(&
FuncBody
, 
P¨£r
);

161 i‡(
	`TabÀGë
(&
GlobÆTabÀ
, 
Idítifõr
, &
OldFuncVÆue
, 
NULL
, NULL, NULL))

163 i‡(
OldFuncVÆue
->
VÆ
->
FuncDef
.
Body
.
Pos
 =
NULL
)

166 
	`V¨übÀFªe
(
	`TabÀDñëe
(&
GlobÆTabÀ
, 
Idítifõr
));

169 
	`ProgømFaû
(
P¨£r
, "'%s' i†Æªady deföed", 
Idítifõr
);

173 i‡(!
	`TabÀSë
(&
GlobÆTabÀ
, 
Idítifõr
, 
FuncVÆue
, (*)
P¨£r
->
FûeName
, P¨£r->
Löe
, P¨£r->
Ch¨a˘îPos
))

174 
	`ProgømFaû
(
P¨£r
, "'%s' i†Æªady deföed", 
Idítifõr
);

176  
FuncVÆue
;

177 
	}
}

180 
	$P¨£De˛¨©i⁄Assignmít
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
NewV¨übÀ
, 
DoAssignmít
)

182 
VÆue
 *
CVÆue
;

183 
AºayIndex
;

184 
LexTokí
 
Tokí
 = 
TokíComma
;

186 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíLe·Bø˚
)

189 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

191 
AºayIndex
 = 0; (
P¨£r
->
Mode
 !
RunModeRun
 && 
Tokí
 =
TokíComma
Ë|| (P¨£r->Modê=RunModeRu¿&& AºayIndex < 
NewV¨übÀ
->
Typ
->
AºaySize
); ArrayIndex++)

193 
VÆue
 *
AºayEÀmít
 = 
NULL
;

195 i‡(
Tokí
 !
TokíComma
)

196 
	`ProgømFaû
(
P¨£r
, "commaÉxpected");

198 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

199 
AºayEÀmít
 = 
	`V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£r
, 
NewV¨übÀ
->
Typ
->
FromTy≥
, (
AnyVÆue
 *)(&NewV¨übÀ->
VÆ
->
AºayMem
[0] + 
	`Ty≥Size
(NewV¨übÀ->Typ->FromTy≥, 0, 
TRUE
Ë* 
AºayIndex
), TRUE, NewVariable);

201 i‡(!
	`Ex¥essi⁄P¨£
(
P¨£r
, &
CVÆue
))

202 
	`ProgømFaû
(
P¨£r
, "expressionÉxpected");

204 i‡(
P¨£r
->
Mode
 =
RunModeRun
 && 
DoAssignmít
)

206 
	`Ex¥essi⁄Assign
(
P¨£r
, 
AºayEÀmít
, 
CVÆue
, 
FALSE
, 
NULL
, 0, FALSE);

207 
	`V¨übÀSèckP›
(
P¨£r
, 
CVÆue
);

208 
	`V¨übÀSèckP›
(
P¨£r
, 
AºayEÀmít
);

211 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

214 i‡(
Tokí
 =
TokíComma
)

215 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

217 i‡(
Tokí
 !
TokíRightBø˚
)

218 
	`ProgømFaû
(
P¨£r
, "'}'Éxpected");

223 i‡(!
	`Ex¥essi⁄P¨£
(
P¨£r
, &
CVÆue
))

224 
	`ProgømFaû
(
P¨£r
, "expressionÉxpected");

226 i‡(
P¨£r
->
Mode
 =
RunModeRun
 && 
DoAssignmít
)

228 
	`Ex¥essi⁄Assign
(
P¨£r
, 
NewV¨übÀ
, 
CVÆue
, 
FALSE
, 
NULL
, 0, FALSE);

229 
	`V¨übÀSèckP›
(
P¨£r
, 
CVÆue
);

232 
	}
}

235 
	$P¨£De˛¨©i⁄
(
P¨£Sèã
 *
P¨£r
, 
LexTokí
 
Tokí
)

238 *
Idítifõr
;

239 
VÆueTy≥
 *
BasicTy≥
;

240 
VÆueTy≥
 *
Typ
;

241 
VÆue
 *
NewV¨übÀ
 = 
NULL
;

242 
IsSètic
 = 
FALSE
;

243 
Fú°Visô
 = 
FALSE
;

245 
	`Ty≥P¨£Fr⁄t
(
P¨£r
, &
BasicTy≥
, &
IsSètic
);

248 
	`Ty≥P¨£IdítP¨t
(
P¨£r
, 
BasicTy≥
, &
Typ
, &
Idítifõr
);

249 i‡((
Tokí
 !
TokíVoidTy≥
 && Tokí !
TokíSåu˘Ty≥
 && Tokí !
TokíUni⁄Ty≥
 && Tokí !
TokíEnumTy≥
Ë&& 
Idítifõr
 =
SåEm±y
)

250 
	`ProgømFaû
(
P¨£r
, "identifierÉxpected");

252 i‡(
Idítifõr
 !
SåEm±y
)

255 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíO≥nBøckë
)

257 
	`P¨£Fun˘i⁄Deföôi⁄
(
P¨£r
, 
Typ
, 
Idítifõr
);

258  
FALSE
;

262 i‡(
Typ
 =&
VoidTy≥
 && 
Idítifõr
 !
SåEm±y
)

263 
	`ProgømFaû
(
P¨£r
, "can't defineá void variable");

265 i‡(
P¨£r
->
Mode
 =
RunModeRun
 || P¨£r->Modê=
RunModeGŸo
)

266 
NewV¨übÀ
 = 
	`V¨übÀDeföeButIgn‹eIdítiˇl
(
P¨£r
, 
Idítifõr
, 
Typ
, 
IsSètic
, &
Fú°Visô
);

268 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíAssign
)

271 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

272 
	`P¨£De˛¨©i⁄Assignmít
(
P¨£r
, 
NewV¨übÀ
, !
IsSètic
 || 
Fú°Visô
);

277 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
);

278 i‡(
Tokí
 =
TokíComma
)

279 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

281 } 
Tokí
 =
TokíComma
);

283  
TRUE
;

284 
	}
}

287 
	$P¨£Ma¸oDeföôi⁄
(
P¨£Sèã
 *
P¨£r
)

289 
VÆue
 *
Ma¸oName
;

290 *
Ma¸oNameSå
;

291 
VÆue
 *
P¨amName
;

292 
VÆue
 *
Ma¸oVÆue
;

294 i‡(
	`LexGëTokí
(
P¨£r
, &
Ma¸oName
, 
TRUE
Ë!
TokíIdítifõr
)

295 
	`ProgømFaû
(
P¨£r
, "identifierÉxpected");

297 
Ma¸oNameSå
 = 
Ma¸oName
->
VÆ
->
Idítifõr
;

299 i‡(
	`LexRawPìkTokí
(
P¨£r
Ë=
TokíO≥nMa¸oBøckë
)

302 
LexTokí
 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

303 
P¨£Sèã
 
P¨amP¨£r
;

304 
NumP¨ams
;

305 
P¨amCou¡
 = 0;

307 
	`P¨£rC›y
(&
P¨amP¨£r
, 
P¨£r
);

308 
NumP¨ams
 = 
	`P¨£Cou¡P¨ams
(&
P¨amP¨£r
);

309 
Ma¸oVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
P¨£r
, (
Ma¸oDef
Ë+ (c⁄° *Ë* 
NumP¨ams
, 
FALSE
, 
NULL
, 
TRUE
);

310 
Ma¸oVÆue
->
VÆ
->
Ma¸oDef
.
NumP¨ams
 = NumParams;

311 
Ma¸oVÆue
->
VÆ
->
Ma¸oDef
.
P¨amName
 = (**)((*)MacroValue->Val + (MacroDef));

313 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
P¨amName
, 
TRUE
);

315 
Tokí
 =
TokíIdítifõr
)

318 
Ma¸oVÆue
->
VÆ
->
Ma¸oDef
.
P¨amName
[
P¨amCou¡
++] = P¨amName->VÆ->
Idítifõr
;

321 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

322 i‡(
Tokí
 =
TokíComma
)

323 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
P¨amName
, 
TRUE
);

325 i‡(
Tokí
 !
TokíClo£Bøckë
)

326 
	`ProgømFaû
(
P¨£r
, "commaÉxpected");

329 i‡(
Tokí
 !
TokíClo£Bøckë
)

330 
	`ProgømFaû
(
P¨£r
, "close bracketÉxpected");

335 
Ma¸oVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
P¨£r
, (
Ma¸oDef
), 
FALSE
, 
NULL
, 
TRUE
);

336 
Ma¸oVÆue
->
VÆ
->
Ma¸oDef
.
NumP¨ams
 = 0;

340 
	`P¨£rC›y
(&
Ma¸oVÆue
->
VÆ
->
Ma¸oDef
.
Body
, 
P¨£r
);

341 
Ma¸oVÆue
->
Typ
 = &
Ma¸oTy≥
;

342 
	`LexToEndOfLöe
(
P¨£r
);

343 
Ma¸oVÆue
->
VÆ
->
Ma¸oDef
.
Body
.
Pos
 = 
	`LexC›yTokís
(&Ma¸oVÆue->VÆ->Ma¸oDef.Body, 
P¨£r
);

345 i‡(!
	`TabÀSë
(&
GlobÆTabÀ
, 
Ma¸oNameSå
, 
Ma¸oVÆue
, (*)
P¨£r
->
FûeName
, P¨£r->
Löe
, P¨£r->
Ch¨a˘îPos
))

346 
	`ProgømFaû
(
P¨£r
, "'%s' i†Æªady deföed", 
Ma¸oNameSå
);

347 
	}
}

350 
	$P¨£rC›y
(
P¨£Sèã
 *
To
, P¨£Sèã *
From
)

352 
	`mem˝y
((*)
To
, (*)
From
, (*To));

353 
	}
}

356 
	$P¨£rC›yPos
(
P¨£Sèã
 *
To
, P¨£Sèã *
From
)

358 
To
->
Pos
 = 
From
->Pos;

359 
To
->
Löe
 = 
From
->Line;

360 
To
->
HashIfLevñ
 = 
From
->HashIfLevel;

361 
To
->
HashIfEvÆu©eToLevñ
 = 
From
->HashIfEvaluateToLevel;

362 
To
->
Ch¨a˘îPos
 = 
From
->CharacterPos;

363 
	}
}

366 
	$P¨£F‹
(
P¨£Sèã
 *
P¨£r
)

368 
C⁄dôi⁄
;

369 
P¨£Sèã
 
PªC⁄dôi⁄Æ
;

370 
P¨£Sèã
 
PªIn¸emít
;

371 
P¨£Sèã
 
PªSèãmít
;

372 
P¨£Sèã
 
A·î
;

374 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíO≥nBøckë
)

375 
	`ProgømFaû
(
P¨£r
, "'('Éxpected");

377 i‡(
	`P¨£Sèãmít
(
P¨£r
, 
TRUE
Ë!
P¨£Resu…Ok
)

378 
	`ProgømFaû
(
P¨£r
, "statementÉxpected");

380 
	`P¨£rC›yPos
(&
PªC⁄dôi⁄Æ
, 
P¨£r
);

381 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíSemicﬁ⁄
)

382 
C⁄dôi⁄
 = 
TRUE
;

384 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

386 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíSemicﬁ⁄
)

387 
	`ProgømFaû
(
P¨£r
, "';'Éxpected");

389 
	`P¨£rC›yPos
(&
PªIn¸emít
, 
P¨£r
);

390 
	`P¨£SèãmítMaybeRun
(
P¨£r
, 
FALSE
, FALSE);

392 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíClo£Bøckë
)

393 
	`ProgømFaû
(
P¨£r
, "')'Éxpected");

395 
	`P¨£rC›yPos
(&
PªSèãmít
, 
P¨£r
);

396 i‡(
	`P¨£SèãmítMaybeRun
(
P¨£r
, 
C⁄dôi⁄
, 
TRUE
Ë!
P¨£Resu…Ok
)

397 
	`ProgømFaû
(
P¨£r
, "statementÉxpected");

399 i‡(
P¨£r
->
Mode
 =
RunModeC⁄töue
)

400 
P¨£r
->
Mode
 = 
RunModeRun
;

402 
	`P¨£rC›yPos
(&
A·î
, 
P¨£r
);

404 
C⁄dôi⁄
 && 
P¨£r
->
Mode
 =
RunModeRun
)

406 
	`P¨£rC›yPos
(
P¨£r
, &
PªIn¸emít
);

407 
	`P¨£Sèãmít
(
P¨£r
, 
FALSE
);

409 
	`P¨£rC›yPos
(
P¨£r
, &
PªC⁄dôi⁄Æ
);

410 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíSemicﬁ⁄
)

411 
C⁄dôi⁄
 = 
TRUE
;

413 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

415 i‡(
C⁄dôi⁄
)

417 
	`P¨£rC›yPos
(
P¨£r
, &
PªSèãmít
);

418 
	`P¨£Sèãmít
(
P¨£r
, 
TRUE
);

420 i‡(
P¨£r
->
Mode
 =
RunModeC⁄töue
)

421 
P¨£r
->
Mode
 = 
RunModeRun
;

425 i‡(
P¨£r
->
Mode
 =
RunModeBªak
)

426 
P¨£r
->
Mode
 = 
RunModeRun
;

428 
	`P¨£rC›yPos
(
P¨£r
, &
A·î
);

429 
	}
}

432 
RunMode
 
	$P¨£Block
(
P¨£Sèã
 *
P¨£r
, 
Abs‹bO≥nBø˚
, 
C⁄dôi⁄
)

434 i‡(
Abs‹bO≥nBø˚
 && 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíLe·Bø˚
)

435 
	`ProgømFaû
(
P¨£r
, "'{'Éxpected");

437 i‡(
P¨£r
->
Mode
 =
RunModeSkù
 || !
C⁄dôi⁄
)

440 
RunMode
 
OldMode
 = 
P¨£r
->
Mode
;

441 
P¨£r
->
Mode
 = 
RunModeSkù
;

442 
	`P¨£Sèãmít
(
P¨£r
, 
TRUE
Ë=
P¨£Resu…Ok
)

444 
P¨£r
->
Mode
 = 
OldMode
;

449 
	`P¨£Sèãmít
(
P¨£r
, 
TRUE
Ë=
P¨£Resu…Ok
)

453 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíRightBø˚
)

454 
	`ProgømFaû
(
P¨£r
, "'}'Éxpected");

456  
P¨£r
->
Mode
;

457 
	}
}

460 
	$P¨£Ty≥def
(
P¨£Sèã
 *
P¨£r
)

463 
VÆueTy≥
 *
Typ
;

464 
VÆueTy≥
 **
TypPå
;

465 *
Ty≥Name
;

466 
VÆue
 
InôVÆue
;

468 
	`Ty≥P¨£
(
P¨£r
, &
Typ
, &
Ty≥Name
, 
NULL
);

470 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

472 
TypPå
 = &
Typ
;

473 
InôVÆue
.
Typ
 = &
Ty≥Ty≥
;

474 
InôVÆue
.
VÆ
 = (
AnyVÆue
 *)
TypPå
;

475 
	`V¨übÀDeföe
(
P¨£r
, 
Ty≥Name
, &
InôVÆue
, 
NULL
, 
FALSE
);

477 
	}
}

480 
P¨£Resu…
 
	$P¨£Sèãmít
(
P¨£Sèã
 *
P¨£r
, 
CheckTøûögSemicﬁ⁄
)

483 
VÆue
 *
CVÆue
;

484 
VÆue
 *
LexîVÆue
;

485 
VÆue
 *
V¨VÆue
;

486 
C⁄dôi⁄
;

487 
P¨£Sèã
 
PªSèã
;

488 
LexTokí
 
Tokí
;

490 
	`P¨£rC›y
(&
PªSèã
, 
P¨£r
);

491 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
TRUE
);

493 
Tokí
)

495 
TokíEOF
:

496  
P¨£Resu…EOF
;

498 
TokíIdítifõr
:

500 i‡(
	`V¨übÀDeföed
(
LexîVÆue
->
VÆ
->
Idítifõr
))

502 
	`V¨übÀGë
(
P¨£r
, 
LexîVÆue
->
VÆ
->
Idítifõr
, &
V¨VÆue
);

503 i‡(
V¨VÆue
->
Typ
->
Ba£
 =
Ty≥_Ty≥
)

505 *
P¨£r
 = 
PªSèã
;

506 
	`P¨£De˛¨©i⁄
(
P¨£r
, 
Tokí
);

513 
LexTokí
 
NextTokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
);

514 i‡(
NextTokí
 =
TokíCﬁ⁄
)

517 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

518 i‡(
P¨£r
->
Mode
 =
RunModeGŸo
 && 
LexîVÆue
->
VÆ
->
Idítifõr
 =P¨£r->
SórchGŸoLabñ
)

519 
P¨£r
->
Mode
 = 
RunModeRun
;

521 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

527 
TokíA°îisk
:

528 
TokíAm≥rßnd
:

529 
TokíIn¸emít
:

530 
TokíDe¸emít
:

531 
TokíO≥nBøckë
:

532 *
P¨£r
 = 
PªSèã
;

533 
	`Ex¥essi⁄P¨£
(
P¨£r
, &
CVÆue
);

534 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

535 
	`V¨übÀSèckP›
(
P¨£r
, 
CVÆue
);

538 
TokíLe·Bø˚
:

539 
	`P¨£Block
(
P¨£r
, 
FALSE
, 
TRUE
);

540 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

543 
TokíIf
:

544 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíO≥nBøckë
)

545 
	`ProgømFaû
(
P¨£r
, "'('Éxpected");

547 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

549 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíClo£Bøckë
)

550 
	`ProgømFaû
(
P¨£r
, "')'Éxpected");

552 i‡(
	`P¨£SèãmítMaybeRun
(
P¨£r
, 
C⁄dôi⁄
, 
TRUE
Ë!
P¨£Resu…Ok
)

553 
	`ProgømFaû
(
P¨£r
, "statementÉxpected");

555 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíEl£
)

557 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

558 i‡(
	`P¨£SèãmítMaybeRun
(
P¨£r
, !
C⁄dôi⁄
, 
TRUE
Ë!
P¨£Resu…Ok
)

559 
	`ProgømFaû
(
P¨£r
, "statementÉxpected");

561 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

564 
TokíWhûe
:

566 
P¨£Sèã
 
PªC⁄dôi⁄Æ
;

567 
RunMode
 
PªMode
 = 
P¨£r
->
Mode
;

569 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíO≥nBøckë
)

570 
	`ProgømFaû
(
P¨£r
, "'('Éxpected");

572 
	`P¨£rC›yPos
(&
PªC⁄dôi⁄Æ
, 
P¨£r
);

575 
	`P¨£rC›yPos
(
P¨£r
, &
PªC⁄dôi⁄Æ
);

576 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

577 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíClo£Bøckë
)

578 
	`ProgømFaû
(
P¨£r
, "')'Éxpected");

580 i‡(
	`P¨£SèãmítMaybeRun
(
P¨£r
, 
C⁄dôi⁄
, 
TRUE
Ë!
P¨£Resu…Ok
)

581 
	`ProgømFaû
(
P¨£r
, "statementÉxpected");

583 i‡(
P¨£r
->
Mode
 =
RunModeC⁄töue
)

584 
P¨£r
->
Mode
 = 
PªMode
;

586 } 
P¨£r
->
Mode
 =
RunModeRun
 && 
C⁄dôi⁄
);

588 i‡(
P¨£r
->
Mode
 =
RunModeBªak
)

589 
P¨£r
->
Mode
 = 
PªMode
;

591 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

595 
TokíDo
:

597 
P¨£Sèã
 
PªSèãmít
;

598 
RunMode
 
PªMode
 = 
P¨£r
->
Mode
;

599 
	`P¨£rC›yPos
(&
PªSèãmít
, 
P¨£r
);

602 
	`P¨£rC›yPos
(
P¨£r
, &
PªSèãmít
);

603 i‡(
	`P¨£Sèãmít
(
P¨£r
, 
TRUE
Ë!
P¨£Resu…Ok
)

604 
	`ProgømFaû
(
P¨£r
, "statementÉxpected");

606 i‡(
P¨£r
->
Mode
 =
RunModeC⁄töue
)

607 
P¨£r
->
Mode
 = 
PªMode
;

609 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíWhûe
)

610 
	`ProgømFaû
(
P¨£r
, "'while'Éxpected");

612 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíO≥nBøckë
)

613 
	`ProgømFaû
(
P¨£r
, "'('Éxpected");

615 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

616 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíClo£Bøckë
)

617 
	`ProgømFaû
(
P¨£r
, "')'Éxpected");

619 } 
C⁄dôi⁄
 && 
P¨£r
->
Mode
 =
RunModeRun
);

621 i‡(
P¨£r
->
Mode
 =
RunModeBªak
)

622 
P¨£r
->
Mode
 = 
PªMode
;

626 
TokíF‹
:

627 
	`P¨£F‹
(
P¨£r
);

628 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

631 
TokíSemicﬁ⁄
:

632 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

635 
TokíI¡Ty≥
:

636 
TokíSh‹tTy≥
:

637 
TokíCh¨Ty≥
:

638 
TokíL⁄gTy≥
:

639 
TokíFlﬂtTy≥
:

640 
TokíDoubÀTy≥
:

641 
TokíVoidTy≥
:

642 
TokíSåu˘Ty≥
:

643 
TokíUni⁄Ty≥
:

644 
TokíEnumTy≥
:

645 
TokíSig√dTy≥
:

646 
TokíUnsig√dTy≥
:

647 
TokíSèticTy≥
:

648 
TokíAutoTy≥
:

649 
TokíRegi°îTy≥
:

650 
TokíExã∫Ty≥
:

651 *
P¨£r
 = 
PªSèã
;

652 
CheckTøûögSemicﬁ⁄
 = 
	`P¨£De˛¨©i⁄
(
P¨£r
, 
Tokí
);

655 
TokíHashDeföe
:

656 
	`P¨£Ma¸oDeföôi⁄
(
P¨£r
);

657 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

660 #i‚de‡
NO_HASH_INCLUDE


661 
TokíHashIn˛ude
:

662 i‡(
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
TRUE
Ë!
TokíSåögC⁄°™t
)

663 
	`ProgømFaû
(
P¨£r
, "\"filename.h\"Éxpected");

665 
	`In˛udeFûe
((*)
LexîVÆue
->
VÆ
->
Poöãr
);

666 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

670 
TokíSwôch
:

671 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíO≥nBøckë
)

672 
	`ProgømFaû
(
P¨£r
, "'('Éxpected");

674 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

676 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíClo£Bøckë
)

677 
	`ProgømFaû
(
P¨£r
, "')'Éxpected");

679 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë!
TokíLe·Bø˚
)

680 
	`ProgømFaû
(
P¨£r
, "'{'Éxpected");

684 
RunMode
 
OldMode
 = 
P¨£r
->
Mode
;

685 
OldSórchLabñ
 = 
P¨£r
->
SórchLabñ
;

686 
P¨£r
->
Mode
 = 
RunModeCa£Sórch
;

687 
P¨£r
->
SórchLabñ
 = 
C⁄dôi⁄
;

689 
	`P¨£Block
(
P¨£r
, 
TRUE
, 
OldMode
 !
RunModeSkù
);

691 i‡(
P¨£r
->
Mode
 !
RunModeRëu∫
)

692 
P¨£r
->
Mode
 = 
OldMode
;

694 
P¨£r
->
SórchLabñ
 = 
OldSórchLabñ
;

697 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

700 
TokíCa£
:

701 i‡(
P¨£r
->
Mode
 =
RunModeCa£Sórch
)

703 
P¨£r
->
Mode
 = 
RunModeRun
;

704 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

705 
P¨£r
->
Mode
 = 
RunModeCa£Sórch
;

708 
C⁄dôi⁄
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

710 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíCﬁ⁄
)

711 
	`ProgømFaû
(
P¨£r
, "':'Éxpected");

713 i‡(
P¨£r
->
Mode
 =
RunModeCa£Sórch
 && 
C⁄dôi⁄
 =P¨£r->
SórchLabñ
)

714 
P¨£r
->
Mode
 = 
RunModeRun
;

716 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

719 
TokíDeÁu…
:

720 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíCﬁ⁄
)

721 
	`ProgømFaû
(
P¨£r
, "':'Éxpected");

723 i‡(
P¨£r
->
Mode
 =
RunModeCa£Sórch
)

724 
P¨£r
->
Mode
 = 
RunModeRun
;

726 
CheckTøûögSemicﬁ⁄
 = 
FALSE
;

729 
TokíBªak
:

730 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

731 
P¨£r
->
Mode
 = 
RunModeBªak
;

734 
TokíC⁄töue
:

735 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

736 
P¨£r
->
Mode
 = 
RunModeC⁄töue
;

739 
TokíRëu∫
:

740 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

742 i‡(
T›SèckFøme
->
Rëu∫VÆue
->
Typ
->
Ba£
 !
Ty≥Void
)

744 i‡(!
	`Ex¥essi⁄P¨£
(
P¨£r
, &
CVÆue
))

745 
	`ProgømFaû
(
P¨£r
, "valueÑequired inÑeturn");

747 
	`Ex¥essi⁄Assign
(
P¨£r
, 
T›SèckFøme
->
Rëu∫VÆue
, 
CVÆue
, 
TRUE
, 
NULL
, 0, 
FALSE
);

748 
	`V¨übÀSèckP›
(
P¨£r
, 
CVÆue
);

752 i‡(
	`Ex¥essi⁄P¨£
(
P¨£r
, &
CVÆue
))

753 
	`ProgømFaû
(
P¨£r
, "value inÑeturn fromá void function");

756 
P¨£r
->
Mode
 = 
RunModeRëu∫
;

759 
	`Ex¥essi⁄P¨£
(
P¨£r
, &
CVÆue
);

762 
TokíTy≥def
:

763 
	`P¨£Ty≥def
(
P¨£r
);

766 
TokíGŸo
:

767 i‡(
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
TRUE
Ë!
TokíIdítifõr
)

768 
	`ProgømFaû
(
P¨£r
, "identifierÉxpected");

770 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

773 
P¨£r
->
SórchGŸoLabñ
 = 
LexîVÆue
->
VÆ
->
Idítifõr
;

774 
P¨£r
->
Mode
 = 
RunModeGŸo
;

778 
TokíDñëe
:

781 i‡(
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
TRUE
Ë!
TokíIdítifõr
)

782 
	`ProgømFaû
(
P¨£r
, "identifierÉxpected");

784 i‡(
P¨£r
->
Mode
 =
RunModeRun
)

787 
CVÆue
 = 
	`TabÀDñëe
(&
GlobÆTabÀ
, 
LexîVÆue
->
VÆ
->
Idítifõr
);

789 i‡(
CVÆue
 =
NULL
)

790 
	`ProgømFaû
(
P¨£r
, "'%s' i†nŸ deföed", 
LexîVÆue
->
VÆ
->
Idítifõr
);

792 
	`V¨übÀFªe
(
CVÆue
);

798 *
P¨£r
 = 
PªSèã
;

799  
P¨£Resu…Eº‹
;

802 i‡(
CheckTøûögSemicﬁ⁄
)

804 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíSemicﬁ⁄
)

805 
	`ProgømFaû
(
P¨£r
, "';'Éxpected");

808  
P¨£Resu…Ok
;

809 
	}
}

812 
	$PicocP¨£
(c⁄° *
FûeName
, c⁄° *
Sour˚
, 
Sour˚Lí
, 
RunIt
, 
CÀ™upNow
, 
CÀ™upSour˚
)

815 
P¨£Sèã
 
P¨£r
;

816 
P¨£Resu…
 
Ok
;

817 
CÀ™upTokíNode
 *
NewCÀ™upNode
;

819 *
Tokís
 = 
	`LexA«ly£
(
FûeName
, 
Sour˚
, 
Sour˚Lí
, 
NULL
);

822 i‡(!
CÀ™upNow
)

824 
NewCÀ™upNode
 = 
	`HópAŒocMem
((
CÀ™upTokíNode
));

825 i‡(
NewCÀ™upNode
 =
NULL
)

826 
	`ProgømFaû
(
NULL
, "out of memory");

828 
NewCÀ™upNode
->
Tokís
 = Tokens;

829 i‡(
CÀ™upSour˚
)

830 
NewCÀ™upNode
->
Sour˚Text
 = 
Sour˚
;

832 
NewCÀ™upNode
->
Sour˚Text
 = 
NULL
;

834 
NewCÀ™upNode
->
Next
 = 
CÀ™upTokíLi°
;

835 
CÀ™upTokíLi°
 = 
NewCÀ™upNode
;

839 
	`LexInôP¨£r
(&
P¨£r
, 
Sour˚
, 
Tokís
, 
FûeName
, 
RunIt
);

842 
Ok
 = 
	`P¨£Sèãmít
(&
P¨£r
, 
TRUE
);

843 } 
Ok
 =
P¨£Resu…Ok
);

845 i‡(
Ok
 =
P¨£Resu…Eº‹
)

846 
	`ProgømFaû
(&
P¨£r
, "parseÉrror");

849 i‡(
CÀ™upNow
)

850 
	`HópFªeMem
(
Tokís
);

851 
	}
}

854 
	$PicocP¨£I¡îa˘ive
()

856 
P¨£Sèã
 
P¨£r
;

857 
P¨£Resu…
 
Ok
;

859 
	`Pœtf‹mPrötf
(
INTERACTIVE_PROMPT_START
);

860 
	`LexInôP¨£r
(&
P¨£r
, 
NULL
, NULL, 
SåEm±y
, 
TRUE
);

862 
	`LexI¡îa˘iveCÀ¨
(&
P¨£r
);

865 
	`LexI¡îa˘iveSèãmítProm±
();

866 
Ok
 = 
	`P¨£Sèãmít
(&
P¨£r
, 
TRUE
);

867 
	`LexI¡îa˘iveCom∂ëed
(&
P¨£r
);

869 } 
Ok
 =
P¨£Resu…Ok
);

871 i‡(
Ok
 =
P¨£Resu…Eº‹
)

872 
	`ProgømFaû
(&
P¨£r
, "parseÉrror");

874 
	`Pœtf‹mPrötf
("\n");

875 
	}
}

	@picoc.c

2 
	~"picoc.h
"

6 #ifde‡
UNIX_HOST


7 
	~<°dlib.h
>

8 
	~"°dio.h
"

9 
	~<°rög.h
>

11 
	#PICOC_STACK_SIZE
 (128*1024Ë

	)

13 
	$maö
(
¨gc
, **
¨gv
)

15 
P¨amCou¡
 = 1;

16 
D⁄tRunMaö
 = 
FALSE
;

18 
SèckSize
 = 
PICOC_STACK_SIZE
;

20 i‡(
¨gc
 < 2)

22 
	`¥ötf
("Format:Öicoc <csource1.c>... [- <arg1>...] :ÑunáÖrogram (calls main()Åo start it)\n"

25 
	`exô
(1);

28 
	`PicocInôüli£
(
SèckSize
);

30 i‡(
	`°rcmp
(
¨gv
[
P¨amCou¡
], "-s") == 0 || strcmp(argv[ParamCount], "-m") == 0)

32 
D⁄tRunMaö
 = 
TRUE
;

33 
	`PicocIn˛udeAŒSy°emHódîs
();

34 
P¨amCou¡
++;

37 i‡(
¨gc
 > 
P¨amCou¡
 && 
	`°rcmp
(
¨gv
[ParamCount], "-i") == 0)

39 
	`PicocIn˛udeAŒSy°emHódîs
();

40 
	`PicocP¨£I¡îa˘ive
();

50 ; 
P¨amCou¡
 < 
¨gc
 && 
	`°rcmp
(
¨gv
[ParamCount], "-") != 0; ParamCount++)

51 
	`PicocPœtf‹mSˇnFûe
(
¨gv
[
P¨amCou¡
]);

53 i‡(!
D⁄tRunMaö
)

54 
	`PicocCÆlMaö
(
¨gc
 - 
P¨amCou¡
, &
¨gv
[ParamCount]);

56 
	`PicocCÀ™up
();

57 
	`exô
(1);

58  
PicocExôVÆue
;

59 
	}
}

61 #ifde‡
SURVEYOR_HOST


62 
	#HEAP_SIZE
 
C_HEAPSIZE


	)

64 
	~"../§v.h
"

65 
	~"../¥öt.h
"

66 
	~"../°rög.h
"

68 
	$picoc
(*
Sour˚Så
)

70 *
pos
;

72 
	`PicocInôüli£
(
HEAP_SIZE
);

74 i‡(
Sour˚Så
)

76 
pos
 = 
Sour˚Så
; *pos != 0;Öos++)

78 i‡(*
pos
 == 0x1a)

80 *
pos
 = 0x20;

85 
PicocExôBuf
[40] = 0;

87 i‡(
PicocExôBuf
[40]) {

88 
	`¥ötf
("Leaving PicoC\n\r");

89 
	`PicocCÀ™up
();

90  
PicocExôVÆue
;

93 i‡(
Sour˚Så
)

94 
	`PicocP¨£
("nofûe", 
Sour˚Så
, 
	`°æí
(Sour˚Så), 
TRUE
, TRUE, 
FALSE
);

96 
	`PicocP¨£I¡îa˘ive
();

97 
	`PicocCÀ™up
();

99  
PicocExôVÆue
;

100 
	}
}

	@picoc.h

1 #i‚de‡
PICOC_H


2 
	#PICOC_H


	)

5 
	#PICOC_VERSION
 "v2.1"

	)

8 #i‚de‡
TRUE


9 
	#TRUE
 1

	)

10 
	#FALSE
 0

	)

14 #ifde‡
UNIX_HOST


15 
	~<£tjmp.h
>

21 
	#PicocPœtf‹mSëExôPoöt
(Ë
	`£tjmp
(
PicocExôBuf
)

	)

24 #ifde‡
SURVEYOR_HOST


26 
PicocExôBuf
[];

28 
	#PicocPœtf‹mSëExôPoöt
(Ë
	`£tjmp
(
PicocExôBuf
)

	)

32 
PicocP¨£
(c⁄° *
FûeName
, c⁄° *
Sour˚
, 
Sour˚Lí
, 
RunIt
, 
CÀ™upNow
, 
CÀ™upSour˚
);

33 
PicocP¨£I¡îa˘ive
();

36 
PicocCÆlMaö
(
¨gc
, **
¨gv
);

37 
PicocInôüli£
(
SèckSize
);

38 
PicocCÀ™up
();

39 
PicocPœtf‹mSˇnFûe
(c⁄° *
FûeName
);

41 
PicocExôVÆue
;

44 
PicocIn˛udeAŒSy°emHódîs
();

	@platform.c

1 
	~"picoc.h
"

2 
	~"öãΩªãr.h
"

5 
	gPicocExôVÆue
 = 0;

8 
	$PicocInôüli£
(
SèckSize
)

10 
	`BasicIOInô
();

11 
	`HópInô
(
SèckSize
);

12 
	`TabÀInô
();

13 
	`V¨übÀInô
();

14 
	`LexInô
();

15 
	`Ty≥Inô
();

16 #i‚de‡
NO_HASH_INCLUDE


17 
	`In˛udeInô
();

19 
	`LibøryInô
();

20 #ifde‡
BUILTIN_MINI_STDLIB


21 
	`LibøryAdd
(&
GlobÆTabÀ
, "¯libøry", &
CLibøry
[0]);

22 
	`CLibøryInô
();

24 
	`Pœtf‹mLibøryInô
();

25 
	}
}

28 
	$PicocCÀ™up
()

30 
	`Pœtf‹mCÀ™up
();

31 #i‚de‡
NO_HASH_INCLUDE


32 
	`In˛udeCÀ™up
();

34 
	`P¨£CÀ™up
();

35 
	`LexCÀ™up
();

36 
	`V¨übÀCÀ™up
();

37 
	`Ty≥CÀ™up
();

38 
	`TabÀSåFªe
();

39 
	`HópCÀ™up
();

40 
	}
}

43 #ifde‡
UNIX_HOST


45 
	#CALL_MAIN_NO_ARGS_RETURN_VOID
 "maö();"

	)

46 
	#CALL_MAIN_WITH_ARGS_RETURN_VOID
 "maö(__¨gc,__¨gv);"

	)

47 
	#CALL_MAIN_NO_ARGS_RETURN_INT
 "__exô_vÆuêmaö();"

	)

48 
	#CALL_MAIN_WITH_ARGS_RETURN_INT
 "__exô_vÆuêmaö(__¨gc,__¨gv);"

	)

50 
	$PicocCÆlMaö
(
¨gc
, **
¨gv
)

54 
VÆue
 *
FuncVÆue
 = 
NULL
;

56 i‡(!
	`V¨übÀDeföed
(
	`TabÀSåRegi°î
("main")))

57 
	`ProgømFaû
(
NULL
, "main() isÇot defined");

59 
	`V¨übÀGë
(
NULL
, 
	`TabÀSåRegi°î
("maö"), &
FuncVÆue
);

60 i‡(
FuncVÆue
->
Typ
->
Ba£
 !
Ty≥Fun˘i⁄
)

61 
	`ProgømFaû
(
NULL
, "main isÇotá function - can't call it");

63 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
 != 0)

66 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "__¨gc", &
I¡Ty≥
, (
AnyVÆue
 *)&
¨gc
, 
FALSE
);

67 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "__¨gv", 
Ch¨PåPåTy≥
, (
AnyVÆue
 *)&
¨gv
, 
FALSE
);

70 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
Rëu∫Ty≥
 =&
VoidTy≥
)

72 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
 == 0)

73 
	`PicocP¨£
("°¨tup", 
CALL_MAIN_NO_ARGS_RETURN_VOID
, 
	`°æí
(CALL_MAIN_NO_ARGS_RETURN_VOID), 
TRUE
, TRUE, 
FALSE
);

75 
	`PicocP¨£
("°¨tup", 
CALL_MAIN_WITH_ARGS_RETURN_VOID
, 
	`°æí
(CALL_MAIN_WITH_ARGS_RETURN_VOID), 
TRUE
, TRUE, 
FALSE
);

79 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "__exô_vÆue", &
I¡Ty≥
, (
AnyVÆue
 *)&
PicocExôVÆue
, 
TRUE
);

81 i‡(
FuncVÆue
->
VÆ
->
FuncDef
.
NumP¨ams
 == 0)

82 
	`PicocP¨£
("°¨tup", 
CALL_MAIN_NO_ARGS_RETURN_INT
, 
	`°æí
(CALL_MAIN_NO_ARGS_RETURN_INT), 
TRUE
, TRUE, 
FALSE
);

84 
	`PicocP¨£
("°¨tup", 
CALL_MAIN_WITH_ARGS_RETURN_INT
, 
	`°æí
(CALL_MAIN_WITH_ARGS_RETURN_INT), 
TRUE
, TRUE, 
FALSE
);

86 
	}
}

89 
	$PrötSour˚TextEº‹Löe
(c⁄° *
FûeName
, c⁄° *
Sour˚Text
, 
Löe
, 
Ch¨a˘îPos
)

91 
LöeCou¡
;

92 c⁄° *
LöePos
;

93 c⁄° *
CPos
;

94 
CCou¡
;

96 i‡(
Sour˚Text
 !
NULL
)

99 
LöePos
 = 
Sour˚Text
, 
LöeCou¡
 = 1; *LöePo†!'\0' && LöeCou¡ < 
Löe
; LinePos++)

101 i‡(*
LöePos
 == '\n')

102 
LöeCou¡
++;

106 
CPos
 = 
LöePos
; *CPos != '\n' && *CPos != '\0'; CPos++)

107 
	`PrötCh
(*
CPos
, 
CStdOut
);

108 
	`PrötCh
('\n', 
CStdOut
);

111 
CPos
 = 
LöePos
, 
CCou¡
 = 0; *CPo†!'\n' && *CPo†!'\0' && (CCou¡ < 
Ch¨a˘îPos
 || *CPos == ' '); CPos++, CCount++)

113 i‡(*
CPos
 == '\t')

114 
	`PrötCh
('\t', 
CStdOut
);

116 
	`PrötCh
(' ', 
CStdOut
);

122 
CCou¡
 = 0; CCou¡ < 
Ch¨a˘îPos
 + 
	`°æí
(
INTERACTIVE_PROMPT_STATEMENT
); CCount++)

123 
	`PrötCh
(' ', 
CStdOut
);

125 
	`Pœtf‹mPrötf
("^\n%s:%d: ", 
FûeName
, 
Löe
, 
Ch¨a˘îPos
);

127 
	}
}

130 
	$Pœtf‹mEº‹Pªfix
(
P¨£Sèã
 *
P¨£r
)

132 i‡(
P¨£r
 !
NULL
)

133 
	`PrötSour˚TextEº‹Löe
(
P¨£r
->
FûeName
, P¨£r->
Sour˚Text
, P¨£r->
Löe
, P¨£r->
Ch¨a˘îPos
);

134 
	}
}

137 
	$ProgømFaû
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Mesßge
, ...)

139 
va_li°
 
Args
;

141 
	`Pœtf‹mEº‹Pªfix
(
P¨£r
);

142 
	`va_°¨t
(
Args
, 
Mesßge
);

143 
	`Pœtf‹mVPrötf
(
Mesßge
, 
Args
);

144 
	`va_íd
(
Args
);

145 
	`Pœtf‹mPrötf
("\n");

146 
	`Pœtf‹mExô
(1);

147 
	}
}

150 
	$AssignFaû
(
P¨£Sèã
 *
P¨£r
, c⁄° *
F‹m©
, 
VÆueTy≥
 *
Ty≥1
, VÆueTy≥ *
Ty≥2
, 
Num1
, 
Num2
, c⁄° *
FuncName
, 
P¨amNo
)

152 
	`Pœtf‹mEº‹Pªfix
(
P¨£r
);

153 
	`Pœtf‹mPrötf
("ˇn'à%†", (
FuncName
 =
NULL
) ? "assign" : "set");

155 i‡(
Ty≥1
 !
NULL
)

156 
	`Pœtf‹mPrötf
(
F‹m©
, 
Ty≥1
, 
Ty≥2
);

158 
	`Pœtf‹mPrötf
(
F‹m©
, 
Num1
, 
Num2
);

160 i‡(
FuncName
 !
NULL
)

161 
	`Pœtf‹mPrötf
(" i¿¨gumíà%d o‡ˇŒÅÿ%s()", 
P¨amNo
, 
FuncName
);

163 
	`ProgømFaû
(
NULL
, "");

164 
	}
}

167 
	$LexFaû
(
LexSèã
 *
Lexî
, c⁄° *
Mesßge
, ...)

169 
va_li°
 
Args
;

171 
	`PrötSour˚TextEº‹Löe
(
Lexî
->
FûeName
, Lexî->
Sour˚Text
, Lexî->
Löe
, Lexî->
Ch¨a˘îPos
);

172 
	`va_°¨t
(
Args
, 
Mesßge
);

173 
	`Pœtf‹mVPrötf
(
Mesßge
, 
Args
);

174 
	`va_íd
(
Args
);

175 
	`Pœtf‹mPrötf
("\n");

176 
	`Pœtf‹mExô
(8);

177 
	}
}

180 
	$Pœtf‹mPrötf
(c⁄° *
F‹m©
, ...)

182 
va_li°
 
Args
;

184 
	`va_°¨t
(
Args
, 
F‹m©
);

185 
	`Pœtf‹mVPrötf
(
F‹m©
, 
Args
);

186 
	`va_íd
(
Args
);

187 
	}
}

189 
	$Pœtf‹mVPrötf
(c⁄° *
F‹m©
, 
va_li°
 
Args
)

191 c⁄° *
FPos
;

193 
FPos
 = 
F‹m©
; *FPos != '\0'; FPos++)

195 i‡(*
FPos
 == '%')

197 
FPos
++;

198 *
FPos
)

200 's': 
	`PrötSå
(
	`va_¨g
(
Args
, *), 
CStdOut
); ;

201 'd': 
	`PrötSim∂eI¡
(
	`va_¨g
(
Args
, ), 
CStdOut
); ;

202 'c': 
	`PrötCh
(
	`va_¨g
(
Args
, ), 
CStdOut
); ;

203 't': 
	`PrötTy≥
(
	`va_¨g
(
Args
, 
VÆueTy≥
 *), 
CStdOut
); ;

204 #i‚de‡
NO_FP


205 'f': 
	`PrötFP
(
	`va_¨g
(
Args
, ), 
CStdOut
); ;

207 '%': 
	`PrötCh
('%', 
CStdOut
); ;

208 '\0': 
FPos
--; ;

212 
	`PrötCh
(*
FPos
, 
CStdOut
);

214 
	}
}

218 *
	$Pœtf‹mMakeTempName
(*
TempNameBuf„r
)

220 
CPos
 = 5;

222 
CPos
 > 1)

224 i‡(
TempNameBuf„r
[
CPos
] < '9')

226 
TempNameBuf„r
[
CPos
]++;

227  
	`TabÀSåRegi°î
(
TempNameBuf„r
);

231 
TempNameBuf„r
[
CPos
] = '0';

232 
CPos
--;

236  
	`TabÀSåRegi°î
(
TempNameBuf„r
);

237 
	}
}

	@platform.h

2 #i‚de‡
PLATFORM_H


3 
	#PLATFORM_H


	)

14 
	#LARGE_INT_POWER_OF_TEN
 1000000000

	)

15 #i‡
deföed
(
__hµa__
Ë|| deföed(
__•¨c__
)

16 
	#ALIGN_TYPE
 

	)

18 
	#ALIGN_TYPE
 *

	)

21 
	#GLOBAL_TABLE_SIZE
 97

	)

22 
	#STRING_TABLE_SIZE
 97

	)

23 
	#STRING_LITERAL_TABLE_SIZE
 97

	)

24 
	#PARAMETER_MAX
 16

	)

25 
	#LINEBUFFER_MAX
 256

	)

26 
	#LOCAL_TABLE_SIZE
 11

	)

27 
	#STRUCT_TABLE_SIZE
 11

	)

29 
	#INTERACTIVE_PROMPT_START
 "°¨tögÖico¯" 
PICOC_VERSION
 "\n"

	)

30 
	#INTERACTIVE_PROMPT_STATEMENT
 "picoc> "

	)

31 
	#INTERACTIVE_PROMPT_LINE
 " > "

	)

34 #ifde‡
UNIX_HOST


35 
	#USE_MALLOC_STACK


	)

36 
	#USE_MALLOC_HEAP


	)

37 
	~"°dio.h
"

38 
	~<°dlib.h
>

39 
	~<˘y≥.h
>

40 
	~<°rög.h
>

41 
	~<as£π.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<uni°d.h
>

45 
	~<°d¨g.h
>

46 
	~<£tjmp.h
>

47 #i‚de‡
NO_FP


48 
	~<m©h.h
>

49 
	#PICOC_MATH_LIBRARY


	)

50 
	#USE_READLINE


	)

51 #unde‡
BIG_ENDIAN


52 #i‡
deföed
(
__powîpc__
Ë|| deföed(
__hµa__
Ë|| deföed(
__•¨c__
)

53 
	#BIG_ENDIAN


	)

57 
jmp_buf
 
ExôBuf
;

60 #ifde‡
FLYINGFOX_HOST


61 
	#HEAP_SIZE
 (16*1024Ë

	)

62 
	#NO_HASH_INCLUDE


	)

63 
	~<°dlib.h
>

64 
	~<˘y≥.h
>

65 
	~<°rög.h
>

66 
	~<sys/ty≥s.h
>

67 
	~<°d¨g.h
>

68 
	~<£tjmp.h
>

69 
	~<m©h.h
>

70 
	#as£π
(
x
)

	)

71 
	#BUILTIN_MINI_STDLIB


	)

72 #unde‡
BIG_ENDIAN


75 #ifde‡
SURVEYOR_HOST


76 
	#HEAP_SIZE
 
C_HEAPSIZE


	)

77 
	#NO_FP


	)

78 
	#NO_CTYPE


	)

79 
	#NO_HASH_INCLUDE


	)

80 
	#NO_MODULUS


	)

81 
	~<cdefBF537.h
>

82 
	~"../°rög.h
"

83 
	~"../¥öt.h
"

84 
	~"../§v.h
"

85 
	~"../£tjmp.h
"

86 
	~"../°d¨g.h
"

87 
	~"../cﬁ‹s.h
"

88 
	~"../√uøl.h
"

89 
	~"../gps.h
"

90 
	~"../i2c.h
"

91 
	~"../j≥g.h
"

92 
	~"../mÆloc.h
"

93 
	~"../xmodem.h
"

94 
	#as£π
(
x
)

	)

95 #unde‡
BIG_ENDIAN


96 
	#NO_CALLOC


	)

97 
	#NO_REALLOC


	)

98 
	#BROKEN_FLOAT_CASTS


	)

99 
	#BUILTIN_MINI_STDLIB


	)

101 #ifde‡
UMON_HOST


102 
	#HEAP_SIZE
 (128*1024Ë

	)

103 
	#NO_FP


	)

104 
	#BUILTIN_MINI_STDLIB


	)

105 
	~<°dlib.h
>

106 
	~<°rög.h
>

107 
	~<˘y≥.h
>

108 
	~<sys/ty≥s.h
>

109 
	~<°d¨g.h
>

110 
	~<m©h.h
>

111 
	~"m⁄lib.h
"

112 
	#as£π
(
x
)

	)

113 
	#mÆloc
 
m⁄_mÆloc


	)

114 
	#ˇŒoc
(
a
,
b
Ë
	`m⁄_mÆloc
◊*b)

	)

115 
	#ªÆloc
 
m⁄_ªÆloc


	)

116 
	#‰ì
 
m⁄_‰ì


	)

120 
ExôBuf
[];

	@platform/library_ffox.c

1 
	~"../öãΩªãr.h
"

4 
LibøryFun˘i⁄
 
	gPœtf‹mLibøry
[] =

6 { 
NULL
, NULL }

9 
	$Pœtf‹mLibøryInô
()

11 
	`LibøryAdd
(&
GlobÆTabÀ
, "∂©f‹mÜibøry", &
Pœtf‹mLibøry
);

12 
	}
}

	@platform/library_ffox.c

1 
	~"../öãΩªãr.h
"

4 
LibøryFun˘i⁄
 
	gPœtf‹mLibøry
[] =

6 { 
NULL
, NULL }

9 
	$Pœtf‹mLibøryInô
()

11 
	`LibøryAdd
(&
GlobÆTabÀ
, "∂©f‹mÜibøry", &
Pœtf‹mLibøry
);

12 
	}
}

	@platform/library_srv1.c

1 
	~"../öãΩªãr.h
"

3 
	gBlob˙t
, 
	gBlobx1
, 
	gBlobx2
, 
	gBloby1
, 
	gBloby2
, 
	gIy1
, 
	gIy2
, 
	gIu1
, 
	gIu2
, 
	gIv1
, 
	gIv2
;

4 
	gGPSœt
, 
	gGPSl⁄
, 
	gGPSÆt
, 
	gGPSfix
, 
	gGPSßt
, 
	gGPSutc
, 
	gElcou¡
, 
	gErcou¡
;

5 
	gSˇnVe˘
[16], 
	gNNVe˘
[
NUM_OUTPUT
];

7 
VÆueTy≥
 *
	gI¡AºayTy≥
;

10 
	$SRV1SëupFunc
()

12 
I¡AºayTy≥
 = 
	`Ty≥GëM©chög
(
NULL
, &
I¡Ty≥
, 
Ty≥Aºay
, 16, 
SåEm±y
, 
TRUE
);

13 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "sˇnve˘", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
SˇnVe˘
, 
FALSE
);

14 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "√ur⁄", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
NNVe˘
, 
FALSE
);

15 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blob˙t", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blob˙t
, 
FALSE
);

16 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx1
, 
FALSE
);

17 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx2
, 
FALSE
);

18 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby1
, 
FALSE
);

19 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby2
, 
FALSE
);

20 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "lcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Elcou¡
, 
FALSE
);

21 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "rcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Ercou¡
, 
FALSE
);

22 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy1
, 
FALSE
);

23 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy2
, 
FALSE
);

24 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu1
, 
FALSE
);

25 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu2
, 
FALSE
);

26 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv1
, 
FALSE
);

27 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv2
, 
FALSE
);

28 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶©", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSœt
, 
FALSE
);

29 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶⁄", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSl⁄
, 
FALSE
);

30 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpß…", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSÆt
, 
FALSE
);

31 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsfix", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSfix
, 
FALSE
);

32 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsßt", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSßt
, 
FALSE
);

33 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsutc", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSutc
, 
FALSE
);

34 
	}
}

36 
	$Csig«l
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

38 i‡(
	`gësig«l
())

39 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1;

41 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

42 
	}
}

44 
	$Cöput
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

46 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëch
();

47 
	}
}

49 
	$Cdñay
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

51 
dñ
;

53 
dñ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

54 i‡((
dñ
 < 0) || (del > 1000000))

56 
	`dñayMS
(
dñ
);

57 
	}
}

59 
	$Cønd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

61 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ønd
(Ë% ()(
P¨am
[0]->Val->Integer + 1);

62 
	}
}

64 
	$Ctime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

66 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ªadRTC
();

67 
	}
}

69 
	$Ciodú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

71 
dú
;

73 
dú
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

74 *
pPORTHIO_DIR
 = ((
dú
 << 10) & 0xFC00) + (*pPORTHIO_DIR & 0x03FF);

75 *
pPORTHIO_INEN
 = (((~
dú
) << 10) & 0xFC00) + (*pPORTHIO_INEN & 0x03FF);

76 
	}
}

78 
	$Ci‹ód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

80 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (*
pPORTHIO
 >> 10) & 0x003F;

81 
	}
}

83 
	$Ciowrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

85 *
pPORTHIO
 = ((
P¨am
[0]->
VÆ
->
I¡egî
 << 10) & 0xFC00) + (*pPORTHIO & 0x03FF);

86 
	}
}

88 
	$C≥ek
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

90 
size
, 
±r
;

91 *
˝
;

92 *
•
;

93 *
ù
;

97 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

98 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

99 
size
) {

101 
˝
 = (*)
±r
;

102 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
˝
);

105 
•
 = (*)(
±r
 & 0xFFFFFFFE);

106 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
•
);

109 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

110 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()*
ù
;

113 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

116 
	}
}

118 
	$Cpoke
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

120 
size
, 
±r
, 
vÆ
;

121 *
˝
;

122 *
•
;

123 *
ù
;

127 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

128 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

129 
vÆ
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

130 
size
) {

132 
˝
 = (*)
±r
;

133 *
˝
 = ()(
vÆ
 & 0x000000FF);

136 
•
 = (*)(
±r
 & 0xFFFFFFFE);

137 *
•
 = ()(
vÆ
 & 0x0000FFFF);

140 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

141 *
ù
 = 
vÆ
;

146 
	}
}

148 
	$Cícodîs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

150 
ix
;

152 
ix
 = 
	`ícodîs
();

153 
Elcou¡
 = (
ix
 >> 16) & 0x0000FFFF;

154 
Ercou¡
 = 
ix
 & 0x0000FFFF;

155 
	}
}

157 
	$CmŸ‹s
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

159 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

160 i‡((
l•ìd
 < -100) || (lspeed > 100))

161 
	`ProgømFaû
(
NULL
, "motors():Üeft motor value out ofÑange");

162 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

163 i‡((
r•ìd
 < -100) || (rspeed > 100))

164 
	`ProgømFaû
(
NULL
, "motors():Ñight motor value out ofÑange");

165 i‡(!
pwm1_öô
) {

166 
	`öôPWM
();

167 
pwm1_öô
 = 1;

168 
pwm1_mode
 = 
PWM_PWM
;

169 
ba£_•ìd
 = 50;

171 
	`£tPWM
(
l•ìd
, 
r•ìd
);

172 
	}
}

174 
	$CmŸ‹s2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

176 
l•ìd2
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

177 i‡((
l•ìd2
 < -100) || (lspeed2 > 100))

178 
	`ProgømFaû
(
NULL
, "motors2():Üeft motor value out ofÑange");

179 
r•ìd2
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

180 i‡((
r•ìd2
 < -100) || (rspeed2 > 100))

181 
	`ProgømFaû
(
NULL
, "motors2():Ñight motor value out ofÑange");

182 i‡(!
pwm2_öô
) {

183 
	`öôPWM2
();

184 
pwm2_öô
 = 1;

185 
pwm2_mode
 = 
PWM_PWM
;

186 
ba£_•ìd2
 = 50;

188 
	`£tPWM2
(
l•ìd2
, 
r•ìd2
);

189 
	}
}

191 
	$C£rvos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

193 
l•ìd
, 
r•ìd
;

195 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

196 i‡((
l•ìd
 < 0) || (lspeed > 100))

197 
	`ProgømFaû
(
NULL
, "servos(): TMR2 value out ofÑange");

198 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

199 i‡((
r•ìd
 < 0) || (rspeed > 100))

200 
	`ProgømFaû
(
NULL
, "servos()(): TMR3 value out ofÑange");

201 i‡(!
pwm1_öô
) {

202 
	`öôPPM1
();

203 
pwm1_öô
 = 1;

204 
pwm1_mode
 = 
PWM_PPM
;

206 
	`£tPPM1
(
l•ìd
, 
r•ìd
);

207 
	}
}

209 
	$C£rvos2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

211 
l•ìd
, 
r•ìd
;

213 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

214 i‡((
l•ìd
 < 0) || (lspeed > 100))

215 
	`ProgømFaû
(
NULL
, "servos2(): TMR6 value out ofÑange");

216 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

217 i‡((
r•ìd
 < 0) || (rspeed > 100))

218 
	`ProgømFaû
(
NULL
, "servos2(): TMR7 value out ofÑange");

219 i‡(!
pwm2_öô
) {

220 
	`öôPPM2
();

221 
pwm2_öô
 = 1;

222 
pwm2_mode
 = 
PWM_PPM
;

224 
	`£tPPM2
(
l•ìd
, 
r•ìd
);

225 
	}
}

227 
	$Cœ£r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

229 *
pPORTHIO
 &= 0xFD7F;

230 
P¨am
[0]->
VÆ
->
I¡egî
) {

232 *
pPORTHIO
 |= 0x0080;

235 *
pPORTHIO
 |= 0x0200;

238 *
pPORTHIO
 |= 0x0280;

241 
	}
}

243 
	$Cs⁄¨
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

245 
i
;

246 
i
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

247 i‡((
i
<1) || (i>4)) {

248 
	`ProgømFaû
(
NULL
, "sonar(): 1, 2, 3, 4áre only valid selections");

250 
	`s⁄¨
();

251 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
s⁄¨_d©a
[
i
] / 100;

252 
	}
}

254 
	$Cønge
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

256 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`œ£r_ønge
(0);

257 
	}
}

259 
	$Cb©ãry
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

261 i‡(*
pPORTHIO
 & 0x0004)

262 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

264 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1;

265 
	}
}

267 
	$Cvcﬁ‹
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

270 
ix
;

272 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

273 
ymö
[
ix
] = 
P¨am
[1]->
VÆ
->
I¡egî
;

274 
ymax
[
ix
] = 
P¨am
[2]->
VÆ
->
I¡egî
;

275 
umö
[
ix
] = 
P¨am
[3]->
VÆ
->
I¡egî
;

276 
umax
[
ix
] = 
P¨am
[4]->
VÆ
->
I¡egî
;

277 
vmö
[
ix
] = 
P¨am
[5]->
VÆ
->
I¡egî
;

278 
vmax
[
ix
] = 
P¨am
[6]->
VÆ
->
I¡egî
;

279 
	}
}

281 
	$Cvˇm
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

285 
cx
, 
i2c_d©a
[2];

287 
cx
 = ()
P¨am
[0]->
VÆ
->
I¡egî
 & 0x07;

288 
i2c_d©a
[0] = 0x13;

289 
i2c_d©a
[1] = 0xC0 + 
cx
;

290 
	`i2cwrôe
(0x30, (*)
i2c_d©a
, 1, 
SCCB_ON
);

291 
	`i2cwrôe
(0x21, (*)
i2c_d©a
, 1, 
SCCB_ON
);

292 
	}
}

294 
	$Cvföd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

297 
ix
, 
x1
, 
x2
, 
y1
, 
y2
;

299 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

300 
x1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

301 
x2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

302 
y1
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

303 
y2
 = 
P¨am
[4]->
VÆ
->
I¡egî
;

304 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`vföd
((*)
FRAME_BUF
, 
ix
, 
x1
, 
x2
, 
y1
, 
y2
);

305 
	}
}

307 
	$Cvˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

309 
	`gøb_‰ame
();

310 
	}
}

312 
	$Cvrˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

314 
	`gøb_ª„ªn˚_‰ame
();

315 
	}
}

317 
	$Cvdiff
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

319 
‰ame_diff_Êag
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

320 
	}
}

322 
	$Cvpix
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

324 
x
, 
y
, 
ix
;

325 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

326 
y
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

327 
ix
 = 
	`vpix
((*)
FRAME_BUF
, 
x
, 
y
);

328 
Iy1
 = ((
ix
>>16) & 0x000000FF);

329 
Iu1
 = ((
ix
>>24) & 0x000000FF);

330 
Iv1
 = ((
ix
>>8) & 0x000000FF);

331 
	}
}

333 
	$Cvsˇn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

335 
cﬁ
, 
thªsh
, 
ix
;

336 
cﬁ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

337 i‡((
cﬁ
 < 1) || (col > 9))

338 
	`ProgømFaû
(
NULL
, "vscan():Çumber of columns must be between 1ánd 9");

339 
thªsh
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

340 i‡((
thªsh
 < 0) || (thresh > 9999))

341 
	`ProgømFaû
(
NULL
, "vscan():Åhreshold must be between 0ánd 9999");

342 
ix
 = 
	`vsˇn
((*)
SPI_BUFFER1
, (*)
FRAME_BUF
, 
thªsh
, ()
cﬁ
, (*)&
SˇnVe˘
[0]);

343 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

344 
	}
}

346 
	$Cvmón
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

348 
	`vmón
((*)
FRAME_BUF
);

349 
Iy1
 = 
món
[0];

350 
Iu1
 = 
món
[1];

351 
Iv1
 = 
món
[2];

352 
	}
}

355 
	$Cvblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

356 
ix
, 
iblob
, 
numblob
;

358 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

359 i‡(
ix
 > 
MAX_COLORS
)

360 
	`ProgømFaû
(
NULL
, "blob(): invalid color index");

361 
iblob
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

362 i‡(
iblob
 > 
MAX_BLOBS
)

363 
	`ProgømFaû
(
NULL
, "blob(): invalid blob index");

365 
numblob
 = 
	`vblob
((*)
FRAME_BUF
, (*)
FRAME_BUF3
, 
ix
);

367 i‡((
blob˙t
[
iblob
] =0Ë|| (
numblob
 == -1)) {

368 
Blob˙t
 = 0;

370 
Blob˙t
 = 
blob˙t
[
iblob
];

371 
Blobx1
 = 
blobx1
[
iblob
];

372 
Blobx2
 = 
blobx2
[
iblob
];

373 
Bloby1
 = 
bloby1
[
iblob
];

374 
Bloby2
 = 
bloby2
[
iblob
];

376 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
numblob
;

377 
	}
}

379 
	$Cvj≥g
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

380 
image_size
, 
quÆ
;

381 *
ouçut_°¨t
, *
ouçut_íd
;

383 
quÆ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

384 i‡((
quÆ
 < 1) || (qual > 8))

385 
	`ProgømFaû
(
NULL
, "vjpeg(): qualityÖarameter out ofÑange");

387 
ouçut_°¨t
 = (*)
JPEG_BUF
;

388 
ouçut_íd
 = 
	`ícode_image
((*)
FRAME_BUF
, 
ouçut_°¨t
, 
quÆ
,

389 
FOUR_TWO_TWO
, 
imgWidth
, 
imgHeight
);

390 
image_size
 = ()(
ouçut_íd
 - 
ouçut_°¨t
);

392 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
image_size
;

393 
	}
}

395 
	$Cv£nd
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

396 
ix
, 
image_size
;

397 *
˝
;

399 
image_size
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

400 i‡((
image_size
 < 0) || (image_size > 200000))

401 
	`ProgømFaû
(
NULL
, "vsend(): image size out ofÑange");

403 
	`Àd1_⁄
();

405 
˝
 = (*)
JPEG_BUF
;

406 
ix
=0; ix<
image_size
; ix++)

407 
	`putch¨
(*
˝
++);

409 
	`Àd0_⁄
();

410 
	}
}

412 
	$Ccom∑ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

414 
i2c_d©a
[2];

415 
ix
;

417 
i2c_d©a
[0] = 0x41;

418 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

419 
	`dñayMS
(20);

420 
i2c_d©a
[0] = 0x41;

421 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

422 
ix
 = (()(
i2c_d©a
[0] << 8) + i2c_data[1]) / 10;

423 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

424 
	}
}

426 
	$Ctût
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

428 
ix
;

430 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

431 i‡((
ix
<1) || (ix>3))

432 
	`ProgømFaû
(
NULL
, "tilt(): invalid channel");

433 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tût
(
ix
);

434 
	}
}

436 
	$C™Æog
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

438 
i2c_d©a
[3], 
devi˚_id
;

439 
ix
, 
ch™√l
;

440 
mask1
[] = { 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08 };

441 
mask2
[] = { 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00 };

444 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

445 i‡((
ix
<1) || (ix>28))

446 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

447 
devi˚_id
 = 0;

448 
ix
 / 10) {

450 
devi˚_id
 = 0x20;

453 
devi˚_id
 = 0x23;

456 
devi˚_id
 = 0x24;

459 
ch™√l
 = 
ix
 % 10;

460 i‡((
ch™√l
<1) || (channel>8))

461 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

464 
i2c_d©a
[0] = 0x03;

465 
i2c_d©a
[1] = 0x01;

466 
	`i2cwrôe
(
devi˚_id
, (*)
i2c_d©a
, 1, 
SCCB_ON
);

469 
i2c_d©a
[0] = 0x02;

470 
i2c_d©a
[1] = 
mask1
[
ch™√l
-1];

471 
i2c_d©a
[2] = 
mask2
[
ch™√l
-1];

472 
	`i2cwrôex
(
devi˚_id
, (*)
i2c_d©a
, 3, 
SCCB_ON
);

475 
	`dñayUS
(1000);

478 
i2c_d©a
[0] = 0x00;

479 
	`i2¸ód
(
devi˚_id
, (*)
i2c_d©a
, 2, 
SCCB_ON
);

480 
ix
 = (((
i2c_d©a
[0] & 0x0F) << 8) + i2c_data[1]);

481 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

482 
	}
}

484 
	$Cgps
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

486 
	`gps_∑r£
();

487 
GPSœt
 = 
gps_gga
.
œt
;

488 
GPSl⁄
 = 
gps_gga
.
l⁄
;

489 
GPSÆt
 = 
gps_gga
.
Æt
;

490 
GPSfix
 = 
gps_gga
.
fix
;

491 
GPSßt
 = 
gps_gga
.
ßt
;

492 
GPSutc
 = 
gps_gga
.
utc
;

493 
	}
}

495 
	$Cªadi2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

497 
i2c_devi˚
, 
i2c_d©a
[2];

499 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

500 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

502 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

503 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (()
i2c_d©a
[0] & 0x000000FF);

504 
	}
}

506 
	$Cªadi2c2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

508 
i2c_devi˚
, 
i2c_d©a
[2];

510 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

511 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

513 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 2, 
SCCB_OFF
);

514 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ((()
i2c_d©a
[0] << 8) + i2c_data[1]);

515 
	}
}

517 
	$Cwrôei2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

519 
i2c_devi˚
, 
i2c_d©a
[2];

521 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

522 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

523 
i2c_d©a
[1] = ()
P¨am
[2]->
VÆ
->
I¡egî
;

525 
	`i2cwrôe
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

526 
	}
}

528 
	$Csö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

530 
ix
;

532 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

533 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sö
(
ix
);

534 
	}
}

536 
	$Ccos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

538 
ix
;

540 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

541 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`cos
(
ix
);

542 
	}
}

544 
	$Cèn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

546 
ix
;

548 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

549 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`èn
(
ix
);

550 
	}
}

552 
	$Casö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

554 
y
, 
hyp
;

555 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

556 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

557 i‡(
y
 > 
hyp
)

558 
	`ProgømFaû
(
NULL
, "asin(): opposite greaterÅhan hypotenuse");

559 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`asö
(
y
, 
hyp
);

560 
	}
}

562 
	$Cacos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

564 
x
, 
hyp
;

565 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

566 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

567 i‡(
x
 > 
hyp
)

568 
	`ProgømFaû
(
NULL
, "acos():ádjacent greaterÅhan hypotenuse");

569 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`acos
(
x
, 
hyp
);

570 
	}
}

572 
	$C©™
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

574 
x
 ,
y
;

575 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

576 
x
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

577 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©™
(
y
, 
x
);

578 
	}
}

580 
	$Cgps_hód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

582 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

583 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

584 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

585 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

586 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

587 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_hód
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

588 
	}
}

590 
	$Cgps_di°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

592 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

593 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

594 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

595 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

596 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

597 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_di°
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

598 
	}
}

600 
	$Csqπ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

602 
x
;

603 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

604 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isqπ
(
x
);

605 
	}
}

607 
	$C¬£t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

608 
ix
, 
i1
;

610 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

611 i‡(
ix
 > 
NUM_NPATTERNS
)

612 
	`ProgømFaû
(
NULL
, "nnset(): invalid index");

613 
i1
=0; i1<8; i1++)

614 
≈©ã∫
[
ix
*8 + 
i1
] = ()
P¨am
[i1+1]->
VÆ
->
I¡egî
;

615 
	}
}

617 
	$C¬show
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

618 
ix
;

620 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

621 i‡(
ix
 > 
NUM_NPATTERNS
)

622 
	`ProgømFaû
(
NULL
, "nnshow(): invalid index");

623 
	`¬di•œy
(
ix
);

624 
	}
}

626 
	$C¬öô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

627 
	`¬öô_√tw‹k
();

628 
	}
}

630 
	$C¬åaö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

631 
ix
, 
i1
;

633 
	`¬åaö_√tw‹k
(10000);

634 
ix
=0; ix<
NUM_NPATTERNS
; ix++) {

635 
	`¬£t_∑âîn
(
ix
);

636 
	`¬ˇlcuœã_√tw‹k
();

637 
i1
=0; i1<
NUM_OUTPUT
; i1++)

638 
	`¥ötf
(" %3d", 
	`N_OUT
(
i1
)/10);

639 
	`¥ötf
("\r\n");

641 
	}
}

643 
	$C¬ã°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

644 
ix
, 
i1
, 
i2
, 
max
;

645 
ch
;

647 
ix
 = 0;

648 
i1
=0; i1<8; i1++) {

649 
ch
 = ()
P¨am
[
i1
]->
VÆ
->
I¡egî
;

650 
i2
=0; i2<8; i2++) {

651 i‡(
ch
 & 
nmask
[
i2
])

652 
	`N_IN
(
ix
++) = 1024;

654 
	`N_IN
(
ix
++) = 0;

657 
	`¬ˇlcuœã_√tw‹k
();

658 
ix
 = 0;

659 
max
 = 0;

660 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

661 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

662 i‡(
max
 < 
NNVe˘
[
i1
]) {

663 
ix
 = 
i1
;

664 
max
 = 
NNVe˘
[
i1
];

667 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

668 
	}
}

670 
	$C¬m©chblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

671 
ix
, 
i1
, 
max
;

673 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

674 i‡(
ix
 > 
MAX_BLOBS
)

675 
	`ProgømFaû
(
NULL
, "nnmatchblob(): invalid blob index");

676 i‡(!
blob˙t
[
ix
])

677 
	`ProgømFaû
(
NULL
, "nnmatchblob():Çotá valid blob");

682 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[
ix
], 
blobx1
[ix], 
blobx2
[ix],

683 
bloby1
[
ix
], 
bloby2
[ix], 
imgWidth
, 
imgHeight
);

684 
	`¬ˇlcuœã_√tw‹k
();

685 
ix
 = 0;

686 
max
 = 0;

687 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

688 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

689 i‡(
max
 < 
NNVe˘
[
i1
]) {

690 
ix
 = 
i1
;

691 
max
 = 
NNVe˘
[
i1
];

694 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

695 
	}
}

697 
	$C¬À¨nblob
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

698 
ix
;

700 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

701 i‡(
ix
 > 
NUM_NPATTERNS
)

702 
	`ProgømFaû
(
NULL
, "nnlearnblob(): invalid index");

703 i‡(!
blob˙t
[0])

704 
	`ProgømFaû
(
NULL
, "nnlearnblob():Ço blobÅo grab");

705 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[0], 
blobx1
[0], 
blobx2
[0],

706 
bloby1
[0], 
bloby2
[0], 
imgWidth
, 
imgHeight
);

707 
	`¬∑ck8x8
(
ix
);

708 
	`¬di•œy
(
ix
);

709 
	}
}

711 
	$Caut‹un
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

712 
ix
, 
t0
;

713 
ch
;

715 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

716 
t0
 = 
	`ªadRTC
();

717 
	`ªadRTC
(Ë< (
t0
 + 
ix
*1000)) {

718 i‡(
	`gëch¨
(&
ch
)) {

719 i‡(
ch
 == 0x1B) {

720 
	`¥ötf
("found ESC\r\n");

721 
ExôBuf
[40] = 1;

722 
	`l⁄gjmp
(
ExôBuf
, 1);

726 
	}
}

728 
	$Clöío
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

729 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
P¨£r
->
Löe
;

730 
	}
}

732 
	$Cîr‹msg
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

733 
	`Pœtf‹mEº‹Pªfix
(
P¨£r
);

734 
	`LibPrötf
(
P¨£r
, 
Rëu∫VÆue
, 
P¨am
, 
NumArgs
);

735 
	}
}

738 
LibøryFun˘i⁄
 
	gPœtf‹mLibøry
[] =

740 { 
NULL
, NULL }

744 
LibøryFun˘i⁄
 
	gSRV1Fun˘i⁄s
[] =

746 { 
Csig«l
, "int signal();" },

747 { 
Cöput
, "int input();" },

748 { 
Cdñay
, "void delay(int);" },

749 { 
Cønd
, "intÑand(int);" },

750 { 
Ctime
, "intÅime();" },

751 { 
Ciodú
, "void iodir(int);" },

752 { 
Ci‹ód
, "int ioread();" },

753 { 
Ciowrôe
, "void iowrite(int);" },

754 { 
C≥ek
, "intÖeek(int, int);" },

755 { 
Cpoke
, "voidÖoke(int, int, int);" },

756 { 
CmŸ‹s
, "void motors(int, int);" },

757 { 
CmŸ‹s2
, "void motors2(int, int);" },

758 { 
C£rvos
, "void servos(int, int);" },

759 { 
C£rvos2
, "void servos2(int, int);" },

760 { 
Cícodîs
, "voidÉncoders();" },

761 { 
Cœ£r
, "voidÜaser(int);" },

762 { 
Cs⁄¨
, "int sonar(int);" },

763 { 
Cønge
, "intÑange();" },

764 { 
Cb©ãry
, "int battery();" },

765 { 
Cvcﬁ‹
, "void vcolor(int, int, int, int, int, int, int);" },

766 { 
Cvföd
, "int vfind(int, int, int, int, int);" },

767 { 
Cvˇm
, "void vcam(int);" },

768 { 
Cvˇp
, "void vcap();" },

769 { 
Cvrˇp
, "void vrcap();" },

770 { 
Cvdiff
, "void vdiff(int);" },

771 { 
Cvpix
, "void vpix(int, int);" },

772 { 
Cvsˇn
, "int vscan(int, int);" },

773 { 
Cvmón
, "void vmean();" },

774 { 
Cvblob
, "int vblob(int, int);" },

775 { 
Cvj≥g
, "int vjpeg(int);" },

776 { 
Cv£nd
, "void vsend(int);" },

777 { 
Ccom∑ss
, "int compass();" },

778 { 
C™Æog
, "intánalog(int);" },

779 { 
Ctût
, "intÅilt(int);" },

780 { 
Cgps
, "void gps();" },

781 { 
Cªadi2c
, "intÑeadi2c(int, int);" },

782 { 
Cªadi2c2
, "intÑeadi2c2(int, int);" },

783 { 
Cwrôei2c
, "void writei2c(int, int, int);" },

784 { 
Csö
, "int sin(int);" },

785 { 
Ccos
, "int cos(int);" },

786 { 
Cèn
, "intÅan(int);" },

787 { 
Casö
, "intásin(int, int);" },

788 { 
Cacos
, "intácos(int, int);" },

789 { 
C©™
, "intátan(int, int);" },

790 { 
Cgps_hód
, "int gps_head(int, int, int, int);" },

791 { 
Cgps_di°
, "int gps_dist(int, int, int, int);" },

792 { 
Csqπ
, "int sqrt(int);" },

793 { 
C¬show
, "voidÇnshow(int);" },

794 { 
C¬£t
, "voidÇnset(int, int, int, int, int, int, int, int, int);" },

795 { 
C¬öô
, "voidÇninit();" },

796 { 
C¬åaö
, "voidÇntrain();" },

797 { 
C¬ã°
, "intÇntest(int, int, int, int, int, int, int, int);" },

798 { 
C¬m©chblob
, "intÇnmatchblob(int);" },

799 { 
C¬À¨nblob
, "voidÇnlearnblob(int);" },

800 { 
Caut‹un
, "voidáutorun(int);" },

801 { 
Clöío
, "intÜineno();" },

802 { 
Cîr‹msg
, "voidÉrrormsg(char *);" },

803 { 
NULL
, NULL }

806 
	$Pœtf‹mLibøryInô
()

808 
	`In˛udeRegi°î
("§v1.h", &
SRV1SëupFunc
, &
SRV1Fun˘i⁄s
[0], 
NULL
);

809 
	}
}

	@platform/library_srv1.c

1 
	~"../öãΩªãr.h
"

3 
	gBlob˙t
, 
	gBlobx1
, 
	gBlobx2
, 
	gBloby1
, 
	gBloby2
, 
	gIy1
, 
	gIy2
, 
	gIu1
, 
	gIu2
, 
	gIv1
, 
	gIv2
;

4 
	gGPSœt
, 
	gGPSl⁄
, 
	gGPSÆt
, 
	gGPSfix
, 
	gGPSßt
, 
	gGPSutc
, 
	gElcou¡
, 
	gErcou¡
;

5 
	gSˇnVe˘
[16], 
	gNNVe˘
[
NUM_OUTPUT
];

7 
VÆueTy≥
 *
	gI¡AºayTy≥
;

10 
	$SRV1SëupFunc
()

12 
I¡AºayTy≥
 = 
	`Ty≥GëM©chög
(
NULL
, &
I¡Ty≥
, 
Ty≥Aºay
, 16, 
SåEm±y
, 
TRUE
);

13 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "sˇnve˘", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
SˇnVe˘
, 
FALSE
);

14 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "√ur⁄", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
NNVe˘
, 
FALSE
);

15 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blob˙t", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blob˙t
, 
FALSE
);

16 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx1
, 
FALSE
);

17 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx2
, 
FALSE
);

18 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby1
, 
FALSE
);

19 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby2
, 
FALSE
);

20 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "lcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Elcou¡
, 
FALSE
);

21 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "rcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Ercou¡
, 
FALSE
);

22 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy1
, 
FALSE
);

23 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy2
, 
FALSE
);

24 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu1
, 
FALSE
);

25 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu2
, 
FALSE
);

26 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv1
, 
FALSE
);

27 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv2
, 
FALSE
);

28 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶©", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSœt
, 
FALSE
);

29 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶⁄", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSl⁄
, 
FALSE
);

30 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpß…", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSÆt
, 
FALSE
);

31 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsfix", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSfix
, 
FALSE
);

32 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsßt", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSßt
, 
FALSE
);

33 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsutc", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSutc
, 
FALSE
);

34 
	}
}

36 
	$Csig«l
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

38 i‡(
	`gësig«l
())

39 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1;

41 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

42 
	}
}

44 
	$Cöput
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

46 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëch
();

47 
	}
}

49 
	$Cdñay
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

51 
dñ
;

53 
dñ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

54 i‡((
dñ
 < 0) || (del > 1000000))

56 
	`dñayMS
(
dñ
);

57 
	}
}

59 
	$Cønd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

61 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ønd
(Ë% ()(
P¨am
[0]->Val->Integer + 1);

62 
	}
}

64 
	$Ctime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

66 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ªadRTC
();

67 
	}
}

69 
	$Ciodú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

71 
dú
;

73 
dú
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

74 *
pPORTHIO_DIR
 = ((
dú
 << 10) & 0xFC00) + (*pPORTHIO_DIR & 0x03FF);

75 *
pPORTHIO_INEN
 = (((~
dú
) << 10) & 0xFC00) + (*pPORTHIO_INEN & 0x03FF);

76 
	}
}

78 
	$Ci‹ód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

80 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (*
pPORTHIO
 >> 10) & 0x003F;

81 
	}
}

83 
	$Ciowrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

85 *
pPORTHIO
 = ((
P¨am
[0]->
VÆ
->
I¡egî
 << 10) & 0xFC00) + (*pPORTHIO & 0x03FF);

86 
	}
}

88 
	$C≥ek
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

90 
size
, 
±r
;

91 *
˝
;

92 *
•
;

93 *
ù
;

97 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

98 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

99 
size
) {

101 
˝
 = (*)
±r
;

102 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
˝
);

105 
•
 = (*)(
±r
 & 0xFFFFFFFE);

106 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
•
);

109 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

110 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()*
ù
;

113 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

116 
	}
}

118 
	$Cpoke
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

120 
size
, 
±r
, 
vÆ
;

121 *
˝
;

122 *
•
;

123 *
ù
;

127 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

128 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

129 
vÆ
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

130 
size
) {

132 
˝
 = (*)
±r
;

133 *
˝
 = ()(
vÆ
 & 0x000000FF);

136 
•
 = (*)(
±r
 & 0xFFFFFFFE);

137 *
•
 = ()(
vÆ
 & 0x0000FFFF);

140 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

141 *
ù
 = 
vÆ
;

146 
	}
}

148 
	$Cícodîs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

150 
ix
;

152 
ix
 = 
	`ícodîs
();

153 
Elcou¡
 = (
ix
 >> 16) & 0x0000FFFF;

154 
Ercou¡
 = 
ix
 & 0x0000FFFF;

155 
	}
}

157 
	$CmŸ‹s
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

159 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

160 i‡((
l•ìd
 < -100) || (lspeed > 100))

161 
	`ProgømFaû
(
NULL
, "motors():Üeft motor value out ofÑange");

162 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

163 i‡((
r•ìd
 < -100) || (rspeed > 100))

164 
	`ProgømFaû
(
NULL
, "motors():Ñight motor value out ofÑange");

165 i‡(!
pwm1_öô
) {

166 
	`öôPWM
();

167 
pwm1_öô
 = 1;

168 
pwm1_mode
 = 
PWM_PWM
;

169 
ba£_•ìd
 = 50;

171 
	`£tPWM
(
l•ìd
, 
r•ìd
);

172 
	}
}

174 
	$CmŸ‹s2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

176 
l•ìd2
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

177 i‡((
l•ìd2
 < -100) || (lspeed2 > 100))

178 
	`ProgømFaû
(
NULL
, "motors2():Üeft motor value out ofÑange");

179 
r•ìd2
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

180 i‡((
r•ìd2
 < -100) || (rspeed2 > 100))

181 
	`ProgømFaû
(
NULL
, "motors2():Ñight motor value out ofÑange");

182 i‡(!
pwm2_öô
) {

183 
	`öôPWM2
();

184 
pwm2_öô
 = 1;

185 
pwm2_mode
 = 
PWM_PWM
;

186 
ba£_•ìd2
 = 50;

188 
	`£tPWM2
(
l•ìd2
, 
r•ìd2
);

189 
	}
}

191 
	$C£rvos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

193 
l•ìd
, 
r•ìd
;

195 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

196 i‡((
l•ìd
 < 0) || (lspeed > 100))

197 
	`ProgømFaû
(
NULL
, "servos(): TMR2 value out ofÑange");

198 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

199 i‡((
r•ìd
 < 0) || (rspeed > 100))

200 
	`ProgømFaû
(
NULL
, "servos()(): TMR3 value out ofÑange");

201 i‡(!
pwm1_öô
) {

202 
	`öôPPM1
();

203 
pwm1_öô
 = 1;

204 
pwm1_mode
 = 
PWM_PPM
;

206 
	`£tPPM1
(
l•ìd
, 
r•ìd
);

207 
	}
}

209 
	$C£rvos2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

211 
l•ìd
, 
r•ìd
;

213 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

214 i‡((
l•ìd
 < 0) || (lspeed > 100))

215 
	`ProgømFaû
(
NULL
, "servos2(): TMR6 value out ofÑange");

216 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

217 i‡((
r•ìd
 < 0) || (rspeed > 100))

218 
	`ProgømFaû
(
NULL
, "servos2(): TMR7 value out ofÑange");

219 i‡(!
pwm2_öô
) {

220 
	`öôPPM2
();

221 
pwm2_öô
 = 1;

222 
pwm2_mode
 = 
PWM_PPM
;

224 
	`£tPPM2
(
l•ìd
, 
r•ìd
);

225 
	}
}

227 
	$Cœ£r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

229 *
pPORTHIO
 &= 0xFD7F;

230 
P¨am
[0]->
VÆ
->
I¡egî
) {

232 *
pPORTHIO
 |= 0x0080;

235 *
pPORTHIO
 |= 0x0200;

238 *
pPORTHIO
 |= 0x0280;

241 
	}
}

243 
	$Cs⁄¨
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

245 
i
;

246 
i
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

247 i‡((
i
<1) || (i>4)) {

248 
	`ProgømFaû
(
NULL
, "sonar(): 1, 2, 3, 4áre only valid selections");

250 
	`s⁄¨
();

251 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
s⁄¨_d©a
[
i
] / 100;

252 
	}
}

254 
	$Cønge
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

256 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`œ£r_ønge
(0);

257 
	}
}

259 
	$Cb©ãry
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

261 i‡(*
pPORTHIO
 & 0x0004)

262 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

264 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1;

265 
	}
}

267 
	$Cvcﬁ‹
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

270 
ix
;

272 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

273 
ymö
[
ix
] = 
P¨am
[1]->
VÆ
->
I¡egî
;

274 
ymax
[
ix
] = 
P¨am
[2]->
VÆ
->
I¡egî
;

275 
umö
[
ix
] = 
P¨am
[3]->
VÆ
->
I¡egî
;

276 
umax
[
ix
] = 
P¨am
[4]->
VÆ
->
I¡egî
;

277 
vmö
[
ix
] = 
P¨am
[5]->
VÆ
->
I¡egî
;

278 
vmax
[
ix
] = 
P¨am
[6]->
VÆ
->
I¡egî
;

279 
	}
}

281 
	$Cvˇm
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

285 
cx
, 
i2c_d©a
[2];

287 
cx
 = ()
P¨am
[0]->
VÆ
->
I¡egî
 & 0x07;

288 
i2c_d©a
[0] = 0x13;

289 
i2c_d©a
[1] = 0xC0 + 
cx
;

290 
	`i2cwrôe
(0x30, (*)
i2c_d©a
, 1, 
SCCB_ON
);

291 
	`i2cwrôe
(0x21, (*)
i2c_d©a
, 1, 
SCCB_ON
);

292 
	}
}

294 
	$Cvföd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

297 
ix
, 
x1
, 
x2
, 
y1
, 
y2
;

299 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

300 
x1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

301 
x2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

302 
y1
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

303 
y2
 = 
P¨am
[4]->
VÆ
->
I¡egî
;

304 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`vföd
((*)
FRAME_BUF
, 
ix
, 
x1
, 
x2
, 
y1
, 
y2
);

305 
	}
}

307 
	$Cvˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

309 
	`gøb_‰ame
();

310 
	}
}

312 
	$Cvrˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

314 
	`gøb_ª„ªn˚_‰ame
();

315 
	}
}

317 
	$Cvdiff
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

319 
‰ame_diff_Êag
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

320 
	}
}

322 
	$Cvpix
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

324 
x
, 
y
, 
ix
;

325 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

326 
y
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

327 
ix
 = 
	`vpix
((*)
FRAME_BUF
, 
x
, 
y
);

328 
Iy1
 = ((
ix
>>16) & 0x000000FF);

329 
Iu1
 = ((
ix
>>24) & 0x000000FF);

330 
Iv1
 = ((
ix
>>8) & 0x000000FF);

331 
	}
}

333 
	$Cvsˇn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

335 
cﬁ
, 
thªsh
, 
ix
;

336 
cﬁ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

337 i‡((
cﬁ
 < 1) || (col > 9))

338 
	`ProgømFaû
(
NULL
, "vscan():Çumber of columns must be between 1ánd 9");

339 
thªsh
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

340 i‡((
thªsh
 < 0) || (thresh > 9999))

341 
	`ProgømFaû
(
NULL
, "vscan():Åhreshold must be between 0ánd 9999");

342 
ix
 = 
	`vsˇn
((*)
SPI_BUFFER1
, (*)
FRAME_BUF
, 
thªsh
, ()
cﬁ
, (*)&
SˇnVe˘
[0]);

343 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

344 
	}
}

346 
	$Cvmón
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

348 
	`vmón
((*)
FRAME_BUF
);

349 
Iy1
 = 
món
[0];

350 
Iu1
 = 
món
[1];

351 
Iv1
 = 
món
[2];

352 
	}
}

355 
	$Cvblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

356 
ix
, 
iblob
, 
numblob
;

358 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

359 i‡(
ix
 > 
MAX_COLORS
)

360 
	`ProgømFaû
(
NULL
, "blob(): invalid color index");

361 
iblob
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

362 i‡(
iblob
 > 
MAX_BLOBS
)

363 
	`ProgømFaû
(
NULL
, "blob(): invalid blob index");

365 
numblob
 = 
	`vblob
((*)
FRAME_BUF
, (*)
FRAME_BUF3
, 
ix
);

367 i‡((
blob˙t
[
iblob
] =0Ë|| (
numblob
 == -1)) {

368 
Blob˙t
 = 0;

370 
Blob˙t
 = 
blob˙t
[
iblob
];

371 
Blobx1
 = 
blobx1
[
iblob
];

372 
Blobx2
 = 
blobx2
[
iblob
];

373 
Bloby1
 = 
bloby1
[
iblob
];

374 
Bloby2
 = 
bloby2
[
iblob
];

376 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
numblob
;

377 
	}
}

379 
	$Cvj≥g
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

380 
image_size
, 
quÆ
;

381 *
ouçut_°¨t
, *
ouçut_íd
;

383 
quÆ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

384 i‡((
quÆ
 < 1) || (qual > 8))

385 
	`ProgømFaû
(
NULL
, "vjpeg(): qualityÖarameter out ofÑange");

387 
ouçut_°¨t
 = (*)
JPEG_BUF
;

388 
ouçut_íd
 = 
	`ícode_image
((*)
FRAME_BUF
, 
ouçut_°¨t
, 
quÆ
,

389 
FOUR_TWO_TWO
, 
imgWidth
, 
imgHeight
);

390 
image_size
 = ()(
ouçut_íd
 - 
ouçut_°¨t
);

392 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
image_size
;

393 
	}
}

395 
	$Cv£nd
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

396 
ix
, 
image_size
;

397 *
˝
;

399 
image_size
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

400 i‡((
image_size
 < 0) || (image_size > 200000))

401 
	`ProgømFaû
(
NULL
, "vsend(): image size out ofÑange");

403 
	`Àd1_⁄
();

405 
˝
 = (*)
JPEG_BUF
;

406 
ix
=0; ix<
image_size
; ix++)

407 
	`putch¨
(*
˝
++);

409 
	`Àd0_⁄
();

410 
	}
}

412 
	$Ccom∑ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

414 
i2c_d©a
[2];

415 
ix
;

417 
i2c_d©a
[0] = 0x41;

418 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

419 
	`dñayMS
(20);

420 
i2c_d©a
[0] = 0x41;

421 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

422 
ix
 = (()(
i2c_d©a
[0] << 8) + i2c_data[1]) / 10;

423 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

424 
	}
}

426 
	$Ctût
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

428 
ix
;

430 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

431 i‡((
ix
<1) || (ix>3))

432 
	`ProgømFaû
(
NULL
, "tilt(): invalid channel");

433 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tût
(
ix
);

434 
	}
}

436 
	$C™Æog
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

438 
i2c_d©a
[3], 
devi˚_id
;

439 
ix
, 
ch™√l
;

440 
mask1
[] = { 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08 };

441 
mask2
[] = { 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00 };

444 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

445 i‡((
ix
<1) || (ix>28))

446 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

447 
devi˚_id
 = 0;

448 
ix
 / 10) {

450 
devi˚_id
 = 0x20;

453 
devi˚_id
 = 0x23;

456 
devi˚_id
 = 0x24;

459 
ch™√l
 = 
ix
 % 10;

460 i‡((
ch™√l
<1) || (channel>8))

461 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

464 
i2c_d©a
[0] = 0x03;

465 
i2c_d©a
[1] = 0x01;

466 
	`i2cwrôe
(
devi˚_id
, (*)
i2c_d©a
, 1, 
SCCB_ON
);

469 
i2c_d©a
[0] = 0x02;

470 
i2c_d©a
[1] = 
mask1
[
ch™√l
-1];

471 
i2c_d©a
[2] = 
mask2
[
ch™√l
-1];

472 
	`i2cwrôex
(
devi˚_id
, (*)
i2c_d©a
, 3, 
SCCB_ON
);

475 
	`dñayUS
(1000);

478 
i2c_d©a
[0] = 0x00;

479 
	`i2¸ód
(
devi˚_id
, (*)
i2c_d©a
, 2, 
SCCB_ON
);

480 
ix
 = (((
i2c_d©a
[0] & 0x0F) << 8) + i2c_data[1]);

481 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

482 
	}
}

484 
	$Cgps
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

486 
	`gps_∑r£
();

487 
GPSœt
 = 
gps_gga
.
œt
;

488 
GPSl⁄
 = 
gps_gga
.
l⁄
;

489 
GPSÆt
 = 
gps_gga
.
Æt
;

490 
GPSfix
 = 
gps_gga
.
fix
;

491 
GPSßt
 = 
gps_gga
.
ßt
;

492 
GPSutc
 = 
gps_gga
.
utc
;

493 
	}
}

495 
	$Cªadi2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

497 
i2c_devi˚
, 
i2c_d©a
[2];

499 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

500 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

502 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

503 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (()
i2c_d©a
[0] & 0x000000FF);

504 
	}
}

506 
	$Cªadi2c2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

508 
i2c_devi˚
, 
i2c_d©a
[2];

510 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

511 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

513 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 2, 
SCCB_OFF
);

514 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ((()
i2c_d©a
[0] << 8) + i2c_data[1]);

515 
	}
}

517 
	$Cwrôei2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

519 
i2c_devi˚
, 
i2c_d©a
[2];

521 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

522 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

523 
i2c_d©a
[1] = ()
P¨am
[2]->
VÆ
->
I¡egî
;

525 
	`i2cwrôe
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

526 
	}
}

528 
	$Csö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

530 
ix
;

532 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

533 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sö
(
ix
);

534 
	}
}

536 
	$Ccos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

538 
ix
;

540 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

541 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`cos
(
ix
);

542 
	}
}

544 
	$Cèn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

546 
ix
;

548 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

549 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`èn
(
ix
);

550 
	}
}

552 
	$Casö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

554 
y
, 
hyp
;

555 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

556 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

557 i‡(
y
 > 
hyp
)

558 
	`ProgømFaû
(
NULL
, "asin(): opposite greaterÅhan hypotenuse");

559 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`asö
(
y
, 
hyp
);

560 
	}
}

562 
	$Cacos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

564 
x
, 
hyp
;

565 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

566 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

567 i‡(
x
 > 
hyp
)

568 
	`ProgømFaû
(
NULL
, "acos():ádjacent greaterÅhan hypotenuse");

569 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`acos
(
x
, 
hyp
);

570 
	}
}

572 
	$C©™
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

574 
x
 ,
y
;

575 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

576 
x
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

577 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©™
(
y
, 
x
);

578 
	}
}

580 
	$Cgps_hód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

582 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

583 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

584 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

585 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

586 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

587 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_hód
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

588 
	}
}

590 
	$Cgps_di°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

592 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

593 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

594 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

595 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

596 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

597 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_di°
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

598 
	}
}

600 
	$Csqπ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

602 
x
;

603 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

604 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isqπ
(
x
);

605 
	}
}

607 
	$C¬£t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

608 
ix
, 
i1
;

610 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

611 i‡(
ix
 > 
NUM_NPATTERNS
)

612 
	`ProgømFaû
(
NULL
, "nnset(): invalid index");

613 
i1
=0; i1<8; i1++)

614 
≈©ã∫
[
ix
*8 + 
i1
] = ()
P¨am
[i1+1]->
VÆ
->
I¡egî
;

615 
	}
}

617 
	$C¬show
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

618 
ix
;

620 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

621 i‡(
ix
 > 
NUM_NPATTERNS
)

622 
	`ProgømFaû
(
NULL
, "nnshow(): invalid index");

623 
	`¬di•œy
(
ix
);

624 
	}
}

626 
	$C¬öô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

627 
	`¬öô_√tw‹k
();

628 
	}
}

630 
	$C¬åaö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

631 
ix
, 
i1
;

633 
	`¬åaö_√tw‹k
(10000);

634 
ix
=0; ix<
NUM_NPATTERNS
; ix++) {

635 
	`¬£t_∑âîn
(
ix
);

636 
	`¬ˇlcuœã_√tw‹k
();

637 
i1
=0; i1<
NUM_OUTPUT
; i1++)

638 
	`¥ötf
(" %3d", 
	`N_OUT
(
i1
)/10);

639 
	`¥ötf
("\r\n");

641 
	}
}

643 
	$C¬ã°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

644 
ix
, 
i1
, 
i2
, 
max
;

645 
ch
;

647 
ix
 = 0;

648 
i1
=0; i1<8; i1++) {

649 
ch
 = ()
P¨am
[
i1
]->
VÆ
->
I¡egî
;

650 
i2
=0; i2<8; i2++) {

651 i‡(
ch
 & 
nmask
[
i2
])

652 
	`N_IN
(
ix
++) = 1024;

654 
	`N_IN
(
ix
++) = 0;

657 
	`¬ˇlcuœã_√tw‹k
();

658 
ix
 = 0;

659 
max
 = 0;

660 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

661 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

662 i‡(
max
 < 
NNVe˘
[
i1
]) {

663 
ix
 = 
i1
;

664 
max
 = 
NNVe˘
[
i1
];

667 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

668 
	}
}

670 
	$C¬m©chblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

671 
ix
, 
i1
, 
max
;

673 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

674 i‡(
ix
 > 
MAX_BLOBS
)

675 
	`ProgømFaû
(
NULL
, "nnmatchblob(): invalid blob index");

676 i‡(!
blob˙t
[
ix
])

677 
	`ProgømFaû
(
NULL
, "nnmatchblob():Çotá valid blob");

682 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[
ix
], 
blobx1
[ix], 
blobx2
[ix],

683 
bloby1
[
ix
], 
bloby2
[ix], 
imgWidth
, 
imgHeight
);

684 
	`¬ˇlcuœã_√tw‹k
();

685 
ix
 = 0;

686 
max
 = 0;

687 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

688 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

689 i‡(
max
 < 
NNVe˘
[
i1
]) {

690 
ix
 = 
i1
;

691 
max
 = 
NNVe˘
[
i1
];

694 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

695 
	}
}

697 
	$C¬À¨nblob
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

698 
ix
;

700 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

701 i‡(
ix
 > 
NUM_NPATTERNS
)

702 
	`ProgømFaû
(
NULL
, "nnlearnblob(): invalid index");

703 i‡(!
blob˙t
[0])

704 
	`ProgømFaû
(
NULL
, "nnlearnblob():Ço blobÅo grab");

705 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[0], 
blobx1
[0], 
blobx2
[0],

706 
bloby1
[0], 
bloby2
[0], 
imgWidth
, 
imgHeight
);

707 
	`¬∑ck8x8
(
ix
);

708 
	`¬di•œy
(
ix
);

709 
	}
}

711 
	$Caut‹un
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

712 
ix
, 
t0
;

713 
ch
;

715 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

716 
t0
 = 
	`ªadRTC
();

717 
	`ªadRTC
(Ë< (
t0
 + 
ix
*1000)) {

718 i‡(
	`gëch¨
(&
ch
)) {

719 i‡(
ch
 == 0x1B) {

720 
	`¥ötf
("found ESC\r\n");

721 
ExôBuf
[40] = 1;

722 
	`l⁄gjmp
(
ExôBuf
, 1);

726 
	}
}

728 
	$Clöío
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

729 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
P¨£r
->
Löe
;

730 
	}
}

732 
	$Cîr‹msg
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

733 
	`Pœtf‹mEº‹Pªfix
(
P¨£r
);

734 
	`LibPrötf
(
P¨£r
, 
Rëu∫VÆue
, 
P¨am
, 
NumArgs
);

735 
	}
}

738 
LibøryFun˘i⁄
 
	gPœtf‹mLibøry
[] =

740 { 
NULL
, NULL }

744 
LibøryFun˘i⁄
 
	gSRV1Fun˘i⁄s
[] =

746 { 
Csig«l
, "int signal();" },

747 { 
Cöput
, "int input();" },

748 { 
Cdñay
, "void delay(int);" },

749 { 
Cønd
, "intÑand(int);" },

750 { 
Ctime
, "intÅime();" },

751 { 
Ciodú
, "void iodir(int);" },

752 { 
Ci‹ód
, "int ioread();" },

753 { 
Ciowrôe
, "void iowrite(int);" },

754 { 
C≥ek
, "intÖeek(int, int);" },

755 { 
Cpoke
, "voidÖoke(int, int, int);" },

756 { 
CmŸ‹s
, "void motors(int, int);" },

757 { 
CmŸ‹s2
, "void motors2(int, int);" },

758 { 
C£rvos
, "void servos(int, int);" },

759 { 
C£rvos2
, "void servos2(int, int);" },

760 { 
Cícodîs
, "voidÉncoders();" },

761 { 
Cœ£r
, "voidÜaser(int);" },

762 { 
Cs⁄¨
, "int sonar(int);" },

763 { 
Cønge
, "intÑange();" },

764 { 
Cb©ãry
, "int battery();" },

765 { 
Cvcﬁ‹
, "void vcolor(int, int, int, int, int, int, int);" },

766 { 
Cvföd
, "int vfind(int, int, int, int, int);" },

767 { 
Cvˇm
, "void vcam(int);" },

768 { 
Cvˇp
, "void vcap();" },

769 { 
Cvrˇp
, "void vrcap();" },

770 { 
Cvdiff
, "void vdiff(int);" },

771 { 
Cvpix
, "void vpix(int, int);" },

772 { 
Cvsˇn
, "int vscan(int, int);" },

773 { 
Cvmón
, "void vmean();" },

774 { 
Cvblob
, "int vblob(int, int);" },

775 { 
Cvj≥g
, "int vjpeg(int);" },

776 { 
Cv£nd
, "void vsend(int);" },

777 { 
Ccom∑ss
, "int compass();" },

778 { 
C™Æog
, "intánalog(int);" },

779 { 
Ctût
, "intÅilt(int);" },

780 { 
Cgps
, "void gps();" },

781 { 
Cªadi2c
, "intÑeadi2c(int, int);" },

782 { 
Cªadi2c2
, "intÑeadi2c2(int, int);" },

783 { 
Cwrôei2c
, "void writei2c(int, int, int);" },

784 { 
Csö
, "int sin(int);" },

785 { 
Ccos
, "int cos(int);" },

786 { 
Cèn
, "intÅan(int);" },

787 { 
Casö
, "intásin(int, int);" },

788 { 
Cacos
, "intácos(int, int);" },

789 { 
C©™
, "intátan(int, int);" },

790 { 
Cgps_hód
, "int gps_head(int, int, int, int);" },

791 { 
Cgps_di°
, "int gps_dist(int, int, int, int);" },

792 { 
Csqπ
, "int sqrt(int);" },

793 { 
C¬show
, "voidÇnshow(int);" },

794 { 
C¬£t
, "voidÇnset(int, int, int, int, int, int, int, int, int);" },

795 { 
C¬öô
, "voidÇninit();" },

796 { 
C¬åaö
, "voidÇntrain();" },

797 { 
C¬ã°
, "intÇntest(int, int, int, int, int, int, int, int);" },

798 { 
C¬m©chblob
, "intÇnmatchblob(int);" },

799 { 
C¬À¨nblob
, "voidÇnlearnblob(int);" },

800 { 
Caut‹un
, "voidáutorun(int);" },

801 { 
Clöío
, "intÜineno();" },

802 { 
Cîr‹msg
, "voidÉrrormsg(char *);" },

803 { 
NULL
, NULL }

806 
	$Pœtf‹mLibøryInô
()

808 
	`In˛udeRegi°î
("§v1.h", &
SRV1SëupFunc
, &
SRV1Fun˘i⁄s
[0], 
NULL
);

809 
	}
}

	@platform/library_surveyor.c

1 
	~"../öãΩªãr.h
"

2 
	~"../picoc.h
"

4 
	gBlob˙t
, 
	gBlobx1
, 
	gBlobx2
, 
	gBloby1
, 
	gBloby2
, 
	gIy1
, 
	gIy2
, 
	gIu1
, 
	gIu2
, 
	gIv1
, 
	gIv2
;

5 
	gCxmö
, 
	gCxmax
, 
	gCymö
, 
	gCymax
;

6 
	gGPSœt
, 
	gGPSl⁄
, 
	gGPSÆt
, 
	gGPSfix
, 
	gGPSßt
, 
	gGPSutc
, 
	gElcou¡
, 
	gErcou¡
;

7 
	gSˇnVe˘
[16], 
	gNNVe˘
[
NUM_OUTPUT
];

9 
	$Pœtf‹mLibøryInô
()

11 
VÆueTy≥
 *
I¡AºayTy≥
;

13 
I¡AºayTy≥
 = 
	`Ty≥GëM©chög
(
NULL
, &
I¡Ty≥
, 
Ty≥Aºay
, 16, 
SåEm±y
, 
TRUE
);

14 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "sˇnve˘", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
SˇnVe˘
, 
FALSE
);

15 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "√ur⁄", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
NNVe˘
, 
FALSE
);

16 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "xbuf", 
Ch¨AºayTy≥
, (
AnyVÆue
 *)&
xbuff
, 
FALSE
);

17 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blob˙t", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blob˙t
, 
FALSE
);

18 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx1
, 
FALSE
);

19 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx2
, 
FALSE
);

20 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby1
, 
FALSE
);

21 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby2
, 
FALSE
);

22 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "lcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Elcou¡
, 
FALSE
);

23 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "rcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Ercou¡
, 
FALSE
);

24 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy1
, 
FALSE
);

25 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy2
, 
FALSE
);

26 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu1
, 
FALSE
);

27 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu2
, 
FALSE
);

28 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv1
, 
FALSE
);

29 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv2
, 
FALSE
);

30 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶©", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSœt
, 
FALSE
);

31 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶⁄", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSl⁄
, 
FALSE
);

32 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpß…", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSÆt
, 
FALSE
);

33 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsfix", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSfix
, 
FALSE
);

34 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsßt", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSßt
, 
FALSE
);

35 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsutc", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSutc
, 
FALSE
);

36 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cxmö", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cxmö
, 
FALSE
);

37 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cxmax", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cxmax
, 
FALSE
);

38 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cymö", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cymö
, 
FALSE
);

39 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cymax", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cymax
, 
FALSE
);

40 
	`LibøryAdd
(&
GlobÆTabÀ
, "∂©f‹mÜibøry", &
Pœtf‹mLibøry
[0]);

41 
	}
}

43 
	$Csig«l
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

45 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gësig«l
();

46 
	}
}

48 
	$Csig«l1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

50 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u¨t1Sig«l
();

51 
	}
}

53 
	$Cöput
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

55 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëch
();

56 
	}
}

58 
	$Cöput1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

60 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u¨t1GëCh
();

61 
	}
}

63 
	$Cªad_öt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

65 
ix
, 
sign
;

66 
ch
;

68 
ix
 = 0;

69 
sign
 = 1;

71 
ch
 = 
	`gëch
();

72 i‡(
ch
 == '-') {

73 
sign
 = -1;

76 i‡((
ch
 < '0') || (ch > '9')) {

77 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
 * 
sign
;

80 
ix
 = (ix * 10Ë+ (
ch
 & 0x0F);

82 
	}
}

84 
	$Cªad_°r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

86 
ix
;

87 
ch
;

89 
ix
 = 0;

90 *
˝
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

92 
ch
 = 
	`gëch
();

93 
˝
[
ix
++] = 
ch
;

94 i‡((
ch
 == 0) || (ch == 0x01)) {

95 
ix
--;

96 
˝
[
ix
] = 0;

99 i‡(
ix
 > 1023) {

100 
˝
[
ix
] = 0;

101 
ix
--;

105 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

106 
	}
}

108 
	$Cöô_u¨t1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

110 
ii
;

111 
ii
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

112 
	`öô_u¨t1
(
ii
);

113 
	}
}

115 
	$Couçut
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

117 
ch
;

118 
ch
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

119 
	`putch¨
(()
ch
);

120 
	}
}

122 
	$Couçut1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

124 
ch
;

125 
ch
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

126 
	`u¨t1SídCh¨
(()
ch
);

127 
	}
}

129 
	$Cdñay
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

131 
dñ
;

133 
dñ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

134 i‡((
dñ
 < 0) || (del > 1000000))

136 
	`dñayMS
(
dñ
);

137 
	}
}

139 
	$Cønd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

141 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ønd
(Ë% ()(
P¨am
[0]->Val->Integer + 1);

142 
	}
}

144 
	$Ctime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

146 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ªadRTC
();

147 
	}
}

149 
	$Ciodú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

151 
dú
;

153 
dú
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

154 *
pPORTHIO_DIR
 = ((
dú
 << 10) & 0xFC00) + (*pPORTHIO_DIR & 0x03FF);

155 *
pPORTHIO_INEN
 = (((~
dú
) << 10) & 0xFC00) + (*pPORTHIO_INEN & 0x03FF);

156 
	}
}

158 
	$Ci‹ód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

160 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (*
pPORTHIO
 >> 10) & 0x003F;

161 
	}
}

163 
	$Ciowrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

165 *
pPORTHIO
 = ((
P¨am
[0]->
VÆ
->
I¡egî
 << 10) & 0xFC00) + (*pPORTHIO & 0x03FF);

166 
	}
}

168 
	$C≥ek
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

170 
size
, 
±r
;

171 *
˝
;

172 *
•
;

173 *
ù
;

177 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

178 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

179 
size
) {

181 
˝
 = (*)
±r
;

182 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
˝
);

185 
•
 = (*)(
±r
 & 0xFFFFFFFE);

186 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
•
);

189 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

190 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()*
ù
;

193 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

196 
	}
}

198 
	$Cpoke
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

200 
size
, 
±r
, 
vÆ
;

201 *
˝
;

202 *
•
;

203 *
ù
;

207 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

208 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

209 
vÆ
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

210 
size
) {

212 
˝
 = (*)
±r
;

213 *
˝
 = ()(
vÆ
 & 0x000000FF);

216 
•
 = (*)(
±r
 & 0xFFFFFFFE);

217 *
•
 = ()(
vÆ
 & 0x0000FFFF);

220 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

221 *
ù
 = 
vÆ
;

226 
	}
}

228 
	$Cícodîs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

230 
ix
;

232 
ix
 = 
	`ícodîs
();

233 
Elcou¡
 = (
ix
 >> 16) & 0x0000FFFF;

234 
Ercou¡
 = 
ix
 & 0x0000FFFF;

235 
	}
}

237 
	$Cícodîx
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

239 
ix
;

241 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

242 i‡((
ix
<0) || (ix>7))

243 
	`ProgømFaû
(
NULL
, "encoderx(): invalid channel");

244 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ícodî_4wd
(
ix
);

245 
	}
}

247 
	$CmŸ‹s
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

249 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

250 i‡((
l•ìd
 < -100) || (lspeed > 100))

251 
	`ProgømFaû
(
NULL
, "motors():Üeft motor value out ofÑange");

252 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

253 i‡((
r•ìd
 < -100) || (rspeed > 100))

254 
	`ProgømFaû
(
NULL
, "motors():Ñight motor value out ofÑange");

255 i‡(!
pwm1_öô
) {

256 
	`öôPWM
();

257 
pwm1_öô
 = 1;

258 
pwm1_mode
 = 
PWM_PWM
;

259 
ba£_•ìd
 = 50;

261 
	`£tPWM
(
l•ìd
, 
r•ìd
);

262 
	}
}

264 
	$CmŸ‹s2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

266 
l•ìd2
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

267 i‡((
l•ìd2
 < -100) || (lspeed2 > 100))

268 
	`ProgømFaû
(
NULL
, "motors2():Üeft motor value out ofÑange");

269 
r•ìd2
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

270 i‡((
r•ìd2
 < -100) || (rspeed2 > 100))

271 
	`ProgømFaû
(
NULL
, "motors2():Ñight motor value out ofÑange");

272 i‡(!
pwm2_öô
) {

273 
	`öôPWM2
();

274 
pwm2_öô
 = 1;

275 
pwm2_mode
 = 
PWM_PWM
;

276 
ba£_•ìd2
 = 50;

278 
	`£tPWM2
(
l•ìd2
, 
r•ìd2
);

279 
	}
}

282 
	$CmŸ‹x
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

284 
ch
;

285 
ls
, 
rs
;

287 
ls
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

288 i‡((
ls
 < -100) || (ls > 100))

289 
	`ProgømFaû
(
NULL
, "motors():Üeft motor value out ofÑange");

290 
ls
 = (ls * 127) / 100;

291 
rs
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

292 i‡((
rs
 < -100) || (rs > 100))

293 
	`ProgømFaû
(
NULL
, "motors():Ñight motor value out ofÑange");

294 
rs
 = (rs * 127) / 100;

295 i‡(
xwd_öô
 == 0) {

296 
xwd_öô
 = 1;

297 
	`öô_u¨t1
(115200);

298 
	`dñayMS
(10);

300 
	`u¨t1SídCh¨
('x');

301 
	`u¨t1SídCh¨
(()
ls
);

302 
	`u¨t1SídCh¨
(()
rs
);

303 
	`u¨t1GëCh¨
(&
ch
))

305 
	}
}

307 
	$C£rvos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

309 
l•ìd
, 
r•ìd
;

311 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

312 i‡((
l•ìd
 < 0) || (lspeed > 100))

313 
	`ProgømFaû
(
NULL
, "servos(): TMR2 value out ofÑange");

314 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

315 i‡((
r•ìd
 < 0) || (rspeed > 100))

316 
	`ProgømFaû
(
NULL
, "servos()(): TMR3 value out ofÑange");

317 i‡(!
pwm1_öô
) {

318 
	`öôPPM1
();

319 
pwm1_öô
 = 1;

320 
pwm1_mode
 = 
PWM_PPM
;

322 
	`£tPPM1
(
l•ìd
, 
r•ìd
);

323 
	}
}

325 
	$C£rvos2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

327 
l•ìd
, 
r•ìd
;

329 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

330 i‡((
l•ìd
 < 0) || (lspeed > 100))

331 
	`ProgømFaû
(
NULL
, "servos2(): TMR6 value out ofÑange");

332 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

333 i‡((
r•ìd
 < 0) || (rspeed > 100))

334 
	`ProgømFaû
(
NULL
, "servos2(): TMR7 value out ofÑange");

335 i‡(!
pwm2_öô
) {

336 
	`öôPPM2
();

337 
pwm2_öô
 = 1;

338 
pwm2_mode
 = 
PWM_PPM
;

340 
	`£tPPM2
(
l•ìd
, 
r•ìd
);

341 
	}
}

343 
	$Cœ£r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

345 *
pPORTHIO
 &= 0xFD7F;

346 
P¨am
[0]->
VÆ
->
I¡egî
) {

348 *
pPORTHIO
 |= 0x0080;

351 *
pPORTHIO
 |= 0x0200;

354 *
pPORTHIO
 |= 0x0280;

357 
	}
}

359 
	$Cs⁄¨
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

361 
i
;

362 
i
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

363 i‡((
i
<1) || (i>4)) {

364 
	`ProgømFaû
(
NULL
, "sonar(): 1, 2, 3, 4áre only valid selections");

366 
	`s⁄¨
();

367 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
s⁄¨_d©a
[
i
] / 100;

368 
	}
}

370 
	$Cønge
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

372 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`œ£r_ønge
(0);

373 
	}
}

375 
	$Cb©ãry
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

377 i‡(*
pPORTHIO
 & 0x0004)

378 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

380 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1;

381 
	}
}

383 
	$Cvcﬁ‹
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

386 
ix
;

388 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

389 
ymö
[
ix
] = 
P¨am
[1]->
VÆ
->
I¡egî
;

390 
ymax
[
ix
] = 
P¨am
[2]->
VÆ
->
I¡egî
;

391 
umö
[
ix
] = 
P¨am
[3]->
VÆ
->
I¡egî
;

392 
umax
[
ix
] = 
P¨am
[4]->
VÆ
->
I¡egî
;

393 
vmö
[
ix
] = 
P¨am
[5]->
VÆ
->
I¡egî
;

394 
vmax
[
ix
] = 
P¨am
[6]->
VÆ
->
I¡egî
;

395 
	}
}

397 
	$Cvˇm
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

401 
cx
, 
i2c_d©a
[2];

403 
cx
 = ()
P¨am
[0]->
VÆ
->
I¡egî
 & 0x07;

404 
i2c_d©a
[0] = 0x13;

405 
i2c_d©a
[1] = 0xC0 + 
cx
;

406 
	`i2cwrôe
(0x30, (*)
i2c_d©a
, 1, 
SCCB_ON
);

407 
	`i2cwrôe
(0x21, (*)
i2c_d©a
, 1, 
SCCB_ON
);

408 
	}
}

410 
	$Cvföd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

413 
ix
, 
x1
, 
x2
, 
y1
, 
y2
;

415 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

416 
x1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

417 
x2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

418 
y1
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

419 
y2
 = 
P¨am
[4]->
VÆ
->
I¡egî
;

420 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`vföd
((*)
FRAME_BUF
, 
ix
, 
x1
, 
x2
, 
y1
, 
y2
);

421 
	}
}

423 
	$Cvˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

425 
	`gøb_‰ame
();

426 
	}
}

428 
	$Cvrˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

430 
	`gøb_ª„ªn˚_‰ame
();

431 
	}
}

433 
	$Cvdiff
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

435 
‰ame_diff_Êag
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

436 
	}
}

438 
	$Cvpix
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

440 
x
, 
y
, 
ix
;

441 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

442 
y
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

443 
ix
 = 
	`vpix
((*)
FRAME_BUF
, 
x
, 
y
);

444 
Iy1
 = ((
ix
>>16) & 0x000000FF);

445 
Iu1
 = ((
ix
>>24) & 0x000000FF);

446 
Iv1
 = ((
ix
>>8) & 0x000000FF);

447 
	}
}

449 
	$Cvsˇn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

451 
cﬁ
, 
thªsh
, 
ix
;

452 
cﬁ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

453 i‡((
cﬁ
 < 1) || (col > 9))

454 
	`ProgømFaû
(
NULL
, "vscan():Çumber of columns must be between 1ánd 9");

455 
thªsh
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

456 i‡((
thªsh
 < 0) || (thresh > 9999))

457 
	`ProgømFaû
(
NULL
, "vscan():Åhreshold must be between 0ánd 9999");

458 
ix
 = 
	`vsˇn
((*)
SPI_BUFFER1
, (*)
FRAME_BUF
, 
thªsh
, ()
cﬁ
, (*)&
SˇnVe˘
[0]);

459 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

460 
	}
}

462 
	$Cvmón
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

464 
	`vmón
((*)
FRAME_BUF
);

465 
Iy1
 = 
món
[0];

466 
Iu1
 = 
món
[1];

467 
Iv1
 = 
món
[2];

468 
	}
}

471 
	$Cvblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

472 
ix
, 
iblob
, 
numblob
;

474 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

475 i‡(
ix
 > 
MAX_COLORS
)

476 
	`ProgømFaû
(
NULL
, "blob(): invalid color index");

477 
iblob
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

478 i‡(
iblob
 > 
MAX_BLOBS
)

479 
	`ProgømFaû
(
NULL
, "blob(): invalid blob index");

481 
numblob
 = 
	`vblob
((*)
FRAME_BUF
, (*)
FRAME_BUF3
, 
ix
);

483 i‡((
blob˙t
[
iblob
] =0Ë|| (
numblob
 == -1)) {

484 
Blob˙t
 = 0;

486 
Blob˙t
 = 
blob˙t
[
iblob
];

487 
Blobx1
 = 
blobx1
[
iblob
];

488 
Blobx2
 = 
blobx2
[
iblob
];

489 
Bloby1
 = 
bloby1
[
iblob
];

490 
Bloby2
 = 
bloby2
[
iblob
];

492 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
numblob
;

493 
	}
}

495 
	$Cvj≥g
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

496 
image_size
, 
quÆ
;

497 *
ouçut_°¨t
, *
ouçut_íd
;

499 
quÆ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

500 i‡((
quÆ
 < 1) || (qual > 8))

501 
	`ProgømFaû
(
NULL
, "vjpeg(): qualityÖarameter out ofÑange");

503 
ouçut_°¨t
 = (*)
JPEG_BUF
;

504 
ouçut_íd
 = 
	`ícode_image
((*)
FRAME_BUF
, 
ouçut_°¨t
, 
quÆ
,

505 
FOUR_TWO_TWO
, 
imgWidth
, 
imgHeight
);

506 
image_size
 = ()(
ouçut_íd
 - 
ouçut_°¨t
);

508 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
image_size
;

509 
	}
}

511 
	$Cv£nd
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

512 
ix
, 
image_size
;

513 *
˝
;

515 
image_size
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

516 i‡((
image_size
 < 0) || (image_size > 200000))

517 
	`ProgømFaû
(
NULL
, "vsend(): image size out ofÑange");

519 
	`Àd1_⁄
();

521 
˝
 = (*)
JPEG_BUF
;

522 
ix
=0; ix<
image_size
; ix++)

523 
	`putch¨
(*
˝
++);

525 
	`Àd0_⁄
();

526 
	}
}

528 
	$Ccom∑ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

530 
i2c_d©a
[2];

531 
ix
;

533 
i2c_d©a
[0] = 0x41;

534 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

535 
	`dñayMS
(20);

536 
i2c_d©a
[0] = 0x41;

537 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

538 
ix
 = (()(
i2c_d©a
[0] << 8) + i2c_data[1]) / 10;

539 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

540 
	}
}

542 
	$Ccom∑ssx
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

544 
x
, 
y
, 
z
;

545 
ix
;

547 
ix
 = ()
	`ªad_com∑ss3x
(&
x
, &
y
, &
z
);

548 
Cxmö
 = 
cxmö
;

549 
Cxmax
 = 
cxmax
;

550 
Cymö
 = 
cymö
;

551 
Cymax
 = 
cymax
;

552 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

553 
	}
}

555 
	$Ccom∑ssxˇl
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

558 
cxmö
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

559 
cxmax
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

560 
cymö
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

561 
cymax
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

562 
com∑ss_c⁄töuous_ˇlibøti⁄
 = 
P¨am
[4]->
VÆ
->
I¡egî
;

563 
	}
}

565 
	$Ctût
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

567 
ix
;

569 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

570 i‡((
ix
<1) || (ix>3))

571 
	`ProgømFaû
(
NULL
, "tilt(): invalid channel");

572 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tût
(
ix
);

573 
	}
}

575 
	$C™Æog
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

577 
ix
, 
ch™√l
;

579 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

580 i‡((
ix
<1) || (ix>28))

581 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

582 
ch™√l
 = 
ix
 % 10;

583 i‡((
ch™√l
<1) || (channel>8))

584 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

585 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`™Æog
(
ix
);

586 
	}
}

598 
	$C™Æogx
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

600 
ix
;

602 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

603 i‡((
ix
<0) || (ix>7))

604 
	`ProgømFaû
(
NULL
, "analogx(): invalid channel");

605 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`™Æog_4wd
(
ix
);

606 
	}
}

608 
	$Cgps
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

610 
	`gps_∑r£
();

611 
GPSœt
 = 
gps_gga
.
œt
;

612 
GPSl⁄
 = 
gps_gga
.
l⁄
;

613 
GPSÆt
 = 
gps_gga
.
Æt
;

614 
GPSfix
 = 
gps_gga
.
fix
;

615 
GPSßt
 = 
gps_gga
.
ßt
;

616 
GPSutc
 = 
gps_gga
.
utc
;

617 
	}
}

619 
	$Cªadi2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

621 
i2c_devi˚
, 
i2c_d©a
[2];

623 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

624 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

626 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

627 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (()
i2c_d©a
[0] & 0x000000FF);

628 
	}
}

630 
	$Cªadi2c2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

632 
i2c_devi˚
, 
i2c_d©a
[2];

634 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

635 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

637 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 2, 
SCCB_OFF
);

638 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ((()
i2c_d©a
[0] << 8) + i2c_data[1]);

639 
	}
}

641 
	$Cwrôei2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

643 
i2c_devi˚
, 
i2c_d©a
[2];

645 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

646 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

647 
i2c_d©a
[1] = ()
P¨am
[2]->
VÆ
->
I¡egî
;

649 
	`i2cwrôe
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

650 
	}
}

652 
	$Cabs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

654 
ix
;

656 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

657 i‡(
ix
 < 0)

658 
ix
 = -ix;

659 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

660 
	}
}

661 
	$Csö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

663 
ix
;

665 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

666 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sö
(
ix
);

667 
	}
}

669 
	$Ccos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

671 
ix
;

673 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

674 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`cos
(
ix
);

675 
	}
}

677 
	$Cèn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

679 
ix
;

681 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

682 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`èn
(
ix
);

683 
	}
}

685 
	$Casö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

687 
y
, 
hyp
;

688 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

689 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

690 i‡(
y
 > 
hyp
)

691 
	`ProgømFaû
(
NULL
, "asin(): opposite greaterÅhan hypotenuse");

692 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`asö
(
y
, 
hyp
);

693 
	}
}

695 
	$Cacos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

697 
x
, 
hyp
;

698 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

699 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

700 i‡(
x
 > 
hyp
)

701 
	`ProgømFaû
(
NULL
, "acos():ádjacent greaterÅhan hypotenuse");

702 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`acos
(
x
, 
hyp
);

703 
	}
}

705 
	$C©™
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

707 
x
 ,
y
;

708 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

709 
x
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

710 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©™
(
y
, 
x
);

711 
	}
}

713 
	$Cgps_hód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

715 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

716 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

717 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

718 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

719 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

720 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_hód
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

721 
	}
}

723 
	$Cgps_di°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

725 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

726 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

727 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

728 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

729 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

730 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_di°
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

731 
	}
}

733 
	$Csqπ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

735 
x
;

736 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

737 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isqπ
(
x
);

738 
	}
}

740 
	$C¬£t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

741 
ix
, 
i1
;

743 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

744 i‡(
ix
 > 
NUM_NPATTERNS
)

745 
	`ProgømFaû
(
NULL
, "nnset(): invalid index");

746 
i1
=0; i1<8; i1++)

747 
≈©ã∫
[
ix
*8 + 
i1
] = ()
P¨am
[i1+1]->
VÆ
->
I¡egî
;

748 
	}
}

750 
	$C¬show
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

751 
ix
;

753 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

754 i‡(
ix
 > 
NUM_NPATTERNS
)

755 
	`ProgømFaû
(
NULL
, "nnshow(): invalid index");

756 
	`¬di•œy
(
ix
);

757 
	}
}

759 
	$C¬öô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

760 
	`¬öô_√tw‹k
();

761 
	}
}

763 
	$C¬åaö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

764 
ix
, 
i1
;

766 
	`¬åaö_√tw‹k
(10000);

767 
ix
=0; ix<
NUM_NPATTERNS
; ix++) {

768 
	`¬£t_∑âîn
(
ix
);

769 
	`¬ˇlcuœã_√tw‹k
();

770 
i1
=0; i1<
NUM_OUTPUT
; i1++)

771 
	`¥ötf
(" %3d", 
	`N_OUT
(
i1
)/10);

772 
	`¥ötf
("\r\n");

774 
	}
}

776 
	$C¬ã°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

777 
ix
, 
i1
, 
i2
, 
max
;

778 
ch
;

780 
ix
 = 0;

781 
i1
=0; i1<8; i1++) {

782 
ch
 = ()
P¨am
[
i1
]->
VÆ
->
I¡egî
;

783 
i2
=0; i2<8; i2++) {

784 i‡(
ch
 & 
nmask
[
i2
])

785 
	`N_IN
(
ix
++) = 1024;

787 
	`N_IN
(
ix
++) = 0;

790 
	`¬ˇlcuœã_√tw‹k
();

791 
ix
 = 0;

792 
max
 = 0;

793 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

794 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

795 i‡(
max
 < 
NNVe˘
[
i1
]) {

796 
ix
 = 
i1
;

797 
max
 = 
NNVe˘
[
i1
];

800 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

801 
	}
}

803 
	$C¬m©chblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

804 
ix
, 
i1
, 
max
;

806 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

807 i‡(
ix
 > 
MAX_BLOBS
)

808 
	`ProgømFaû
(
NULL
, "nnmatchblob(): invalid blob index");

809 i‡(!
blob˙t
[
ix
])

810 
	`ProgømFaû
(
NULL
, "nnmatchblob():Çotá valid blob");

815 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[
ix
], 
blobx1
[ix], 
blobx2
[ix],

816 
bloby1
[
ix
], 
bloby2
[ix], 
imgWidth
, 
imgHeight
);

817 
	`¬ˇlcuœã_√tw‹k
();

818 
ix
 = 0;

819 
max
 = 0;

820 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

821 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

822 i‡(
max
 < 
NNVe˘
[
i1
]) {

823 
ix
 = 
i1
;

824 
max
 = 
NNVe˘
[
i1
];

827 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

828 
	}
}

830 
	$C¬À¨nblob
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

831 
ix
;

833 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

834 i‡(
ix
 > 
NUM_NPATTERNS
)

835 
	`ProgømFaû
(
NULL
, "nnlearnblob(): invalid index");

836 i‡(!
blob˙t
[0])

837 
	`ProgømFaû
(
NULL
, "nnlearnblob():Ço blobÅo grab");

838 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[0], 
blobx1
[0], 
blobx2
[0],

839 
bloby1
[0], 
bloby2
[0], 
imgWidth
, 
imgHeight
);

840 
	`¬∑ck8x8
(
ix
);

841 
	`¬di•œy
(
ix
);

842 
	}
}

844 
	$Caut‹un
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

845 
ix
, 
t0
;

846 
ch
;

848 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

849 
t0
 = 
	`ªadRTC
();

850 
	`ªadRTC
(Ë< (
t0
 + 
ix
*1000)) {

851 i‡(
	`gëch¨
(&
ch
)) {

852 i‡(
ch
 == 0x1B) {

853 
	`¥ötf
("found ESC\r\n");

854 
PicocExôBuf
[40] = 1;

855 
	`l⁄gjmp
(
PicocExôBuf
, 1);

859 
	}
}

861 
	$Clöío
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

862 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
P¨£r
->
Löe
;

863 
	}
}

865 
	$Cîr‹msg
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

866 
	`Pœtf‹mEº‹Pªfix
(
P¨£r
);

867 
	`LibPrötf
(
P¨£r
, 
Rëu∫VÆue
, 
P¨am
, 
NumArgs
);

868 
	}
}

871 
LibøryFun˘i⁄
 
	gPœtf‹mLibøry
[] =

873 { 
Csig«l
, "int signal();" },

874 { 
Csig«l1
, "int signal1();" },

875 { 
Cöput
, "int input();" },

876 { 
Cöput1
, "int input1();" },

877 { 
Cöô_u¨t1
, "void init_uart1(int);" },

878 { 
Cªad_öt
, "intÑead_int();" },

879 { 
Cªad_°r
, "intÑead_str(char *);" },

880 { 
Couçut
, "void output(int);" },

881 { 
Couçut1
, "void output1(int);" },

882 { 
Cdñay
, "void delay(int);" },

883 { 
Cønd
, "intÑand(int);" },

884 { 
Ctime
, "intÅime();" },

885 { 
Ciodú
, "void iodir(int);" },

886 { 
Ci‹ód
, "int ioread();" },

887 { 
Ciowrôe
, "void iowrite(int);" },

888 { 
C≥ek
, "intÖeek(int, int);" },

889 { 
Cpoke
, "voidÖoke(int, int, int);" },

890 { 
CmŸ‹s
, "void motors(int, int);" },

891 { 
CmŸ‹s2
, "void motors2(int, int);" },

892 { 
CmŸ‹x
, "void motorx(int, int);" },

893 { 
C£rvos
, "void servos(int, int);" },

894 { 
C£rvos2
, "void servos2(int, int);" },

895 { 
Cícodîs
, "voidÉncoders();" },

896 { 
Cícodîx
, "intÉncoderx(int);" },

897 { 
Cœ£r
, "voidÜaser(int);" },

898 { 
Cs⁄¨
, "int sonar(int);" },

899 { 
Cønge
, "intÑange();" },

900 { 
Cb©ãry
, "int battery();" },

901 { 
Cvcﬁ‹
, "void vcolor(int, int, int, int, int, int, int);" },

902 { 
Cvföd
, "int vfind(int, int, int, int, int);" },

903 { 
Cvˇm
, "void vcam(int);" },

904 { 
Cvˇp
, "void vcap();" },

905 { 
Cvrˇp
, "void vrcap();" },

906 { 
Cvdiff
, "void vdiff(int);" },

907 { 
Cvpix
, "void vpix(int, int);" },

908 { 
Cvsˇn
, "int vscan(int, int);" },

909 { 
Cvmón
, "void vmean();" },

910 { 
Cvblob
, "int vblob(int, int);" },

911 { 
Cvj≥g
, "int vjpeg(int);" },

912 { 
Cv£nd
, "void vsend(int);" },

913 { 
Ccom∑ss
, "int compass();" },

914 { 
Ccom∑ssx
, "int compassx();" },

915 { 
Ccom∑ssxˇl
, "void compassxcal(int, int, int, int, int);" },

916 { 
C™Æog
, "intánalog(int);" },

917 { 
C™Æogx
, "intánalogx(int);" },

918 { 
Ctût
, "intÅilt(int);" },

919 { 
Cgps
, "void gps();" },

920 { 
Cªadi2c
, "intÑeadi2c(int, int);" },

921 { 
Cªadi2c2
, "intÑeadi2c2(int, int);" },

922 { 
Cwrôei2c
, "void writei2c(int, int, int);" },

923 { 
Cabs
, "intábs(int);" },

924 { 
Csö
, "int sin(int);" },

925 { 
Ccos
, "int cos(int);" },

926 { 
Cèn
, "intÅan(int);" },

927 { 
Casö
, "intásin(int, int);" },

928 { 
Cacos
, "intácos(int, int);" },

929 { 
C©™
, "intátan(int, int);" },

930 { 
Cgps_hód
, "int gps_head(int, int, int, int);" },

931 { 
Cgps_di°
, "int gps_dist(int, int, int, int);" },

932 { 
Csqπ
, "int sqrt(int);" },

933 { 
C¬show
, "voidÇnshow(int);" },

934 { 
C¬£t
, "voidÇnset(int, int, int, int, int, int, int, int, int);" },

935 { 
C¬öô
, "voidÇninit();" },

936 { 
C¬åaö
, "voidÇntrain();" },

937 { 
C¬ã°
, "intÇntest(int, int, int, int, int, int, int, int);" },

938 { 
C¬m©chblob
, "intÇnmatchblob(int);" },

939 { 
C¬À¨nblob
, "voidÇnlearnblob(int);" },

940 { 
Caut‹un
, "voidáutorun(int);" },

941 { 
Clöío
, "intÜineno();" },

942 { 
Cîr‹msg
, "voidÉrrormsg(char *);" },

943 { 
NULL
, NULL }

	@platform/library_surveyor.c

1 
	~"../öãΩªãr.h
"

2 
	~"../picoc.h
"

4 
	gBlob˙t
, 
	gBlobx1
, 
	gBlobx2
, 
	gBloby1
, 
	gBloby2
, 
	gIy1
, 
	gIy2
, 
	gIu1
, 
	gIu2
, 
	gIv1
, 
	gIv2
;

5 
	gCxmö
, 
	gCxmax
, 
	gCymö
, 
	gCymax
;

6 
	gGPSœt
, 
	gGPSl⁄
, 
	gGPSÆt
, 
	gGPSfix
, 
	gGPSßt
, 
	gGPSutc
, 
	gElcou¡
, 
	gErcou¡
;

7 
	gSˇnVe˘
[16], 
	gNNVe˘
[
NUM_OUTPUT
];

9 
	$Pœtf‹mLibøryInô
()

11 
VÆueTy≥
 *
I¡AºayTy≥
;

13 
I¡AºayTy≥
 = 
	`Ty≥GëM©chög
(
NULL
, &
I¡Ty≥
, 
Ty≥Aºay
, 16, 
SåEm±y
, 
TRUE
);

14 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "sˇnve˘", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
SˇnVe˘
, 
FALSE
);

15 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "√ur⁄", 
I¡AºayTy≥
, (
AnyVÆue
 *)&
NNVe˘
, 
FALSE
);

16 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "xbuf", 
Ch¨AºayTy≥
, (
AnyVÆue
 *)&
xbuff
, 
FALSE
);

17 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blob˙t", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blob˙t
, 
FALSE
);

18 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx1
, 
FALSE
);

19 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "blobx2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Blobx2
, 
FALSE
);

20 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby1
, 
FALSE
);

21 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "bloby2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Bloby2
, 
FALSE
);

22 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "lcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Elcou¡
, 
FALSE
);

23 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "rcou¡", &
I¡Ty≥
, (
AnyVÆue
 *)&
Ercou¡
, 
FALSE
);

24 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy1
, 
FALSE
);

25 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "y2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iy2
, 
FALSE
);

26 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu1
, 
FALSE
);

27 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "u2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iu2
, 
FALSE
);

28 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v1", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv1
, 
FALSE
);

29 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "v2", &
I¡Ty≥
, (
AnyVÆue
 *)&
Iv2
, 
FALSE
);

30 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶©", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSœt
, 
FALSE
);

31 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gp¶⁄", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSl⁄
, 
FALSE
);

32 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpß…", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSÆt
, 
FALSE
);

33 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsfix", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSfix
, 
FALSE
);

34 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsßt", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSßt
, 
FALSE
);

35 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "gpsutc", &
I¡Ty≥
, (
AnyVÆue
 *)&
GPSutc
, 
FALSE
);

36 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cxmö", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cxmö
, 
FALSE
);

37 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cxmax", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cxmax
, 
FALSE
);

38 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cymö", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cymö
, 
FALSE
);

39 
	`V¨übÀDeföePœtf‹mV¨
(
NULL
, "cymax", &
I¡Ty≥
, (
AnyVÆue
 *)&
Cymax
, 
FALSE
);

40 
	`LibøryAdd
(&
GlobÆTabÀ
, "∂©f‹mÜibøry", &
Pœtf‹mLibøry
[0]);

41 
	}
}

43 
	$Csig«l
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

45 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gësig«l
();

46 
	}
}

48 
	$Csig«l1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

50 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u¨t1Sig«l
();

51 
	}
}

53 
	$Cöput
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

55 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gëch
();

56 
	}
}

58 
	$Cöput1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

60 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`u¨t1GëCh
();

61 
	}
}

63 
	$Cªad_öt
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

65 
ix
, 
sign
;

66 
ch
;

68 
ix
 = 0;

69 
sign
 = 1;

71 
ch
 = 
	`gëch
();

72 i‡(
ch
 == '-') {

73 
sign
 = -1;

76 i‡((
ch
 < '0') || (ch > '9')) {

77 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
 * 
sign
;

80 
ix
 = (ix * 10Ë+ (
ch
 & 0x0F);

82 
	}
}

84 
	$Cªad_°r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

86 
ix
;

87 
ch
;

89 
ix
 = 0;

90 *
˝
 = (*)
P¨am
[0]->
VÆ
->
Poöãr
;

92 
ch
 = 
	`gëch
();

93 
˝
[
ix
++] = 
ch
;

94 i‡((
ch
 == 0) || (ch == 0x01)) {

95 
ix
--;

96 
˝
[
ix
] = 0;

99 i‡(
ix
 > 1023) {

100 
˝
[
ix
] = 0;

101 
ix
--;

105 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

106 
	}
}

108 
	$Cöô_u¨t1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

110 
ii
;

111 
ii
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

112 
	`öô_u¨t1
(
ii
);

113 
	}
}

115 
	$Couçut
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

117 
ch
;

118 
ch
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

119 
	`putch¨
(()
ch
);

120 
	}
}

122 
	$Couçut1
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

124 
ch
;

125 
ch
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

126 
	`u¨t1SídCh¨
(()
ch
);

127 
	}
}

129 
	$Cdñay
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

131 
dñ
;

133 
dñ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

134 i‡((
dñ
 < 0) || (del > 1000000))

136 
	`dñayMS
(
dñ
);

137 
	}
}

139 
	$Cønd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

141 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ønd
(Ë% ()(
P¨am
[0]->Val->Integer + 1);

142 
	}
}

144 
	$Ctime
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

146 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()
	`ªadRTC
();

147 
	}
}

149 
	$Ciodú
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

151 
dú
;

153 
dú
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

154 *
pPORTHIO_DIR
 = ((
dú
 << 10) & 0xFC00) + (*pPORTHIO_DIR & 0x03FF);

155 *
pPORTHIO_INEN
 = (((~
dú
) << 10) & 0xFC00) + (*pPORTHIO_INEN & 0x03FF);

156 
	}
}

158 
	$Ci‹ód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

160 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (*
pPORTHIO
 >> 10) & 0x003F;

161 
	}
}

163 
	$Ciowrôe
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

165 *
pPORTHIO
 = ((
P¨am
[0]->
VÆ
->
I¡egî
 << 10) & 0xFC00) + (*pPORTHIO & 0x03FF);

166 
	}
}

168 
	$C≥ek
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

170 
size
, 
±r
;

171 *
˝
;

172 *
•
;

173 *
ù
;

177 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

178 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

179 
size
) {

181 
˝
 = (*)
±r
;

182 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
˝
);

185 
•
 = (*)(
±r
 & 0xFFFFFFFE);

186 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()(()*
•
);

189 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

190 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ()*
ù
;

193 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

196 
	}
}

198 
	$Cpoke
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

200 
size
, 
±r
, 
vÆ
;

201 *
˝
;

202 *
•
;

203 *
ù
;

207 
±r
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

208 
size
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

209 
vÆ
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

210 
size
) {

212 
˝
 = (*)
±r
;

213 *
˝
 = ()(
vÆ
 & 0x000000FF);

216 
•
 = (*)(
±r
 & 0xFFFFFFFE);

217 *
•
 = ()(
vÆ
 & 0x0000FFFF);

220 
ù
 = (*)(
±r
 & 0xFFFFFFFC);

221 *
ù
 = 
vÆ
;

226 
	}
}

228 
	$Cícodîs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

230 
ix
;

232 
ix
 = 
	`ícodîs
();

233 
Elcou¡
 = (
ix
 >> 16) & 0x0000FFFF;

234 
Ercou¡
 = 
ix
 & 0x0000FFFF;

235 
	}
}

237 
	$Cícodîx
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

239 
ix
;

241 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

242 i‡((
ix
<0) || (ix>7))

243 
	`ProgømFaû
(
NULL
, "encoderx(): invalid channel");

244 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`ícodî_4wd
(
ix
);

245 
	}
}

247 
	$CmŸ‹s
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

249 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

250 i‡((
l•ìd
 < -100) || (lspeed > 100))

251 
	`ProgømFaû
(
NULL
, "motors():Üeft motor value out ofÑange");

252 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

253 i‡((
r•ìd
 < -100) || (rspeed > 100))

254 
	`ProgømFaû
(
NULL
, "motors():Ñight motor value out ofÑange");

255 i‡(!
pwm1_öô
) {

256 
	`öôPWM
();

257 
pwm1_öô
 = 1;

258 
pwm1_mode
 = 
PWM_PWM
;

259 
ba£_•ìd
 = 50;

261 
	`£tPWM
(
l•ìd
, 
r•ìd
);

262 
	}
}

264 
	$CmŸ‹s2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

266 
l•ìd2
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

267 i‡((
l•ìd2
 < -100) || (lspeed2 > 100))

268 
	`ProgømFaû
(
NULL
, "motors2():Üeft motor value out ofÑange");

269 
r•ìd2
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

270 i‡((
r•ìd2
 < -100) || (rspeed2 > 100))

271 
	`ProgømFaû
(
NULL
, "motors2():Ñight motor value out ofÑange");

272 i‡(!
pwm2_öô
) {

273 
	`öôPWM2
();

274 
pwm2_öô
 = 1;

275 
pwm2_mode
 = 
PWM_PWM
;

276 
ba£_•ìd2
 = 50;

278 
	`£tPWM2
(
l•ìd2
, 
r•ìd2
);

279 
	}
}

282 
	$CmŸ‹x
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

284 
ch
;

285 
ls
, 
rs
;

287 
ls
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

288 i‡((
ls
 < -100) || (ls > 100))

289 
	`ProgømFaû
(
NULL
, "motors():Üeft motor value out ofÑange");

290 
ls
 = (ls * 127) / 100;

291 
rs
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

292 i‡((
rs
 < -100) || (rs > 100))

293 
	`ProgømFaû
(
NULL
, "motors():Ñight motor value out ofÑange");

294 
rs
 = (rs * 127) / 100;

295 i‡(
xwd_öô
 == 0) {

296 
xwd_öô
 = 1;

297 
	`öô_u¨t1
(115200);

298 
	`dñayMS
(10);

300 
	`u¨t1SídCh¨
('x');

301 
	`u¨t1SídCh¨
(()
ls
);

302 
	`u¨t1SídCh¨
(()
rs
);

303 
	`u¨t1GëCh¨
(&
ch
))

305 
	}
}

307 
	$C£rvos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

309 
l•ìd
, 
r•ìd
;

311 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

312 i‡((
l•ìd
 < 0) || (lspeed > 100))

313 
	`ProgømFaû
(
NULL
, "servos(): TMR2 value out ofÑange");

314 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

315 i‡((
r•ìd
 < 0) || (rspeed > 100))

316 
	`ProgømFaû
(
NULL
, "servos()(): TMR3 value out ofÑange");

317 i‡(!
pwm1_öô
) {

318 
	`öôPPM1
();

319 
pwm1_öô
 = 1;

320 
pwm1_mode
 = 
PWM_PPM
;

322 
	`£tPPM1
(
l•ìd
, 
r•ìd
);

323 
	}
}

325 
	$C£rvos2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

327 
l•ìd
, 
r•ìd
;

329 
l•ìd
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

330 i‡((
l•ìd
 < 0) || (lspeed > 100))

331 
	`ProgømFaû
(
NULL
, "servos2(): TMR6 value out ofÑange");

332 
r•ìd
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

333 i‡((
r•ìd
 < 0) || (rspeed > 100))

334 
	`ProgømFaû
(
NULL
, "servos2(): TMR7 value out ofÑange");

335 i‡(!
pwm2_öô
) {

336 
	`öôPPM2
();

337 
pwm2_öô
 = 1;

338 
pwm2_mode
 = 
PWM_PPM
;

340 
	`£tPPM2
(
l•ìd
, 
r•ìd
);

341 
	}
}

343 
	$Cœ£r
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

345 *
pPORTHIO
 &= 0xFD7F;

346 
P¨am
[0]->
VÆ
->
I¡egî
) {

348 *
pPORTHIO
 |= 0x0080;

351 *
pPORTHIO
 |= 0x0200;

354 *
pPORTHIO
 |= 0x0280;

357 
	}
}

359 
	$Cs⁄¨
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

361 
i
;

362 
i
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

363 i‡((
i
<1) || (i>4)) {

364 
	`ProgømFaû
(
NULL
, "sonar(): 1, 2, 3, 4áre only valid selections");

366 
	`s⁄¨
();

367 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
s⁄¨_d©a
[
i
] / 100;

368 
	}
}

370 
	$Cønge
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

372 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`œ£r_ønge
(0);

373 
	}
}

375 
	$Cb©ãry
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

377 i‡(*
pPORTHIO
 & 0x0004)

378 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 0;

380 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 1;

381 
	}
}

383 
	$Cvcﬁ‹
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

386 
ix
;

388 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

389 
ymö
[
ix
] = 
P¨am
[1]->
VÆ
->
I¡egî
;

390 
ymax
[
ix
] = 
P¨am
[2]->
VÆ
->
I¡egî
;

391 
umö
[
ix
] = 
P¨am
[3]->
VÆ
->
I¡egî
;

392 
umax
[
ix
] = 
P¨am
[4]->
VÆ
->
I¡egî
;

393 
vmö
[
ix
] = 
P¨am
[5]->
VÆ
->
I¡egî
;

394 
vmax
[
ix
] = 
P¨am
[6]->
VÆ
->
I¡egî
;

395 
	}
}

397 
	$Cvˇm
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

401 
cx
, 
i2c_d©a
[2];

403 
cx
 = ()
P¨am
[0]->
VÆ
->
I¡egî
 & 0x07;

404 
i2c_d©a
[0] = 0x13;

405 
i2c_d©a
[1] = 0xC0 + 
cx
;

406 
	`i2cwrôe
(0x30, (*)
i2c_d©a
, 1, 
SCCB_ON
);

407 
	`i2cwrôe
(0x21, (*)
i2c_d©a
, 1, 
SCCB_ON
);

408 
	}
}

410 
	$Cvföd
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

413 
ix
, 
x1
, 
x2
, 
y1
, 
y2
;

415 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

416 
x1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

417 
x2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

418 
y1
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

419 
y2
 = 
P¨am
[4]->
VÆ
->
I¡egî
;

420 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`vföd
((*)
FRAME_BUF
, 
ix
, 
x1
, 
x2
, 
y1
, 
y2
);

421 
	}
}

423 
	$Cvˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

425 
	`gøb_‰ame
();

426 
	}
}

428 
	$Cvrˇp
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

430 
	`gøb_ª„ªn˚_‰ame
();

431 
	}
}

433 
	$Cvdiff
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

435 
‰ame_diff_Êag
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

436 
	}
}

438 
	$Cvpix
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

440 
x
, 
y
, 
ix
;

441 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

442 
y
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

443 
ix
 = 
	`vpix
((*)
FRAME_BUF
, 
x
, 
y
);

444 
Iy1
 = ((
ix
>>16) & 0x000000FF);

445 
Iu1
 = ((
ix
>>24) & 0x000000FF);

446 
Iv1
 = ((
ix
>>8) & 0x000000FF);

447 
	}
}

449 
	$Cvsˇn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

451 
cﬁ
, 
thªsh
, 
ix
;

452 
cﬁ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

453 i‡((
cﬁ
 < 1) || (col > 9))

454 
	`ProgømFaû
(
NULL
, "vscan():Çumber of columns must be between 1ánd 9");

455 
thªsh
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

456 i‡((
thªsh
 < 0) || (thresh > 9999))

457 
	`ProgømFaû
(
NULL
, "vscan():Åhreshold must be between 0ánd 9999");

458 
ix
 = 
	`vsˇn
((*)
SPI_BUFFER1
, (*)
FRAME_BUF
, 
thªsh
, ()
cﬁ
, (*)&
SˇnVe˘
[0]);

459 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

460 
	}
}

462 
	$Cvmón
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

464 
	`vmón
((*)
FRAME_BUF
);

465 
Iy1
 = 
món
[0];

466 
Iu1
 = 
món
[1];

467 
Iv1
 = 
món
[2];

468 
	}
}

471 
	$Cvblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

472 
ix
, 
iblob
, 
numblob
;

474 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

475 i‡(
ix
 > 
MAX_COLORS
)

476 
	`ProgømFaû
(
NULL
, "blob(): invalid color index");

477 
iblob
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

478 i‡(
iblob
 > 
MAX_BLOBS
)

479 
	`ProgømFaû
(
NULL
, "blob(): invalid blob index");

481 
numblob
 = 
	`vblob
((*)
FRAME_BUF
, (*)
FRAME_BUF3
, 
ix
);

483 i‡((
blob˙t
[
iblob
] =0Ë|| (
numblob
 == -1)) {

484 
Blob˙t
 = 0;

486 
Blob˙t
 = 
blob˙t
[
iblob
];

487 
Blobx1
 = 
blobx1
[
iblob
];

488 
Blobx2
 = 
blobx2
[
iblob
];

489 
Bloby1
 = 
bloby1
[
iblob
];

490 
Bloby2
 = 
bloby2
[
iblob
];

492 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
numblob
;

493 
	}
}

495 
	$Cvj≥g
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

496 
image_size
, 
quÆ
;

497 *
ouçut_°¨t
, *
ouçut_íd
;

499 
quÆ
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

500 i‡((
quÆ
 < 1) || (qual > 8))

501 
	`ProgømFaû
(
NULL
, "vjpeg(): qualityÖarameter out ofÑange");

503 
ouçut_°¨t
 = (*)
JPEG_BUF
;

504 
ouçut_íd
 = 
	`ícode_image
((*)
FRAME_BUF
, 
ouçut_°¨t
, 
quÆ
,

505 
FOUR_TWO_TWO
, 
imgWidth
, 
imgHeight
);

506 
image_size
 = ()(
ouçut_íd
 - 
ouçut_°¨t
);

508 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
image_size
;

509 
	}
}

511 
	$Cv£nd
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

512 
ix
, 
image_size
;

513 *
˝
;

515 
image_size
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

516 i‡((
image_size
 < 0) || (image_size > 200000))

517 
	`ProgømFaû
(
NULL
, "vsend(): image size out ofÑange");

519 
	`Àd1_⁄
();

521 
˝
 = (*)
JPEG_BUF
;

522 
ix
=0; ix<
image_size
; ix++)

523 
	`putch¨
(*
˝
++);

525 
	`Àd0_⁄
();

526 
	}
}

528 
	$Ccom∑ss
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

530 
i2c_d©a
[2];

531 
ix
;

533 
i2c_d©a
[0] = 0x41;

534 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

535 
	`dñayMS
(20);

536 
i2c_d©a
[0] = 0x41;

537 
	`i2¸ód
(0x22, (*)
i2c_d©a
, 2, 
SCCB_ON
);

538 
ix
 = (()(
i2c_d©a
[0] << 8) + i2c_data[1]) / 10;

539 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

540 
	}
}

542 
	$Ccom∑ssx
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

544 
x
, 
y
, 
z
;

545 
ix
;

547 
ix
 = ()
	`ªad_com∑ss3x
(&
x
, &
y
, &
z
);

548 
Cxmö
 = 
cxmö
;

549 
Cxmax
 = 
cxmax
;

550 
Cymö
 = 
cymö
;

551 
Cymax
 = 
cymax
;

552 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

553 
	}
}

555 
	$Ccom∑ssxˇl
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

558 
cxmö
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

559 
cxmax
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

560 
cymö
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

561 
cymax
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

562 
com∑ss_c⁄töuous_ˇlibøti⁄
 = 
P¨am
[4]->
VÆ
->
I¡egî
;

563 
	}
}

565 
	$Ctût
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

567 
ix
;

569 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

570 i‡((
ix
<1) || (ix>3))

571 
	`ProgømFaû
(
NULL
, "tilt(): invalid channel");

572 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`tût
(
ix
);

573 
	}
}

575 
	$C™Æog
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

577 
ix
, 
ch™√l
;

579 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

580 i‡((
ix
<1) || (ix>28))

581 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

582 
ch™√l
 = 
ix
 % 10;

583 i‡((
ch™√l
<1) || (channel>8))

584 
	`ProgømFaû
(
NULL
, "analog(): invalid channel");

585 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`™Æog
(
ix
);

586 
	}
}

598 
	$C™Æogx
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

600 
ix
;

602 
ix
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

603 i‡((
ix
<0) || (ix>7))

604 
	`ProgømFaû
(
NULL
, "analogx(): invalid channel");

605 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`™Æog_4wd
(
ix
);

606 
	}
}

608 
	$Cgps
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

610 
	`gps_∑r£
();

611 
GPSœt
 = 
gps_gga
.
œt
;

612 
GPSl⁄
 = 
gps_gga
.
l⁄
;

613 
GPSÆt
 = 
gps_gga
.
Æt
;

614 
GPSfix
 = 
gps_gga
.
fix
;

615 
GPSßt
 = 
gps_gga
.
ßt
;

616 
GPSutc
 = 
gps_gga
.
utc
;

617 
	}
}

619 
	$Cªadi2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

621 
i2c_devi˚
, 
i2c_d©a
[2];

623 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

624 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

626 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

627 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = (()
i2c_d©a
[0] & 0x000000FF);

628 
	}
}

630 
	$Cªadi2c2
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

632 
i2c_devi˚
, 
i2c_d©a
[2];

634 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

635 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

637 
	`i2¸ód
(
i2c_devi˚
, (*)
i2c_d©a
, 2, 
SCCB_OFF
);

638 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = ((()
i2c_d©a
[0] << 8) + i2c_data[1]);

639 
	}
}

641 
	$Cwrôei2c
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

643 
i2c_devi˚
, 
i2c_d©a
[2];

645 
i2c_devi˚
 = ()
P¨am
[0]->
VÆ
->
I¡egî
;

646 
i2c_d©a
[0] = ()
P¨am
[1]->
VÆ
->
I¡egî
;

647 
i2c_d©a
[1] = ()
P¨am
[2]->
VÆ
->
I¡egî
;

649 
	`i2cwrôe
(
i2c_devi˚
, (*)
i2c_d©a
, 1, 
SCCB_OFF
);

650 
	}
}

652 
	$Cabs
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

654 
ix
;

656 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

657 i‡(
ix
 < 0)

658 
ix
 = -ix;

659 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

660 
	}
}

661 
	$Csö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

663 
ix
;

665 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

666 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`sö
(
ix
);

667 
	}
}

669 
	$Ccos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

671 
ix
;

673 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

674 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`cos
(
ix
);

675 
	}
}

677 
	$Cèn
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

679 
ix
;

681 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

682 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`èn
(
ix
);

683 
	}
}

685 
	$Casö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

687 
y
, 
hyp
;

688 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

689 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

690 i‡(
y
 > 
hyp
)

691 
	`ProgømFaû
(
NULL
, "asin(): opposite greaterÅhan hypotenuse");

692 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`asö
(
y
, 
hyp
);

693 
	}
}

695 
	$Cacos
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

697 
x
, 
hyp
;

698 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

699 
hyp
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

700 i‡(
x
 > 
hyp
)

701 
	`ProgømFaû
(
NULL
, "acos():ádjacent greaterÅhan hypotenuse");

702 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`acos
(
x
, 
hyp
);

703 
	}
}

705 
	$C©™
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

707 
x
 ,
y
;

708 
y
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

709 
x
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

710 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`©™
(
y
, 
x
);

711 
	}
}

713 
	$Cgps_hód
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

715 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

716 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

717 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

718 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

719 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

720 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_hód
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

721 
	}
}

723 
	$Cgps_di°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

725 
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
;

726 
œt1
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

727 
l⁄1
 = 
P¨am
[1]->
VÆ
->
I¡egî
;

728 
œt2
 = 
P¨am
[2]->
VÆ
->
I¡egî
;

729 
l⁄2
 = 
P¨am
[3]->
VÆ
->
I¡egî
;

730 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`gps_di°
(
œt1
, 
l⁄1
, 
œt2
, 
l⁄2
);

731 
	}
}

733 
	$Csqπ
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

735 
x
;

736 
x
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

737 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
	`isqπ
(
x
);

738 
	}
}

740 
	$C¬£t
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

741 
ix
, 
i1
;

743 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

744 i‡(
ix
 > 
NUM_NPATTERNS
)

745 
	`ProgømFaû
(
NULL
, "nnset(): invalid index");

746 
i1
=0; i1<8; i1++)

747 
≈©ã∫
[
ix
*8 + 
i1
] = ()
P¨am
[i1+1]->
VÆ
->
I¡egî
;

748 
	}
}

750 
	$C¬show
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

751 
ix
;

753 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

754 i‡(
ix
 > 
NUM_NPATTERNS
)

755 
	`ProgømFaû
(
NULL
, "nnshow(): invalid index");

756 
	`¬di•œy
(
ix
);

757 
	}
}

759 
	$C¬öô
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

760 
	`¬öô_√tw‹k
();

761 
	}
}

763 
	$C¬åaö
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

764 
ix
, 
i1
;

766 
	`¬åaö_√tw‹k
(10000);

767 
ix
=0; ix<
NUM_NPATTERNS
; ix++) {

768 
	`¬£t_∑âîn
(
ix
);

769 
	`¬ˇlcuœã_√tw‹k
();

770 
i1
=0; i1<
NUM_OUTPUT
; i1++)

771 
	`¥ötf
(" %3d", 
	`N_OUT
(
i1
)/10);

772 
	`¥ötf
("\r\n");

774 
	}
}

776 
	$C¬ã°
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

777 
ix
, 
i1
, 
i2
, 
max
;

778 
ch
;

780 
ix
 = 0;

781 
i1
=0; i1<8; i1++) {

782 
ch
 = ()
P¨am
[
i1
]->
VÆ
->
I¡egî
;

783 
i2
=0; i2<8; i2++) {

784 i‡(
ch
 & 
nmask
[
i2
])

785 
	`N_IN
(
ix
++) = 1024;

787 
	`N_IN
(
ix
++) = 0;

790 
	`¬ˇlcuœã_√tw‹k
();

791 
ix
 = 0;

792 
max
 = 0;

793 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

794 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

795 i‡(
max
 < 
NNVe˘
[
i1
]) {

796 
ix
 = 
i1
;

797 
max
 = 
NNVe˘
[
i1
];

800 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

801 
	}
}

803 
	$C¬m©chblob
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

804 
ix
, 
i1
, 
max
;

806 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

807 i‡(
ix
 > 
MAX_BLOBS
)

808 
	`ProgømFaû
(
NULL
, "nnmatchblob(): invalid blob index");

809 i‡(!
blob˙t
[
ix
])

810 
	`ProgømFaû
(
NULL
, "nnmatchblob():Çotá valid blob");

815 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[
ix
], 
blobx1
[ix], 
blobx2
[ix],

816 
bloby1
[
ix
], 
bloby2
[ix], 
imgWidth
, 
imgHeight
);

817 
	`¬ˇlcuœã_√tw‹k
();

818 
ix
 = 0;

819 
max
 = 0;

820 
i1
=0; i1<
NUM_OUTPUT
; i1++) {

821 
NNVe˘
[
i1
] = 
	`N_OUT
(i1)/10;

822 i‡(
max
 < 
NNVe˘
[
i1
]) {

823 
ix
 = 
i1
;

824 
max
 = 
NNVe˘
[
i1
];

827 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
ix
;

828 
	}
}

830 
	$C¬À¨nblob
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

831 
ix
;

833 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

834 i‡(
ix
 > 
NUM_NPATTERNS
)

835 
	`ProgømFaû
(
NULL
, "nnlearnblob(): invalid index");

836 i‡(!
blob˙t
[0])

837 
	`ProgømFaû
(
NULL
, "nnlearnblob():Ço blobÅo grab");

838 
	`¬sˇÀ8x8
((*)
FRAME_BUF3
, 
blobix
[0], 
blobx1
[0], 
blobx2
[0],

839 
bloby1
[0], 
bloby2
[0], 
imgWidth
, 
imgHeight
);

840 
	`¬∑ck8x8
(
ix
);

841 
	`¬di•œy
(
ix
);

842 
	}
}

844 
	$Caut‹un
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

845 
ix
, 
t0
;

846 
ch
;

848 
ix
 = 
P¨am
[0]->
VÆ
->
I¡egî
;

849 
t0
 = 
	`ªadRTC
();

850 
	`ªadRTC
(Ë< (
t0
 + 
ix
*1000)) {

851 i‡(
	`gëch¨
(&
ch
)) {

852 i‡(
ch
 == 0x1B) {

853 
	`¥ötf
("found ESC\r\n");

854 
PicocExôBuf
[40] = 1;

855 
	`l⁄gjmp
(
PicocExôBuf
, 1);

859 
	}
}

861 
	$Clöío
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

862 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
P¨£r
->
Löe
;

863 
	}
}

865 
	$Cîr‹msg
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
) {

866 
	`Pœtf‹mEº‹Pªfix
(
P¨£r
);

867 
	`LibPrötf
(
P¨£r
, 
Rëu∫VÆue
, 
P¨am
, 
NumArgs
);

868 
	}
}

871 
LibøryFun˘i⁄
 
	gPœtf‹mLibøry
[] =

873 { 
Csig«l
, "int signal();" },

874 { 
Csig«l1
, "int signal1();" },

875 { 
Cöput
, "int input();" },

876 { 
Cöput1
, "int input1();" },

877 { 
Cöô_u¨t1
, "void init_uart1(int);" },

878 { 
Cªad_öt
, "intÑead_int();" },

879 { 
Cªad_°r
, "intÑead_str(char *);" },

880 { 
Couçut
, "void output(int);" },

881 { 
Couçut1
, "void output1(int);" },

882 { 
Cdñay
, "void delay(int);" },

883 { 
Cønd
, "intÑand(int);" },

884 { 
Ctime
, "intÅime();" },

885 { 
Ciodú
, "void iodir(int);" },

886 { 
Ci‹ód
, "int ioread();" },

887 { 
Ciowrôe
, "void iowrite(int);" },

888 { 
C≥ek
, "intÖeek(int, int);" },

889 { 
Cpoke
, "voidÖoke(int, int, int);" },

890 { 
CmŸ‹s
, "void motors(int, int);" },

891 { 
CmŸ‹s2
, "void motors2(int, int);" },

892 { 
CmŸ‹x
, "void motorx(int, int);" },

893 { 
C£rvos
, "void servos(int, int);" },

894 { 
C£rvos2
, "void servos2(int, int);" },

895 { 
Cícodîs
, "voidÉncoders();" },

896 { 
Cícodîx
, "intÉncoderx(int);" },

897 { 
Cœ£r
, "voidÜaser(int);" },

898 { 
Cs⁄¨
, "int sonar(int);" },

899 { 
Cønge
, "intÑange();" },

900 { 
Cb©ãry
, "int battery();" },

901 { 
Cvcﬁ‹
, "void vcolor(int, int, int, int, int, int, int);" },

902 { 
Cvföd
, "int vfind(int, int, int, int, int);" },

903 { 
Cvˇm
, "void vcam(int);" },

904 { 
Cvˇp
, "void vcap();" },

905 { 
Cvrˇp
, "void vrcap();" },

906 { 
Cvdiff
, "void vdiff(int);" },

907 { 
Cvpix
, "void vpix(int, int);" },

908 { 
Cvsˇn
, "int vscan(int, int);" },

909 { 
Cvmón
, "void vmean();" },

910 { 
Cvblob
, "int vblob(int, int);" },

911 { 
Cvj≥g
, "int vjpeg(int);" },

912 { 
Cv£nd
, "void vsend(int);" },

913 { 
Ccom∑ss
, "int compass();" },

914 { 
Ccom∑ssx
, "int compassx();" },

915 { 
Ccom∑ssxˇl
, "void compassxcal(int, int, int, int, int);" },

916 { 
C™Æog
, "intánalog(int);" },

917 { 
C™Æogx
, "intánalogx(int);" },

918 { 
Ctût
, "intÅilt(int);" },

919 { 
Cgps
, "void gps();" },

920 { 
Cªadi2c
, "intÑeadi2c(int, int);" },

921 { 
Cªadi2c2
, "intÑeadi2c2(int, int);" },

922 { 
Cwrôei2c
, "void writei2c(int, int, int);" },

923 { 
Cabs
, "intábs(int);" },

924 { 
Csö
, "int sin(int);" },

925 { 
Ccos
, "int cos(int);" },

926 { 
Cèn
, "intÅan(int);" },

927 { 
Casö
, "intásin(int, int);" },

928 { 
Cacos
, "intácos(int, int);" },

929 { 
C©™
, "intátan(int, int);" },

930 { 
Cgps_hód
, "int gps_head(int, int, int, int);" },

931 { 
Cgps_di°
, "int gps_dist(int, int, int, int);" },

932 { 
Csqπ
, "int sqrt(int);" },

933 { 
C¬show
, "voidÇnshow(int);" },

934 { 
C¬£t
, "voidÇnset(int, int, int, int, int, int, int, int, int);" },

935 { 
C¬öô
, "voidÇninit();" },

936 { 
C¬åaö
, "voidÇntrain();" },

937 { 
C¬ã°
, "intÇntest(int, int, int, int, int, int, int, int);" },

938 { 
C¬m©chblob
, "intÇnmatchblob(int);" },

939 { 
C¬À¨nblob
, "voidÇnlearnblob(int);" },

940 { 
Caut‹un
, "voidáutorun(int);" },

941 { 
Clöío
, "intÜineno();" },

942 { 
Cîr‹msg
, "voidÉrrormsg(char *);" },

943 { 
NULL
, NULL }

	@platform/library_unix.c

1 
	~"../öãΩªãr.h
"

3 
	$UnixSëupFunc
()

5 
	}
}

7 
	$Cã°
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

9 
	`¥ötf
("ã°(%d)\n", 
P¨am
[0]->
VÆ
->
I¡egî
);

10 
P¨am
[0]->
VÆ
->
I¡egî
 = 1234;

11 
	}
}

13 
	$Clöío
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

15 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
P¨£r
->
Löe
;

16 
	}
}

19 
LibøryFun˘i⁄
 
	gUnixFun˘i⁄s
[] =

21 { 
Cã°
, "voidÅest(int);" },

22 { 
Clöío
, "intÜineno();" },

23 { 
NULL
, NULL }

26 
	$Pœtf‹mLibøryInô
()

28 
	`In˛udeRegi°î
("picoc_unix.h", &
UnixSëupFunc
, &
UnixFun˘i⁄s
[0], 
NULL
);

29 
	}
}

	@platform/library_unix.c

1 
	~"../öãΩªãr.h
"

3 
	$UnixSëupFunc
()

5 
	}
}

7 
	$Cã°
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

9 
	`¥ötf
("ã°(%d)\n", 
P¨am
[0]->
VÆ
->
I¡egî
);

10 
P¨am
[0]->
VÆ
->
I¡egî
 = 1234;

11 
	}
}

13 
	$Clöío
 (
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
Rëu∫VÆue
, VÆuê**
P¨am
, 
NumArgs
)

15 
Rëu∫VÆue
->
VÆ
->
I¡egî
 = 
P¨£r
->
Löe
;

16 
	}
}

19 
LibøryFun˘i⁄
 
	gUnixFun˘i⁄s
[] =

21 { 
Cã°
, "voidÅest(int);" },

22 { 
Clöío
, "intÜineno();" },

23 { 
NULL
, NULL }

26 
	$Pœtf‹mLibøryInô
()

28 
	`In˛udeRegi°î
("picoc_unix.h", &
UnixSëupFunc
, &
UnixFun˘i⁄s
[0], 
NULL
);

29 
	}
}

	@platform/platform_ffox.c

1 
	~"../öãΩªãr.h
"

4 
	$Pœtf‹mCÀ™up
()

6 
	}
}

9 *
	$Pœtf‹mGëLöe
(*
Buf
, 
MaxLí
)

12  
NULL
;

13 
	}
}

16 
	$Pœtf‹mGëCh¨a˘î
()

20 
	}
}

23 
	$Pœtf‹mPutc
(
OutCh
, 
OuçutSåómInfo
 *
Såóm
)

26 
	}
}

29 *
	$Pœtf‹mRódFûe
(c⁄° *
FûeName
)

32  
NULL
;

33 
	}
}

36 
	$Pœtf‹mSˇnFûe
(c⁄° *
FûeName
)

38 *
Sour˚Så
 = 
	`Pœtf‹mRódFûe
(
FûeName
);

39 
	`P¨£
(
FûeName
, 
Sour˚Så
, 
	`°æí
(Sour˚Så), 
TRUE
);

41 
	}
}

44 
jmp_buf
 
	gExôBuf
;

47 
	$Pœtf‹mExô
()

49 
	`l⁄gjmp
(
ExôBuf
, 1);

50 
	}
}

	@platform/platform_ffox.c

1 
	~"../öãΩªãr.h
"

4 
	$Pœtf‹mCÀ™up
()

6 
	}
}

9 *
	$Pœtf‹mGëLöe
(*
Buf
, 
MaxLí
)

12  
NULL
;

13 
	}
}

16 
	$Pœtf‹mGëCh¨a˘î
()

20 
	}
}

23 
	$Pœtf‹mPutc
(
OutCh
, 
OuçutSåómInfo
 *
Såóm
)

26 
	}
}

29 *
	$Pœtf‹mRódFûe
(c⁄° *
FûeName
)

32  
NULL
;

33 
	}
}

36 
	$Pœtf‹mSˇnFûe
(c⁄° *
FûeName
)

38 *
Sour˚Så
 = 
	`Pœtf‹mRódFûe
(
FûeName
);

39 
	`P¨£
(
FûeName
, 
Sour˚Så
, 
	`°æí
(Sour˚Så), 
TRUE
);

41 
	}
}

44 
jmp_buf
 
	gExôBuf
;

47 
	$Pœtf‹mExô
()

49 
	`l⁄gjmp
(
ExôBuf
, 1);

50 
	}
}

	@platform/platform_surveyor.c

1 
	~"../öãΩªãr.h
"

2 
	~"../picoc.h
"

5 
	gPicocExôBuf
[41];

8 
	$Pœtf‹mCÀ™up
()

10 
	}
}

13 *
	$Pœtf‹mGëLöe
(*
Buf
, 
MaxLí
, c⁄° *
Prom±
)

15 
ix
;

16 
ch
, *
˝
;

18 
	`¥ötf
(
Prom±
);

20 
ix
 = 0;

21 
˝
 = 0;

24 
ch
 = 
	`gëch
();

25 i‡(
ch
 == '\n' || ch == '\r')

28 
ch
 = 
	`gëch
();

31 
ix
++ < 
MaxLí
) {

33 i‡(
ch
 == 0x1B || ch == 0x03) {

34 
	`¥ötf
("Leaving PicoC\n");

35  
NULL
;

37 i‡(
ch
 == '\n') {

38 *
˝
++ = '\n';

39 *
˝
 = 0;

40  
Buf
;

42 *
˝
++ = 
ch
;

43 
ix
++;

44 
ch
 = 
	`gëch
();

46  
NULL
;

47 
	}
}

50 
	$Pœtf‹mPutc
(
OutCh
, 
OuçutSåómInfo
 *
Såóm
)

52 i‡(
OutCh
 == '\n')

53 
	`putch¨
('\r');

55 
	`putch¨
(
OutCh
);

56 
	}
}

59 
	$Pœtf‹mGëCh¨a˘î
()

61  
	`gëch
();

62 
	}
}

65 
	$Pœtf‹mExô
(
RëVÆ
)

67 
PicocExôVÆue
 = 
RëVÆ
;

68 
PicocExôBuf
[40] = 1;

69 
	`l⁄gjmp
(
PicocExôBuf
, 1);

70 
	}
}

	@platform/platform_surveyor.c

1 
	~"../öãΩªãr.h
"

2 
	~"../picoc.h
"

5 
	gPicocExôBuf
[41];

8 
	$Pœtf‹mCÀ™up
()

10 
	}
}

13 *
	$Pœtf‹mGëLöe
(*
Buf
, 
MaxLí
, c⁄° *
Prom±
)

15 
ix
;

16 
ch
, *
˝
;

18 
	`¥ötf
(
Prom±
);

20 
ix
 = 0;

21 
˝
 = 0;

24 
ch
 = 
	`gëch
();

25 i‡(
ch
 == '\n' || ch == '\r')

28 
ch
 = 
	`gëch
();

31 
ix
++ < 
MaxLí
) {

33 i‡(
ch
 == 0x1B || ch == 0x03) {

34 
	`¥ötf
("Leaving PicoC\n");

35  
NULL
;

37 i‡(
ch
 == '\n') {

38 *
˝
++ = '\n';

39 *
˝
 = 0;

40  
Buf
;

42 *
˝
++ = 
ch
;

43 
ix
++;

44 
ch
 = 
	`gëch
();

46  
NULL
;

47 
	}
}

50 
	$Pœtf‹mPutc
(
OutCh
, 
OuçutSåómInfo
 *
Såóm
)

52 i‡(
OutCh
 == '\n')

53 
	`putch¨
('\r');

55 
	`putch¨
(
OutCh
);

56 
	}
}

59 
	$Pœtf‹mGëCh¨a˘î
()

61  
	`gëch
();

62 
	}
}

65 
	$Pœtf‹mExô
(
RëVÆ
)

67 
PicocExôVÆue
 = 
RëVÆ
;

68 
PicocExôBuf
[40] = 1;

69 
	`l⁄gjmp
(
PicocExôBuf
, 1);

70 
	}
}

	@platform/platform_unix.c

1 
	~"../picoc.h
"

2 
	~"../°dio.h
"

3 
	~"../öãΩªãr.h
"

5 
jmp_buf
 
	gPicocExôBuf
;

7 
	$Pœtf‹mCÀ™up
()

9 
	}
}

10 
	$putch¨
(
ch
){

11 
	`wrôe
(1,&
ch
,(ch));

12 
	}
}

13 *
	$fgës
(*
s
,
size
,
FILE
 *
°ªam
){

14 
i
;

15 
ch
;

16 
i
 = 0 ; i < 
size
 -1 ; i++){

17 
	`‰ód
(&
ch
,1,1,
°ªam
);

18 if(
ch
 ='\n' || ch =
EOF
 ){

21 *(
s
+
i
Ë
ch
;

24 *(
s
+
i
) = '\0';

25  
s
;

26 
	}
}

28 *
	$Pœtf‹mGëLöe
(*
Buf
, 
MaxLí
, c⁄° *
Prom±
)

52 i‡(
Prom±
 !
NULL
)

53 
	`¥ötf
("%s", 
Prom±
);

56  
	`fgës
(
Buf
, 
MaxLí
, 
°dö
);

57 
	}
}

60 
	$Pœtf‹mGëCh¨a˘î
()

63  
	`gëch¨
();

64 
	}
}

67 
	$Pœtf‹mPutc
(
OutCh
, 
OuçutSåómInfo
 *
Såóm
)

69 
	`putch¨
(
OutCh
);

70 
	}
}

73 *
	$Pœtf‹mRódFûe
(c⁄° *
FûeName
)

75 
°©
 
FûeInfo
;

76 *
RódText
;

77 
FILE
 *
InFûe
;

78 
ByãsRód
;

79 
tmpv¨
;

80 i‡–(
tmpv¨
 = 
	`°©
(
FûeName
, &
FûeInfo
)) < 0 ){

81 
	`ProgømFaû
(
NULL
, "ˇn'àªad fûê%s\n", 
FûeName
);

83 if(
tmpv¨
 > 0)

84 
FûeInfo
.
°_size
 = 
tmpv¨
;

87 
RódText
 = (*)
	`mÆloc
((Ë* (
FûeInfo
.
°_size
 + 5));

89 i‡(
RódText
 =
NULL
)

90 
	`ProgømFaû
(
NULL
, "out of memory\n");

92 
InFûe
 = 
	`f›í
(
FûeName
, "r");

93 i‡(
InFûe
 =
NULL
)

94 
	`ProgømFaû
(
NULL
, "ˇn'àªad fûê%s\n", 
FûeName
);

96 
ByãsRód
 = 
	`‰ód
(
RódText
, 1, 
FûeInfo
.
°_size
, 
InFûe
);

99 i‡(
ByãsRód
 == 0)

100 
	`ProgømFaû
(
NULL
, "ˇn'àªad fûê%s\n", 
FûeName
);

102 
RódText
[
ByãsRód
] = '\0';

105  
RódText
;

106 
	`¥ötf
("Here\n");

107 
	}
}

110 
	$PicocPœtf‹mSˇnFûe
(c⁄° *
FûeName
)

112 *
Sour˚Så
 = 
	`Pœtf‹mRódFûe
(
FûeName
);

113 
	`PicocP¨£
(
FûeName
, 
Sour˚Så
, 
	`°æí
(Sour˚Så), 
TRUE
, 
FALSE
, TRUE);

114 
	}
}

117 
	$Pœtf‹mExô
(
RëVÆ
)

119 
PicocExôVÆue
 = 
RëVÆ
;

121 
	`exô
(1);

122 
	}
}

	@platform/platform_unix.c

1 
	~"../picoc.h
"

2 
	~"../°dio.h
"

3 
	~"../öãΩªãr.h
"

5 
jmp_buf
 
	gPicocExôBuf
;

7 
	$Pœtf‹mCÀ™up
()

9 
	}
}

10 
	$putch¨
(
ch
){

11 
	`wrôe
(1,&
ch
,(ch));

12 
	}
}

13 *
	$fgës
(*
s
,
size
,
FILE
 *
°ªam
){

14 
i
;

15 
ch
;

16 
i
 = 0 ; i < 
size
 -1 ; i++){

17 
	`‰ód
(&
ch
,1,1,
°ªam
);

18 if(
ch
 ='\n' || ch =
EOF
 ){

21 *(
s
+
i
Ë
ch
;

24 *(
s
+
i
) = '\0';

25  
s
;

26 
	}
}

28 *
	$Pœtf‹mGëLöe
(*
Buf
, 
MaxLí
, c⁄° *
Prom±
)

52 i‡(
Prom±
 !
NULL
)

53 
	`¥ötf
("%s", 
Prom±
);

56  
	`fgës
(
Buf
, 
MaxLí
, 
°dö
);

57 
	}
}

60 
	$Pœtf‹mGëCh¨a˘î
()

63  
	`gëch¨
();

64 
	}
}

67 
	$Pœtf‹mPutc
(
OutCh
, 
OuçutSåómInfo
 *
Såóm
)

69 
	`putch¨
(
OutCh
);

70 
	}
}

73 *
	$Pœtf‹mRódFûe
(c⁄° *
FûeName
)

75 
°©
 
FûeInfo
;

76 *
RódText
;

77 
FILE
 *
InFûe
;

78 
ByãsRód
;

79 
tmpv¨
;

80 i‡–(
tmpv¨
 = 
	`°©
(
FûeName
, &
FûeInfo
)) < 0 ){

81 
	`ProgømFaû
(
NULL
, "ˇn'àªad fûê%s\n", 
FûeName
);

83 if(
tmpv¨
 > 0)

84 
FûeInfo
.
°_size
 = 
tmpv¨
;

87 
RódText
 = (*)
	`mÆloc
((Ë* (
FûeInfo
.
°_size
 + 5));

89 i‡(
RódText
 =
NULL
)

90 
	`ProgømFaû
(
NULL
, "out of memory\n");

92 
InFûe
 = 
	`f›í
(
FûeName
, "r");

93 i‡(
InFûe
 =
NULL
)

94 
	`ProgømFaû
(
NULL
, "ˇn'àªad fûê%s\n", 
FûeName
);

96 
ByãsRód
 = 
	`‰ód
(
RódText
, 1, 
FûeInfo
.
°_size
, 
InFûe
);

99 i‡(
ByãsRód
 == 0)

100 
	`ProgømFaû
(
NULL
, "ˇn'àªad fûê%s\n", 
FûeName
);

102 
RódText
[
ByãsRód
] = '\0';

105  
RódText
;

106 
	`¥ötf
("Here\n");

107 
	}
}

110 
	$PicocPœtf‹mSˇnFûe
(c⁄° *
FûeName
)

112 *
Sour˚Så
 = 
	`Pœtf‹mRódFûe
(
FûeName
);

113 
	`PicocP¨£
(
FûeName
, 
Sour˚Så
, 
	`°æí
(Sour˚Så), 
TRUE
, 
FALSE
, TRUE);

114 
	}
}

117 
	$Pœtf‹mExô
(
RëVÆ
)

119 
PicocExôVÆue
 = 
RëVÆ
;

121 
	`exô
(1);

122 
	}
}

	@stdio.h

1 #i‚de‡
STDIO_H


2 
	#STDIO_H


	)

3 
	~"f˙é.h
"

5 
FILE
 *
°dout
,*
°dö
,*
°dîr
;

6 
	#size_t
 

	)

8 #i‚de‡
EOF


9 
	#EOF
 (-1)

	)

12 #i‚de‡
BUFSIZ


13 
	#BUFSIZ
 256

	)

16 #i‚de‡
FILENAME_MAX


17 
	#FILENAME_MAX
 32

	)

21 
	#_IOFBF
 0

	)

22 
	#_IOLBF
 1

	)

23 
	#_IONBF
 2

	)

26 
checkmode
–c⁄° *
mode
, *
£ek
);

27 
FILE
 *
f›í
(c⁄° *
∑th
, c⁄° * 
mode
);

28 
‰ód
–*
±r
, 
size_t
 
size
, size_à
nmemb
, 
FILE
 *
°ªam
);

29 
fwrôe
(c⁄° *
±r
, 
size_t
 
size
 , size_à
nmemb
, 
FILE
 *
°ªam
);

30 
f˛o£
(
FILE
 *
Â
);

31 
gëch¨
 ();

32 
¥ötf
 (*, ...);

	@table.c

1 
	~"öãΩªãr.h
"

3 
TabÀ
 
	gSåögTabÀ
;

4 
TabÀE¡ry
 *
	gSåögHashTabÀ
[
STRING_TABLE_SIZE
];

5 *
	gSåEm±y
 = 
NULL
;

8 
	$TabÀInô
()

10 
	`TabÀInôTabÀ
(&
SåögTabÀ
, &
SåögHashTabÀ
[0], 
STRING_TABLE_SIZE
, 
TRUE
);

11 
SåEm±y
 = 
	`TabÀSåRegi°î
("");

12 
	}
}

15 
	$TabÀHash
(c⁄° *
Key
, 
Lí
)

17 
Hash
 = 
Lí
;

18 
Off£t
;

19 
Cou¡
;

21 
Cou¡
 = 0, 
Off£t
 = 8; Cou¡ < 
Lí
; Count++, Offset+=7)

23 i‡(
Off£t
 > () * 8 - 7)

24 
Off£t
 -= () * 8 - 6;

26 
Hash
 ^*
Key
++ << 
Off£t
;

29  
Hash
;

30 
	}
}

33 
	$TabÀInôTabÀ
(
TabÀ
 *
Tbl
, 
TabÀE¡ry
 **
HashTabÀ
, 
Size
, 
OnHóp
)

35 
Tbl
->
Size
 = Size;

36 
Tbl
->
OnHóp
 = OnHeap;

37 
Tbl
->
HashTabÀ
 = HashTable;

38 
	`mem£t
((*)
HashTabÀ
, '\0', (
TabÀE¡ry
 *Ë* 
Size
);

39 
	}
}

42 
TabÀE¡ry
 *
	$TabÀSórch
(
TabÀ
 *
Tbl
, c⁄° *
Key
, *
AddAt
)

44 
TabÀE¡ry
 *
E¡ry
;

45 
HashVÆue
 = (()
Key
Ë% 
Tbl
->
Size
;

47 
E¡ry
 = 
Tbl
->
HashTabÀ
[
HashVÆue
]; E¡ry !
NULL
; E¡ry = E¡ry->
Next
)

50 i‡(
E¡ry
->
p
.
v
.
Key
 == Key)

51  
E¡ry
;

54 *
AddAt
 = 
HashVÆue
;

55  
NULL
;

56 
	}
}

60 
	$TabÀSë
(
TabÀ
 *
Tbl
, *
Key
, 
VÆue
 *
VÆ
, c⁄° *
De˛FûeName
, 
De˛Löe
, 
De˛Cﬁumn
)

63 
AddAt
;

64 
TabÀE¡ry
 *
FoundE¡ry
 = 
	`TabÀSórch
(
Tbl
, 
Key
, &
AddAt
);

66 i‡(
FoundE¡ry
 =
NULL
)

68 
TabÀE¡ry
 *
NewE¡ry
 = 
	`V¨übÀAŒoc
(
NULL
, (TabÀE¡ry), 
Tbl
->
OnHóp
);

69 
NewE¡ry
->
De˛FûeName
 = DeclFileName;

70 
NewE¡ry
->
De˛Löe
 = DeclLine;

71 
NewE¡ry
->
De˛Cﬁumn
 = DeclColumn;

72 
NewE¡ry
->
p
.
v
.
Key
 = Key;

73 
NewE¡ry
->
p
.
v
.
VÆ
 = Val;

74 
NewE¡ry
->
Next
 = 
Tbl
->
HashTabÀ
[
AddAt
];

75 
Tbl
->
HashTabÀ
[
AddAt
] = 
NewE¡ry
;

76  
TRUE
;

79  
FALSE
;

80 
	}
}

84 
	$TabÀGë
(
TabÀ
 *
Tbl
, c⁄° *
Key
, 
VÆue
 **
VÆ
, c⁄° **
De˛FûeName
, *
De˛Löe
, *
De˛Cﬁumn
)

86 
AddAt
;

87 
TabÀE¡ry
 *
FoundE¡ry
 = 
	`TabÀSórch
(
Tbl
, 
Key
, &
AddAt
);

88 i‡(
FoundE¡ry
 =
NULL
)

89  
FALSE
;

91 *
VÆ
 = 
FoundE¡ry
->
p
.
v
.Val;

93 i‡(
De˛FûeName
 !
NULL
)

95 *
De˛FûeName
 = 
FoundE¡ry
->DeclFileName;

96 *
De˛Löe
 = 
FoundE¡ry
->DeclLine;

97 *
De˛Cﬁumn
 = 
FoundE¡ry
->DeclColumn;

100  
TRUE
;

101 
	}
}

104 
VÆue
 *
	$TabÀDñëe
(
TabÀ
 *
Tbl
, c⁄° *
Key
)

106 
TabÀE¡ry
 **
E¡ryPå
;

107 
HashVÆue
 = (()
Key
Ë% 
Tbl
->
Size
;

109 
E¡ryPå
 = &
Tbl
->
HashTabÀ
[
HashVÆue
]; *E¡ryPå !
NULL
; E¡ryPå = &(*E¡ryPå)->
Next
)

111 i‡((*
E¡ryPå
)->
p
.
v
.
Key
 == Key)

113 
TabÀE¡ry
 *
DñëeE¡ry
 = *
E¡ryPå
;

114 
VÆue
 *
VÆ
 = 
DñëeE¡ry
->
p
.
v
.Val;

115 *
E¡ryPå
 = 
DñëeE¡ry
->
Next
;

116 
	`HópFªeMem
(
DñëeE¡ry
);

118  
VÆ
;

122  
NULL
;

123 
	}
}

126 
TabÀE¡ry
 *
	$TabÀSórchIdítifõr
(
TabÀ
 *
Tbl
, c⁄° *
Key
, 
Lí
, *
AddAt
)

128 
TabÀE¡ry
 *
E¡ry
;

129 
HashVÆue
 = 
	`TabÀHash
(
Key
, 
Lí
Ë% 
Tbl
->
Size
;

131 
E¡ry
 = 
Tbl
->
HashTabÀ
[
HashVÆue
]; E¡ry !
NULL
; E¡ry = E¡ry->
Next
)

135 i‡(
	`°∫cmp
(&
E¡ry
->
p
.
Key
[0], (*)Key, 
Lí
) == 0 && Entry->p.Key[Len] == '\0')

136  
E¡ry
;

139 *
AddAt
 = 
HashVÆue
;

140  
NULL
;

141 
	}
}

144 *
	$TabÀSëIdítifõr
(
TabÀ
 *
Tbl
, c⁄° *
Idít
, 
IdítLí
)

147 
AddAt
;

148 
TabÀE¡ry
 *
FoundE¡ry
 = 
	`TabÀSórchIdítifõr
(
Tbl
, 
Idít
, 
IdítLí
, &
AddAt
);

150 i‡(
FoundE¡ry
 !
NULL
)

151  &
FoundE¡ry
->
p
.
Key
[0];

154 
TabÀE¡ry
 *
NewE¡ry
 = 
	`HópAŒocMem
((TabÀE¡ryË- (
TabÀE¡ryPaylﬂd
Ë+ 
IdítLí
 + 1);

155 i‡(
NewE¡ry
 =
NULL
)

156 
	`ProgømFaû
(
NULL
, "out of memory");

158 
	`°∫˝y
((*)&
NewE¡ry
->
p
.
Key
[0], (*)
Idít
, 
IdítLí
);

159 
NewE¡ry
->
p
.
Key
[
IdítLí
] = '\0';

160 
NewE¡ry
->
Next
 = 
Tbl
->
HashTabÀ
[
AddAt
];

161 
Tbl
->
HashTabÀ
[
AddAt
] = 
NewE¡ry
;

162  &
NewE¡ry
->
p
.
Key
[0];

164 
	}
}

167 *
	$TabÀSåRegi°î2
(c⁄° *
Så
, 
Lí
)

169  
	`TabÀSëIdítifõr
(&
SåögTabÀ
, 
Så
, 
Lí
);

170 
	}
}

172 *
	$TabÀSåRegi°î
(c⁄° *
Så
)

174  
	`TabÀSåRegi°î2
(
Så
, 
	`°æí
((*)Str));

175 
	}
}

178 
	$TabÀSåFªe
()

180 
TabÀE¡ry
 *
E¡ry
;

181 
TabÀE¡ry
 *
NextE¡ry
;

182 
Cou¡
;

184 
Cou¡
 = 0; Cou¡ < 
SåögTabÀ
.
Size
; Count++)

186 
E¡ry
 = 
SåögTabÀ
.
HashTabÀ
[
Cou¡
]; E¡ry !
NULL
; E¡ry = 
NextE¡ry
)

188 
NextE¡ry
 = 
E¡ry
->
Next
;

189 
	`HópFªeMem
(
E¡ry
);

192 
	}
}

	@tests/00_assignment.c

1 
	~<°dlib.h
>

3 
	ga
;

4 
	ga
 = 42;

5 
¥ötf
("%d\n", 
a
);

7 
	gb
 = 64;

8 
¥ötf
("%d\n", 
b
);

10 
	gc
 = 12, 
	gd
 = 34;

11 
¥ötf
("%d, %d\n", 
c
, 
d
);

13 
	$maö
(Ë{
	}
}

	@tests/01_comment.c

1 
	~<°dio.h
>

3 
¥ötf
("Hello\n");

4 
¥ötf
("Hello\n");Örintf("Hello\n");

5 
¥ötf
("Hello\n");

7 
¥ötf
("Hello\n");

10 
	$maö
(Ë{
	}
}

	@tests/02_printf.c

1 
	~<°dio.h
>

3 
¥ötf
("Hello world\n");

5 
	gCou¡
;

6 
	gCou¡
 = -5; Count <= 5; Count++)

7 
¥ötf
("Cou¡ = %d\n", 
Cou¡
);

9 
¥ötf
("String 'hello', 'there' is '%s', '%s'\n", "hello", "there");

10 
¥ötf
("Character 'A' is '%c'\n", 65);

11 
¥ötf
("Character 'a' is '%c'\n", 'a');

13 
	$maö
(Ë{
	}
}

	@tests/03_struct.c

1 
	~<°dio.h
>

3 
	s‰ed


5 
	mb‹is
;

6 
	m«èsha
;

9 
‰ed
 
	gbloggs
;

11 
	gbloggs
.
	gb‹is
 = 12;

12 
	gbloggs
.
	g«èsha
 = 34;

14 
¥ötf
("%d\n", 
bloggs
.
b‹is
);

15 
¥ötf
("%d\n", 
bloggs
.
«èsha
);

21 
	$maö
(Ë{
	}
}

	@tests/04_for.c

1 
	~<°dio.h
>

3 
	gCou¡
;

5 
	gCou¡
 = 1; Count <= 10; Count++)

7 
¥ötf
("%d\n", 
Cou¡
);

10 
	$maö
(Ë{
	}
}

	@tests/05_array.c

1 
	~<°dio.h
>

3 
	gCou¡
;

4 
	gAºay
[10];

6 
	gCou¡
 = 1; Count <= 10; Count++)

8 
	gAºay
[
Cou¡
-1] = Count * Count;

11 
	gCou¡
 = 0; Count < 10; Count++)

13 
¥ötf
("%d\n", 
Aºay
[
Cou¡
]);

16 
	$maö
(Ë{
	}
}

	@tests/06_case.c

1 
	~<°dio.h
>

3 
	gCou¡
;

5 
	gCou¡
 = 0; Count < 4; Count++)

7 
¥ötf
("%d\n", 
Cou¡
);

8 
	gCou¡
)

11 
¥ötf
("%d\n", 1);

15 
¥ötf
("%d\n", 2);

19 
¥ötf
("%d\n", 0);

24 
	$maö
(Ë{
	}
}

	@tests/07_function.c

1 
	~<°dio.h
>

3 
	$myfunc
(
x
)

5  
x
 * x;

6 
	}
}

8 
¥ötf
("%d\n", 
myfunc
(3));

9 
¥ötf
("%d\n", 
myfunc
(4));

11 
	$vfunc
(
a
)

13 
	`¥ötf
("a=%d\n", 
a
);

14 
	}
}

16 
vfunc
(1234);

18 
	$qfunc
()

20 
	`¥ötf
("qfunc()\n");

21 
	}
}

23 
qfunc
();

25 
	$maö
(Ë{
	}
}

	@tests/08_while.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gp
;

5 
	gt
;

7 
	ga
 = 1;

8 
	gp
 = 0;

9 
	gt
 = 0;

11 
	ga
 < 100)

13 
¥ötf
("%d\n", 
a
);

14 
	gt
 = 
a
;

15 
	ga
 = 
t
 + 
p
;

16 
	gp
 = 
t
;

19 
	$maö
(Ë{
	}
}

	@tests/09_do_while.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gp
;

5 
	gt
;

7 
	ga
 = 1;

8 
	gp
 = 0;

9 
	gt
 = 0;

13 
¥ötf
("%d\n", 
a
);

14 
	gt
 = 
a
;

15 
	ga
 = 
t
 + 
p
;

16 
	gp
 = 
t
;

17 } 
	ga
 < 100);

20 
	$maö
(Ë{
	}
}

	@tests/10_pointer.c

1 
	~<°dio.h
>

3 
	ga
;

4 *
	gb
;

5 
	gc
;

7 
	ga
 = 42;

8 
	gb
 = &
a
;

9 
¥ötf
("®%d\n", *
b
);

11 
	sziggy


13 
	ma
;

14 
	mb
;

15 
	mc
;

16 } 
	gbﬁshevic
;

18 
	gbﬁshevic
.
	ga
 = 12;

19 
	gbﬁshevic
.
	gb
 = 34;

20 
	gbﬁshevic
.
	gc
 = 56;

22 
¥ötf
("bﬁshevic.®%d\n", 
bﬁshevic
.
a
);

23 
¥ötf
("bﬁshevic.b = %d\n", 
bﬁshevic
.
b
);

24 
¥ötf
("bﬁshevic.¯%d\n", 
bﬁshevic
.
c
);

26 
ziggy
 *
	gtßr
 = &
bﬁshevic
;

28 
¥ötf
("tßr->®%d\n", 
tßr
->
a
);

29 
¥ötf
("tßr->b = %d\n", 
tßr
->
b
);

30 
¥ötf
("tßr->¯%d\n", 
tßr
->
c
);

37 
	$maö
(Ë{
	}
}

	@tests/11_precedence.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gb
;

5 
	gc
;

6 
	gd
;

7 
	ge
;

8 
	gf
;

9 
	gx
;

10 
	gy
;

12 
	ga
 = 12;

13 
	gb
 = 34;

14 
	gc
 = 56;

15 
	gd
 = 78;

16 
	ge
 = 0;

17 
	gf
 = 1;

19 
¥ötf
("%d\n", 
c
 + 
d
);

20 
¥ötf
("%d\n", (
y
 = 
c
 + 
d
));

24 
¥ötf
("%d\n", 
e
 ||É && 
f
);

25 
¥ötf
("%d\n", 
e
 || 
f
 && f);

26 
¥ötf
("%d\n", 
e
 &&É || 
f
);

27 
¥ötf
("%d\n", 
e
 && 
f
 || f);

28 
¥ötf
("%d\n", 
a
 && 
f
 | f);

29 
¥ötf
("%d\n", 
a
 | 
b
 ^ 
c
 & 
d
);

30 
¥ötf
("%d, %d\n", 
a
 =a,á =
b
);

31 
¥ötf
("%d, %d\n", 
a
 !a,á !
b
);

32 
¥ötf
("%d\n", 
a
 !
b
 && 
c
 !
d
);

33 
¥ötf
("%d\n", 
a
 + 
b
 * 
c
 / 
f
);

34 
¥ötf
("%d\n", 
a
 + 
b
 * 
c
 / 
f
);

35 
¥ötf
("%d\n", (4 << 4));

36 
¥ötf
("%d\n", (64 >> 4));

38 
	$maö
(Ë{
	}
}

	@tests/12_hashdefine.c

1 
	~<°dio.h
>

3 
	#FRED
 12

	)

4 
	#BLOGGS
(
x
Ë(12*(x))

	)

6 
¥ötf
("%d\n", 
FRED
);

7 
¥ötf
("%d, %d, %d\n", 
BLOGGS
(1), BLOGGS(2), BLOGGS(3));

10 
	$maö
(Ë{
	}
}

	@tests/13_integer_literals.c

1 
	~<°dio.h
>

3 
	ga
 = 24680;

4 
	gb
 = 01234567;

5 
	gc
 = 0x2468ac;

6 
	gd
 = 0x2468AC;

7 
	ge
 = 0b010101010101;

9 
¥ötf
("%d\n", 
a
);

10 
¥ötf
("%d\n", 
b
);

11 
¥ötf
("%d\n", 
c
);

12 
¥ötf
("%d\n", 
d
);

13 
¥ötf
("%d\n", 
e
);

16 
	$maö
(Ë{
	}
}

	@tests/14_if.c

1 
	~<°dio.h
>

3 
	ga
 = 1;

5 i‡(
	ga
)

6 
¥ötf
("a isÅrue\n");

8 
¥ötf
("a is false\n");

10 
	gb
 = 0;

11 i‡(
	gb
)

12 
¥ötf
("b isÅrue\n");

14 
¥ötf
("b is false\n");

17 
	$maö
(Ë{
	}
}

	@tests/15_recursion.c

1 
	~<°dio.h
>

3 
	$Á˘‹ül
(
i
)

5 i‡(
i
 < 2)

6  
i
;

8  
i
 * 
	`Á˘‹ül
(i - 1);

9 
	}
}

11 
	gCou¡
;

13 
	gCou¡
 = 1; Count <= 10; Count++)

14 
¥ötf
("%d\n", 
Á˘‹ül
(
Cou¡
));

16 
	$maö
(Ë{
	}
}

	@tests/16_nesting.c

1 
	~<°dio.h
>

3 
	gx
, 
	gy
, 
	gz
;

5 
	gx
 = 0; x < 2; x++)

7 
	gy
 = 0; y < 3; y++)

9 
	gz
 = 0; z < 3; z++)

11 
¥ötf
("%d %d %d\n", 
x
, 
y
, 
z
);

16 
	$maö
(Ë{
	}
}

	@tests/17_enum.c

1 
	~<°dio.h
>

3 
	e‰ed


5 
	ma
,

6 
	mb
,

7 
	mc
,

8 
	md
,

9 
	me
 = 54,

10 
	mf
 = 73,

11 
	mg
,

12 
	mh


15 
‰ed
 
	g‰od
;

17 
¥ötf
("%d %d %d %d %d %d %d %d\n", 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
);

18 
¥ötf
("%d\n", 
‰od
);

19 
	g‰od
 = 12;

20 
¥ötf
("%d\n", 
‰od
);

21 
	g‰od
 = 
e
;

22 
¥ötf
("%d\n", 
‰od
);

24 
	$maö
(Ë{
	}
}

	@tests/18_include.c

1 
	~<°dio.h
>

3 
¥ötf
("including\n");

4 
	~"18_ö˛ude.h
"

5 
¥ötf
("done\n");

7 
	$maö
(Ë{
	}
}

	@tests/18_include.h

1 
¥ötf
("included\n");

	@tests/19_pointer_arithmetic.c

1 
	~<°dio.h
>

3 
	ga
;

4 *
	gb
;

5 *
	gc
;

7 
	ga
 = 42;

8 
	gb
 = &
a
;

9 
	gc
 = 
NULL
;

11 
¥ötf
("%d\n", *
b
);

13 i‡(
	gb
 =
NULL
)

14 
¥ötf
("b is NULL\n");

16 
¥ötf
("b isÇot NULL\n");

18 i‡(
	gc
 =
NULL
)

19 
¥ötf
("c is NULL\n");

21 
¥ötf
("c isÇot NULL\n");

24 
	$maö
(Ë{
	}
}

	@tests/20_pointer_comparison.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gb
;

5 *
	gd
;

6 *
	ge
;

7 
	gd
 = &
a
;

8 
	ge
 = &
b
;

9 
	ga
 = 12;

10 
	gb
 = 34;

11 
¥ötf
("%d\n", *
d
);

12 
¥ötf
("%d\n", *
e
);

13 
¥ötf
("%d\n", 
d
 =
e
);

14 
¥ötf
("%d\n", 
d
 !
e
);

15 
	gd
 = 
e
;

16 
¥ötf
("%d\n", 
d
 =
e
);

17 
¥ötf
("%d\n", 
d
 !
e
);

20 
	$maö
(Ë{
	}
}

	@tests/21_char_array.c

1 
	~<°dio.h
>

3 
	gx
 = 'a';

4 
	gy
 = 
x
;

6 *
	ga
 = "hello";

8 
¥ötf
("%s\n", 
a
);

10 
	gc
;

11 
	gc
 = *
a
;

13 *
	gb
;

14 
	gb
 = 
a
; *b != 0; b++)

15 
¥ötf
("%c: %d\n", *
b
, *b);

17 
	gde°¨øy
[10];

18 *
	gde°
 = &
de°¨øy
[0];

19 *
	g§c
 = 
a
;

21 *
	g§c
 != 0)

22 *
de°
++ = *
§c
++;

24 *
	gde°
 = 0;

26 
¥ötf
("c›õd såög i†%s\n", 
de°¨øy
);

29 
	$maö
(Ë{
	}
}

	@tests/22_floating_point.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

5 
	ga
 = 12.34 + 56.78;

6 
¥ötf
("%f\n", 
a
);

9 
¥ötf
("%f\n", 12.34 + 56.78);

10 
¥ötf
("%f\n", 12.34 - 56.78);

11 
¥ötf
("%f\n", 12.34 * 56.78);

12 
¥ötf
("%f\n", 12.34 / 56.78);

15 
¥ötf
("%d %d %d %d %d %d\n", 12.34 < 56.78, 12.34 <= 56.78, 12.34 == 56.78, 12.34 >= 56.78, 12.34 > 56.78, 12.34 != 56.78);

16 
¥ötf
("%d %d %d %d %d %d\n", 12.34 < 12.34, 12.34 <= 12.34, 12.34 == 12.34, 12.34 >= 12.34, 12.34 > 12.34, 12.34 != 12.34);

17 
¥ötf
("%d %d %d %d %d %d\n", 56.78 < 12.34, 56.78 <= 12.34, 56.78 == 12.34, 56.78 >= 12.34, 56.78 > 12.34, 56.78 != 12.34);

20 
	ga
 = 12.34;

21 
	ga
 += 56.78;

22 
¥ötf
("%f\n", 
a
);

24 
	ga
 = 12.34;

25 
	ga
 -= 56.78;

26 
¥ötf
("%f\n", 
a
);

28 
	ga
 = 12.34;

29 
	ga
 *= 56.78;

30 
¥ötf
("%f\n", 
a
);

32 
	ga
 = 12.34;

33 
	ga
 /= 56.78;

34 
¥ötf
("%f\n", 
a
);

37 
¥ötf
("%f\n", +12.34);

38 
¥ötf
("%f\n", -12.34);

41 
	ga
 = 2;

42 
¥ötf
("%f\n", 
a
);

43 
¥ötf
("%f\n", 
sö
(2));

45 
	$maö
(Ë{
	}
}

	@tests/23_type_coercion.c

1 
	~<°dio.h
>

3 
	$ch¨func
(
a
)

5 
	`¥ötf
("ch¨: %c\n", 
a
);

6 
	}
}

8 
	$ötfunc
(
a
)

10 
	`¥ötf
("öt: %d\n", 
a
);

11 
	}
}

13 
	$Êﬂtfunc
(
a
)

15 
	`¥ötf
("Êﬂt: %f\n", 
a
);

16 
	}
}

18 
ch¨func
('a');

19 
ch¨func
(98);

20 
ch¨func
(99.0);

22 
ötfunc
('a');

23 
ötfunc
(98);

24 
ötfunc
(99.0);

26 
Êﬂtfunc
('a');

27 
Êﬂtfunc
(98);

28 
Êﬂtfunc
(99.0);

30 
¥ötf
("%c %d %f\n", 'a', 'b', 'c');

31 
¥ötf
("%c %d %f\n", 97, 98, 99);

32 
¥ötf
("%c %d %f\n", 97.0, 98.0, 99.0);

34 
	gb
 = 97;

35 
	gc
 = 97.0;

37 
¥ötf
("%d %d\n", 
b
, 
c
);

39 
	gd
 = 'a';

40 
	ge
 = 97.0;

42 
¥ötf
("%d %d\n", 
d
, 
e
);

44 
	gf
 = 'a';

45 
	gg
 = 97;

47 
¥ötf
("%‡%f\n", 
f
, 
g
);

49 
	$maö
(Ë{
	}
}

	@tests/24_math_library.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

4 
¥ötf
("%f\n", 
sö
(0.12));

5 
¥ötf
("%f\n", 
cos
(0.12));

6 
¥ötf
("%f\n", 
èn
(0.12));

7 
¥ötf
("%f\n", 
asö
(0.12));

8 
¥ötf
("%f\n", 
acos
(0.12));

9 
¥ötf
("%f\n", 
©™
(0.12));

10 
¥ötf
("%f\n", 
söh
(0.12));

11 
¥ötf
("%f\n", 
cosh
(0.12));

12 
¥ötf
("%f\n", 
ènh
(0.12));

13 
¥ötf
("%f\n", 
exp
(0.12));

14 
¥ötf
("%f\n", 
Ábs
(-0.12));

15 
¥ötf
("%f\n", 
log
(0.12));

16 
¥ötf
("%f\n", 
log10
(0.12));

17 
¥ötf
("%f\n", 
pow
(0.12, 0.12));

18 
¥ötf
("%f\n", 
sqπ
(0.12));

19 
¥ötf
("%f\n", 
round
(12.34));

20 
¥ötf
("%f\n", 
˚û
(12.34));

21 
¥ötf
("%f\n", 
Êo‹
(12.34));

23 
	$maö
(Ë{
	}
}

	@tests/26_character_constants.c

1 
	~<°dio.h
>

3 
¥ötf
("%d\n", '\1');

4 
¥ötf
("%d\n", '\10');

5 
¥ötf
("%d\n", '\100');

6 
¥ötf
("%d\n", '\x01');

7 
¥ötf
("%d\n", '\x0e');

8 
¥ötf
("%d\n", '\x10');

9 
¥ötf
("%d\n", '\x40');

10 
¥ötf
("test \x407\n");

13 
	$maö
(Ë{
	}
}

	@tests/27_sizeof.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gb
;

5 
	gc
;

7 
¥ötf
("%d\n", (
a
));

8 
¥ötf
("%d\n", (
b
));

9 
¥ötf
("%d\n", (
c
));

12 
	$maö
(Ë{
	}
}

	@tests/28_strings.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	ga
[10];

6 
°r˝y
(
a
, "hello");

7 
¥ötf
("%s\n", 
a
);

9 
°∫˝y
(
a
, "gosh", 2);

10 
¥ötf
("%s\n", 
a
);

12 
¥ötf
("%d\n", 
°rcmp
(
a
, "apple") > 0);

13 
¥ötf
("%d\n", 
°rcmp
(
a
, "goere") > 0);

14 
¥ötf
("%d\n", 
°rcmp
(
a
, "zebra") < 0);

16 
¥ötf
("%d\n", 
°æí
(
a
));

18 
°rˇt
(
a
, "!");

19 
¥ötf
("%s\n", 
a
);

21 
¥ötf
("%d\n", 
°∫cmp
(
a
, "apple", 2) > 0);

22 
¥ötf
("%d\n", 
°∫cmp
(
a
, "goere", 2) == 0);

23 
¥ötf
("%d\n", 
°∫cmp
(
a
, "goerg", 2) == 0);

24 
¥ötf
("%d\n", 
°∫cmp
(
a
, "zebra", 2) < 0);

26 
¥ötf
("%s\n", 
ödex
(
a
, 'o'));

27 
¥ötf
("%s\n", 
rödex
(
a
, 'l'));

28 
¥ötf
("%d\n", 
rödex
(
a
, 'x'Ë=
NULL
);

30 
mem£t
(&
a
[1], 'r', 4);

31 
¥ötf
("%s\n", 
a
);

33 
mem˝y
(&
a
[2],á, 2);

34 
¥ötf
("%s\n", 
a
);

36 
¥ötf
("%d\n", 
memcmp
(
a
, "apple", 4) > 0);

37 
¥ötf
("%d\n", 
memcmp
(
a
, "grgr", 4) == 0);

38 
¥ötf
("%d\n", 
memcmp
(
a
, "zebra", 4) < 0);

41 
	$maö
(Ë{
	}
}

	@tests/29_array_address.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	ga
[10];

5 
°r˝y
(
a
, "abcdef");

6 
¥ötf
("%s\n", &
a
[1]);

8 
	$maö
(Ë{
	}
}

	@tests/30_hanoi.c

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

32 
	#TRUE
 1

	)

33 
	#FALSE
 0

	)

35 
	#N
 4

	)

40 
	gA
[
N
], 
	gB
[N], 
	gC
[N];

44 
H™oi
(,*,*,*);

49 
	$PrötAŒ
()

51 
i
;

53 
	`¥ötf
("A: ");

54 
i
=0;i<
N
;i++)
	`¥ötf
(" %d ",
A
[i]);

55 
	`¥ötf
("\n");

57 
	`¥ötf
("B: ");

58 
i
=0;i<
N
;i++)
	`¥ötf
(" %d ",
B
[i]);

59 
	`¥ötf
("\n");

61 
	`¥ötf
("C: ");

62 
i
=0;i<
N
;i++)
	`¥ötf
(" %d ",
C
[i]);

63 
	`¥ötf
("\n");

64 
	`¥ötf
("------------------------------------------\n");

66 
	}
}

71 
	$Move
(*
sour˚
, *
de°
)

73 
i
,
j
;

75 
i
<
N
 && (
sour˚
[i])==0) i++;

76 
j
<
N
 && (
de°
[j])==0) j++;

78 
de°
[
j
-1] = 
sour˚
[
i
];

79 
sour˚
[
i
] = 0;

80 
	`PrötAŒ
();

81  
de°
[
j
-1];

82 
	}
}

90 
	$H™oi
(
n
,*
sour˚
, *
de°
, *
•¨e
)

92 
i
;

93 if(
n
==1){

94 
	`Move
(
sour˚
,
de°
);

98 
	`H™oi
(
n
-1,
sour˚
,
•¨e
,
de°
);

99 
	`Move
(
sour˚
,
de°
);

100 
	`H™oi
(
n
-1,
•¨e
,
de°
,
sour˚
);

102 
	}
}

106 
	$maö
()

108 
i
;

111 
i
=0;i<
N
;i++)
A
[i]=i+1;

112 
i
=0;i<
N
;i++)
B
[i]=0;

113 
i
=0;i<
N
;i++)
C
[i]=0;

115 
	`¥ötf
("Sﬁuti⁄ o‡Towî o‡H™oòProbÀm wôh %d Disks\n\n",
N
);

118 
	`¥ötf
("Starting state:\n");

119 
	`PrötAŒ
();

120 
	`¥ötf
("\n\nSubsequent states:\n\n");

123 
	`H™oi
(
N
,
A
,
B
,
C
);

125 
	}
}

	@tests/31_args.c

1 
	~<°dio.h
>

3 
	$maö
(
¨gc
, **
¨gv
)

5 
Cou¡
;

7 
	`¥ötf
("hñlÿw‹ld %d\n", 
¨gc
);

8 
Cou¡
 = 0; Cou¡ < 
¨gc
; Count++)

9 
	`¥ötf
("¨g %d: %s\n", 
Cou¡
, 
¨gv
[Count]);

12 
	}
}

	@tests/32_led.c

31 
	~<°dlib.h
>

32 
	~<°dio.h
>

34 
	#MAX_DIGITS
 32

	)

35 
	#NO_MAIN


	)

41 
	$t›löe
(
d
, *
p
){

43 *
p
++ = ' ';

44 
d
){

55 *
p
++ = '_';

58 *
p
++=' ';

61 *
p
++=' ';

62 
	}
}

67 
	$midlöe
(
d
, *
p
){

69 
d
){

79 *
p
++='|';

82 *
p
++=' ';

84 
d
){

95 *
p
++='_';

98 *
p
++=' ';

101 
d
){

113 *
p
++='|';

116 *
p
++=' ';

119 
	}
}

123 
	$bŸlöe
(
d
, *
p
){

126 
d
){

134 *
p
++='|';

137 *
p
++=' ';

139 
d
){

149 *
p
++='_';

152 *
p
++=' ';

155 
d
){

168 *
p
++='|';

171 *
p
++=' ';

174 
	}
}

178 
	$¥öt_Àd
(
x
, *
buf
)

181 
i
=0,
n
;

182 
d
[
MAX_DIGITS
];

187 
n
 = ( 
x
 == 0L ? 1 : 0 );

189 
x
){

190 
d
[
n
++] = ()(
x
%10L);

191 if(
n
 >
MAX_DIGITS
);

192 
x
 = x/10L;

197 
i
=
n
-1;i>=0;i--){

198 
	`t›löe
(
d
[
i
],
buf
);

199 
buf
 += 3;

200 *
buf
++=' ';

202 *
buf
++='\n';

206 
i
=
n
-1;i>=0;i--){

207 
	`midlöe
(
d
[
i
],
buf
);

208 
buf
 += 3;

209 *
buf
++=' ';

211 *
buf
++='\n';

215 
i
=
n
-1;i>=0;i--){

216 
	`bŸlöe
(
d
[
i
],
buf
);

217 
buf
 += 3;

218 *
buf
++=' ';

220 *
buf
++='\n';

221 *
buf
='\0';

222 
	}
}

224 
	$maö
()

226 
buf
[5*
MAX_DIGITS
];

227 
	`¥öt_Àd
(1234567, 
buf
);

228 
	`¥ötf
("%s\n",
buf
);

231 
	}
}

233 #i‚de‡
NO_MAIN


234 
	$maö
(
¨gc
, **
¨gv
)

237 
i
=0,
n
;

238 
x
;

239 
d
[
MAX_DIGITS
];

240 
buf
[5*
MAX_DIGITS
];

242 if(
¨gc
 != 2){

243 
	`Ârötf
(
°dîr
,"led: usage:Üed integer\n");

249 
x
 = 
	`©ﬁ
(
¨gv
[1]);

253 if(
x
<0){

254 
	`Ârötf
(
°dîr
,"Àd: %d mu° bên⁄-√g©ive\n",
x
);

258 
	`¥öt_Àd
(
x
,
buf
);

259 
	`¥ötf
("%s\n",
buf
);

263 
	}
}

	@tests/33_ternary_op.c

1 
	~<°dio.h
>

3 
	gCou¡
;

5 
	gCou¡
 = 0; Count < 10; Count++)

7 
¥ötf
("%d\n", (
Cou¡
 < 5) ? (Count*Count) : (Count * 3));

10 
	$maö
(Ë{
	}
}

	@tests/34_array_assignment.c

1 
	~<°dio.h
>

3 
	ga
[4];

5 
	ga
[0] = 12;

6 
	ga
[1] = 23;

7 
	ga
[2] = 34;

8 
	ga
[3] = 45;

10 
¥ötf
("%d %d %d %d\n", 
a
[0],á[1],á[2],á[3]);

12 
	gb
[4];

14 
	gb
 = 
a
;

16 
¥ötf
("%d %d %d %d\n", 
b
[0], b[1], b[2], b[3]);

18 
	$maö
(Ë{
	}
}

	@tests/35_sizeof.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gb
;

6 
¥ötf
("%d %d\n", (), (
a
));

7 
¥ötf
("%d %d\n", (), (
b
));

9 
	$maö
(Ë{
	}
}

	@tests/36_array_initialisers.c

1 
	~<°dio.h
>

3 
	gCou¡
;

5 
	gAºay
[10] = { 12, 34, 56, 78, 90, 123, 456, 789, 8642, 9753 };

7 
	gCou¡
 = 0; Count < 10; Count++)

8 
¥ötf
("%d: %d\n", 
Cou¡
, 
Aºay
[Count]);

10 
	gAºay2
[10] = { 12, 34, 56, 78, 90, 123, 456, 789, 8642, 9753, };

12 
	gCou¡
 = 0; Count < 10; Count++)

13 
¥ötf
("%d: %d\n", 
Cou¡
, 
Aºay2
[Count]);

16 
	$maö
(Ë{
	}
}

	@tests/37_sprintf.c

1 
	~<°dio.h
>

3 
	gBuf
[100];

4 
	gCou¡
;

6 
	gCou¡
 = 1; Count <= 20; Count++)

8 
•rötf
(
Buf
, "->%02d<-\n", 
Cou¡
);

9 
¥ötf
("%s", 
Buf
);

12 
	$maö
(Ë{
	}
}

	@tests/38_multiple_array_index.c

1 
	~<°dio.h
>

3 
	ga
[4][4];

4 
	gb
 = 0;

5 
	gx
;

6 
	gy
;

8 
	gx
 = 0; x < 4; x++)

10 
	gy
 = 0; y < 4; y++)

12 
	gb
++;

13 
	ga
[
x
][
y
] = 
b
;

19 
	gx
 = 0; x < 4; x++)

21 
¥ötf
("x=%d: ", 
x
);

22 
	gy
 = 0; y < 4; y++)

24 
¥ötf
("%d ", 
a
[
x
][
y
]);

26 
¥ötf
("\n");

29 
	$maö
(Ë{
	}
}

	@tests/39_typedef.c

1 
	~<°dio.h
>

3 
	tMyI¡
;

5 
MyI¡
 
	ga
 = 1;

6 
¥ötf
("%d\n", 
a
);

8 
	sFunSåu˘


10 
	mi
;

11 
	mj
;

14 
FunSåu˘
 
	tMyFunSåu˘
;

16 
MyFunSåu˘
 
	gb
;

17 
	gb
.
	gi
 = 12;

18 
	gb
.
	gj
 = 34;

19 
¥ötf
("%d,%d\n", 
b
.
i
, b.
j
);

21 
MyFunSåu˘
 *
	tM‹eFunTh™Evî
;

23 
M‹eFunTh™Evî
 
	gc
 = &
b
;

24 
¥ötf
("%d,%d\n", 
c
->
i
, c->
j
);

26 
	$maö
(Ë{
	}
}

	@tests/40_stdio.c

1 
	~<°dio.h
>

3 
FILE
 *
	gf
 = 
f›í
("fred.txt", "w");

4 
fwrôe
("hñlo\nhñlo\n", 1, 12, 
f
);

5 
f˛o£
(
f
);

7 
	g‰eddy
[7];

8 
	gf
 = 
f›í
("fred.txt", "r");

9 i‡(
‰ód
(
‰eddy
, 1, 6, 
f
) != 6)

10 
¥ötf
("couldn'tÑead fred.txt\n");

12 
	g‰eddy
[6] = '\0';

13 
f˛o£
(
f
);

15 
¥ötf
("%s", 
‰eddy
);

17 
	gInCh¨
;

18 
	gShowCh¨
;

19 
	gf
 = 
f›í
("fred.txt", "r");

20  (
	gInCh¨
 = 
fgëc
(
f
)Ë!
EOF
)

22 
ShowCh¨
 = 
InCh¨
;

23 i‡(
	gShowCh¨
 < ' ')

24 
	gShowCh¨
 = '.';

26 
¥ötf
("ch: %d '%c'\n", 
InCh¨
, 
ShowCh¨
);

28 
f˛o£
(
f
);

30 
	gf
 = 
f›í
("fred.txt", "r");

31  (
	gInCh¨
 = 
gëc
(
f
)Ë!
EOF
)

33 
ShowCh¨
 = 
InCh¨
;

34 i‡(
	gShowCh¨
 < ' ')

35 
	gShowCh¨
 = '.';

37 
¥ötf
("ch: %d '%c'\n", 
InCh¨
, 
ShowCh¨
);

39 
f˛o£
(
f
);

41 
	gf
 = 
f›í
("fred.txt", "r");

42 
fgës
(
‰eddy
, (‰eddy), 
f
Ë!
NULL
)

43 
¥ötf
("x: %s", 
‰eddy
);

45 
f˛o£
(
f
);

47 
	$maö
(Ë{
	}
}

	@tests/41_hashif.c

1 
	~<°dio.h
>

3 
¥ötf
("#includeÅest\n");

7 
¥ötf
("a\n");

9 
¥ötf
("b\n");

13 
¥ötf
("c\n");

15 
¥ötf
("d\n");

21 
¥ötf
("e\n");

23 
¥ötf
("f\n");

27 
¥ötf
("g\n");

29 
¥ötf
("h\n");

33 
	#DEF


	)

35 #ifde‡
DEF


36 #ifde‡
DEF


37 
¥ötf
("i\n");

39 
¥ötf
("j\n");

42 #ifde‡
DEF


43 
¥ötf
("k\n");

45 
¥ötf
("l\n");

49 #i‚de‡
DEF


50 #i‚de‡
DEF


51 
¥ötf
("m\n");

53 
¥ötf
("n\n");

56 #i‚de‡
DEF


57 
¥ötf
("o\n");

59 
¥ötf
("p\n");

63 
	#ONE
 1

	)

64 
	#ZERO
 0

	)

66 #i‡
ONE


67 #i‡
ZERO


68 
¥ötf
("q\n");

70 
¥ötf
("r\n");

73 #i‡
ZERO


74 
¥ötf
("s\n");

76 
¥ötf
("t\n");

80 
	$maö
(Ë{
	}
}

	@tests/42_function_pointer.c

1 
	~<°dio.h
>

3 
	$‰ed
(
p
)

5 
	`¥ötf
("yÿ%d\n", 
p
);

7 
	}
}

9 (*
f
)(Ë&
‰ed
;

11 
	$maö
()

13 
	`¥ötf
("%d\n", (*
f
)(24));

15 
	}
}

	@tests/43_void_param.c

1 
	~<°dio.h
>

3 
	$‰ed
()

5 
	`¥ötf
("yo\n");

6 
	}
}

8 
‰ed
();

10 
	$maö
(Ë{
	}
}

	@tests/44_scoped_declarations.c

1 
	~<°dio.h
>

3 
	ga
;

5 
	ga
 = 0;á < 2;á++)

7 
	gb
 = 
a
;

10 
¥ötf
("it'sáll good\n");

12 
	$maö
(Ë{
	}
}

	@tests/45_empty_for.c

1 
	~<°dio.h
>

3 
	$maö
()

5 
Cou¡
 = 0;

9 
Cou¡
++;

10 
	`¥ötf
("%d\n", 
Cou¡
);

11 i‡(
Cou¡
 >= 10)

16 
	}
}

	@tests/46_grep.c

17 
	~<°dio.h
>

29 *
	gdocumíèti⁄
[] = {

42 *
	g∑tdoc
[] = {

75 
	#LMAX
 512

	)

76 
	#PMAX
 256

	)

78 
	#CHAR
 1

	)

79 
	#BOL
 2

	)

80 
	#EOL
 3

	)

81 
	#ANY
 4

	)

82 
	#CLASS
 5

	)

83 
	#NCLASS
 6

	)

84 
	#STAR
 7

	)

85 
	#PLUS
 8

	)

86 
	#MINUS
 9

	)

87 
	#ALPHA
 10

	)

88 
	#DIGIT
 11

	)

89 
	#NALPHA
 12

	)

90 
	#PUNCT
 13

	)

91 
	#RANGE
 14

	)

92 
	#ENDPAT
 15

	)

94 
	gcÊag
=0, 
	gfÊag
=0, 
	gnÊag
=0, 
	gvÊag
=0, 
	gnfûe
=0, 
	gdebug
=0;

96 *
	gµ
, 
	glbuf
[
LMAX
], 
	gpbuf
[
PMAX
];

98 *
c˛ass
();

99 *
pm©ch
();

103 
	$fûe
(*
s
)

105 
	`¥ötf
("Fûê%s:\n", 
s
);

106 
	}
}

109 
	$ˇ¡
(*
s
)

111 
	`Ârötf
(
°dîr
, "%s: c™nŸ o≥n\n", 
s
);

112 
	}
}

115 
	$hñp
(**
hp
)

117 **
dp
;

119 
dp
 = 
hp
; *dp; ++dp)

120 
	`¥ötf
("%s\n", *
dp
);

121 
	}
}

124 
	$ußge
(*
s
)

126 
	`Ârötf
(
°dîr
, "?GREP-E-%s\n", 
s
);

127 
	`Ârötf
(
°dîr
,

129 
	`exô
(1);

130 
	}
}

133 
	$compûe
(*
sour˚
)

135 *
s
;

136 *
Õ
;

137 
c
;

138 
o
;

139 *
•p
;

141 
s
 = 
sour˚
;

142 i‡(
debug
)

143 
	`¥ötf
("P©ã∫ = \"%s\"\n", 
s
);

144 
µ
 = 
pbuf
;

145 
c
 = *
s
++) {

149 i‡(
c
 == '*' || c == '+' || c == '-') {

150 i‡(
µ
 =
pbuf
 ||

151 (
o
=
µ
[-1]Ë=
BOL
 ||

152 
o
 =
EOL
 ||

153 
o
 =
STAR
 ||

154 
o
 =
PLUS
 ||

155 
o
 =
MINUS
)

156 
	`bad∑t
("IŒegÆ occuº™˚ op.", 
sour˚
, 
s
);

157 
	`°‹e
(
ENDPAT
);

158 
	`°‹e
(
ENDPAT
);

159 
•p
 = 
µ
;

160 --
µ
 > 
Õ
)

161 *
µ
 =Öp[-1];

162 *
µ
 = (
c
 ='*'Ë? 
STAR
 :

163 (
c
 ='-'Ë? 
MINUS
 : 
PLUS
;

164 
µ
 = 
•p
;

170 
Õ
 = 
µ
;

171 
c
) {

174 
	`°‹e
(
BOL
);

178 
	`°‹e
(
EOL
);

182 
	`°‹e
(
ANY
);

186 
s
 = 
	`c˛ass
(
sour˚
, s);

190 i‡(*
s
) {

191 
	`tﬁowî
(
c
 = *
s
++)) {

195 
	`°‹e
(
ALPHA
);

200 
	`°‹e
(
DIGIT
);

205 
	`°‹e
(
NALPHA
);

209 
	`°‹e
(
PUNCT
);

213 
	`bad∑t
("Unknow¿:Åy≥", 
sour˚
, 
s
);

218 
	`bad∑t
("Nÿ:Åy≥", 
sour˚
, 
s
);

221 i‡(*
s
)

222 
c
 = *
s
++;

225 
	`°‹e
(
CHAR
);

226 
	`°‹e
(
	`tﬁowî
(
c
));

229 
	`°‹e
(
ENDPAT
);

230 
	`°‹e
(0);

231 i‡(
debug
) {

232 
Õ
 = 
pbuf
;Ü∞< 
µ
;) {

233 i‡((
c
 = (*
Õ
++ & 0377)) < ' ')

234 
	`¥ötf
("\\%ÿ", 
c
);

235 
	`¥ötf
("%¯", 
c
);

237 
	`¥ötf
("\n");

239 
	}
}

242 *
	$c˛ass
(*
sour˚
, *
§c
)

246 *
s
;

247 *
˝
;

248 
c
;

249 
o
;

251 
s
 = 
§c
;

252 
o
 = 
CLASS
;

253 i‡(*
s
 == '^') {

254 ++
s
;

255 
o
 = 
NCLASS
;

257 
	`°‹e
(
o
);

258 
˝
 = 
µ
;

259 
	`°‹e
(0);

260 (
c
 = *
s
++) && c!=']') {

261 i‡(
c
 == '\\') {

262 i‡((
c
 = *
s
++) == '\0')

263 
	`bad∑t
("Cœs†ãrmö©e†badly", 
sour˚
, 
s
);

264 
	`°‹e
(
	`tﬁowî
(
c
));

266 i‡(
c
 == '-' &&

267 (
µ
 - 
˝
Ë> 1 && *
s
 != ']' && *s != '\0') {

268 
c
 = 
µ
[-1];

269 
µ
[-1] = 
RANGE
;

270 
	`°‹e
(
c
);

271 
c
 = *
s
++;

272 
	`°‹e
(
	`tﬁowî
(
c
));

275 
	`°‹e
(
	`tﬁowî
(
c
));

278 i‡(
c
 != ']')

279 
	`bad∑t
("U¡îmö©ed cœss", 
sour˚
, 
s
);

280 i‡((
c
 = (
µ
 - 
˝
)) >= 256)

281 
	`bad∑t
("Cœs†toÿœrge", 
sour˚
, 
s
);

282 i‡(
c
 == 0)

283 
	`bad∑t
("Em±y cœss", 
sour˚
, 
s
);

284 *
˝
 = 
c
;

285 (
s
);

286 
	}
}

289 
	$°‹e
(
›
)

291 i‡(
µ
 >&
pbuf
[
PMAX
])

292 
	`îr‹
("PatternÅoo complex\n");

293 *
µ
++ = 
›
;

294 
	}
}

297 
	$bad∑t
(*
mesßge
, *
sour˚
, *
°›
)

302 
	`Ârötf
(
°dîr
, "-GREP-E-%s,Ö©ã∫ is\"%s\"\n", 
mesßge
, 
sour˚
);

303 
	`Ârötf
(
°dîr
, "-GREP-E-Stoppedát byte %d, '%c'\n",

304 
°›
-
sour˚
, stop[-1]);

305 
	`îr‹
("?GREP-E-BadÖattern\n");

306 
	}
}

309 
	$gªp
(
FILE
 *
Â
, *
‚
)

313 
 o
, 
cou¡
, 
m
;

315 
 o
 = 0;

316 
cou¡
 = 0;

317 
	`fgës
(
lbuf
, 
LMAX
, 
Â
)) {

318 ++
 o
;

319 
m
 = 
	`m©ch
();

320 i‡((
m
 && !
vÊag
) || (!m && vflag)) {

321 ++
cou¡
;

322 i‡(!
cÊag
) {

323 i‡(
fÊag
 && 
‚
) {

324 
	`fûe
(
‚
);

325 
‚
 = 0;

327 i‡(
nÊag
)

328 
	`¥ötf
("%d\t", 
 o
);

329 
	`¥ötf
("%s\n", 
lbuf
);

333 i‡(
cÊag
) {

334 i‡(
fÊag
 && 
‚
)

335 
	`fûe
(
‚
);

336 
	`¥ötf
("%d\n", 
cou¡
);

338 
	}
}

341 
	$m©ch
()

343 *
l
;

345 
l
 = 
lbuf
; *l; ++l) {

346 i‡(
	`pm©ch
(
l
, 
pbuf
))

350 
	}
}

353 *
	$pm©ch
(*
löe
, *
∑âîn
)

357 *
l
;

358 *
p
;

359 
c
;

360 *
e
;

361 
›
;

362 
n
;

363 *
¨e
;

365 
l
 = 
löe
;

366 i‡(
debug
 > 1)

367 
	`¥ötf
("pm©ch(\"%s\")\n", 
löe
);

368 
p
 = 
∑âîn
;

369 (
›
 = *
p
++Ë!
ENDPAT
) {

370 i‡(
debug
 > 1)

371 
	`¥ötf
("byte[%d] = 0%o, '%c', op = 0%o\n",

372 
l
-
löe
, *l, *l, 
›
);

373 
›
) {

375 
CHAR
:

376 i‡(
	`tﬁowî
(*
l
++Ë!*
p
++)

380 
BOL
:

381 i‡(
l
 !
lbuf
)

385 
EOL
:

386 i‡(*
l
 != '\0')

390 
ANY
:

391 i‡(*
l
++ == '\0')

395 
DIGIT
:

396 i‡((
c
 = *
l
++) < '0' || (c > '9'))

400 
ALPHA
:

401 
c
 = 
	`tﬁowî
(*
l
++);

402 i‡(
c
 < 'a' || c > 'z')

406 
NALPHA
:

407 
c
 = 
	`tﬁowî
(*
l
++);

408 i‡(
c
 >= 'a' && c <= 'z')

410 i‡(
c
 < '0' || c > '9')

414 
PUNCT
:

415 
c
 = *
l
++;

416 i‡(
c
 == 0 || c > ' ')

420 
CLASS
:

421 
NCLASS
:

422 
c
 = 
	`tﬁowî
(*
l
++);

423 
n
 = *
p
++ & 0377;

425 i‡(*
p
 =
RANGE
) {

426 
p
 += 3;

427 
n
 -= 2;

428 i‡(
c
 >
p
[-2] && c <=Ö[-1])

431 i‡(
c
 =*
p
++)

433 } --
n
 > 1);

434 i‡((
›
 =
CLASS
Ë=(
n
 <= 1))

436 i‡(
›
 =
CLASS
)

437 
p
 +
n
 - 2;

440 
MINUS
:

441 
e
 = 
	`pm©ch
(
l
, 
p
);

442 *
p
++ !
ENDPAT
);

443 i‡(
e
)

444 
l
 = 
e
;

447 
PLUS
:

448 i‡((
l
 = 
	`pm©ch
÷, 
p
)) == 0)

450 
STAR
:

451 
¨e
 = 
l
;

452 *
l
 && (
e
 = 
	`pm©ch
÷, 
p
)))

453 
l
 = 
e
;

454 *
p
++ !
ENDPAT
);

455 
l
 >
¨e
) {

456 i‡(
e
 = 
	`pm©ch
(
l
, 
p
))

457 (
e
);

458 --
l
;

463 
	`¥ötf
("Bad o∞codê%d\n", 
›
);

464 
	`îr‹
("Cannot happen -- match\n");

467 (
l
);

468 
	}
}

471 
	$îr‹
(*
s
)

473 
	`Ârötf
(
°dîr
, "%s", 
s
);

474 
	`exô
(1);

475 
	}
}

478 
	$maö
(
¨gc
, **
¨gv
)

480 *
p
;

481 
c
, 
i
;

482 
gŸ∑âîn
;

484 
FILE
 *
f
;

486 i‡(
¨gc
 <= 1)

487 
	`ußge
("Noárguments");

488 i‡(
¨gc
 =2 && 
¨gv
[1][0] == '?' &&árgv[1][1] == 0) {

489 
	`hñp
(
documíèti⁄
);

490 
	`hñp
(
∑tdoc
);

493 
nfûe
 = 
¨gc
-1;

494 
gŸ∑âîn
 = 0;

495 
i
=1; i < 
¨gc
; ++i) {

496 
p
 = 
¨gv
[
i
];

497 i‡(*
p
 == '-') {

498 ++
p
;

499 
c
 = *
p
++) {

500 
	`tﬁowî
(
c
)) {

503 
	`hñp
(
documíèti⁄
);

508 ++
cÊag
;

513 ++
debug
;

518 ++
fÊag
;

523 ++
nÊag
;

528 ++
vÊag
;

532 
	`ußge
("Unknown flag");

535 
¨gv
[
i
] = 0;

536 --
nfûe
;

537 } i‡(!
gŸ∑âîn
) {

538 
	`compûe
(
p
);

539 
¨gv
[
i
] = 0;

540 ++
gŸ∑âîn
;

541 --
nfûe
;

544 i‡(!
gŸ∑âîn
)

545 
	`ußge
("NoÖattern");

546 i‡(
nfûe
 == 0)

547 
	`gªp
(
°dö
, 0);

549 
fÊag
 = fÊag ^ (
nfûe
 > 0);

550 
i
=1; i < 
¨gc
; ++i) {

551 i‡(
p
 = 
¨gv
[
i
]) {

552 i‡((
f
=
	`f›í
(
p
, "r")Ë=
NULL
)

553 
	`ˇ¡
(
p
);

555 
	`gªp
(
f
, 
p
);

556 
	`f˛o£
(
f
);

561 
	}
}

	@tests/47_switch_return.c

1 
	~<°dio.h
>

3 
	$‰ed
(
x
)

5 
x
)

7 1: 
	`¥ötf
("1\n"); ;

8 2: 
	`¥ötf
("2\n"); ;

9 3: 
	`¥ötf
("3\n"); ;

12 
	`¥ötf
("out\n");

13 
	}
}

15 
	$maö
()

17 
	`‰ed
(1);

18 
	`‰ed
(2);

19 
	`‰ed
(3);

22 
	}
}

	@tests/48_nested_break.c

1 
	~<°dio.h
>

3 
	ga
;

4 
	gb
;

6 
	ga
 = 0;

7 
	ga
 < 2)

9 
¥ötf
("%d", 
a
++);

12 
	gb
 = 'A';

13 
	gb
 < 'C')

15 
¥ötf
("%c", 
b
++);

17 
¥ötf
("e");

19 
¥ötf
("\n");

21 
	$maö
()

24 
	}
}

	@tests/49_bracket_evaluation.c

1 
	~<°dio.h
>

3 
	spoöt


5 
	mx
;

6 
	my
;

9 
poöt
 
	gpoöt_¨øy
[100];

11 
	$maö
()

13 
my_poöt
 = 10;

15 
poöt_¨øy
[
my_poöt
].
x
 = 12.34;

16 
poöt_¨øy
[
my_poöt
].
y
 = 56.78;

18 
	`¥ötf
("%f, %f\n", 
poöt_¨øy
[
my_poöt
].
x
,Öoöt_¨øy[my_poöt].
y
);

21 
	}
}

	@tests/50_logical_second_arg.c

1 
	~<°dio.h
>

3 
	$‰ed
()

5 
	`¥ötf
("fred\n");

7 
	}
}

9 
	$j€
()

11 
	`¥ötf
("joe\n");

13 
	}
}

15 
	$maö
()

17 
	`¥ötf
("%d\n", 
	`‰ed
(Ë&& 
	`j€
());

18 
	`¥ötf
("%d\n", 
	`‰ed
(Ë|| 
	`j€
());

19 
	`¥ötf
("%d\n", 
	`j€
(Ë&& 
	`‰ed
());

20 
	`¥ötf
("%d\n", 
	`j€
(Ë|| 
	`‰ed
());

21 
	`¥ötf
("%d\n", 
	`‰ed
(Ë&& (1 + 
	`j€
()));

22 
	`¥ötf
("%d\n", 
	`‰ed
(Ë|| (0 + 
	`j€
()));

23 
	`¥ötf
("%d\n", 
	`j€
(Ë&& (0 + 
	`‰ed
()));

24 
	`¥ötf
("%d\n", 
	`j€
(Ë|| (1 + 
	`‰ed
()));

27 
	}
}

	@tests/51_static.c

1 
	~<°dio.h
>

3 
	g‰ed
 = 1234;

4 
	gj€
;

6 
	$híry
()

8 
‰ed
 = 4567;

10 
	`¥ötf
("%d\n", 
‰ed
);

11 
‰ed
++;

12 
	}
}

14 
	$maö
()

16 
	`¥ötf
("%d\n", 
‰ed
);

17 
	`híry
();

18 
	`híry
();

19 
	`híry
();

20 
	`híry
();

21 
	`¥ötf
("%d\n", 
‰ed
);

22 
‰ed
 = 8901;

23 
j€
 = 2345;

24 
	`¥ötf
("%d\n", 
‰ed
);

25 
	`¥ötf
("%d\n", 
j€
);

26 
	}
}

	@tests/52_unnamed_enum.c

1 
	~<°dio.h
>

3 
	e‰ed
 { 
	ma
, 
	mb
, 
	mc
 };

5 
¥ötf
("a=%d\n", 
a
);

6 
¥ötf
("b=%d\n", 
b
);

7 
¥ötf
("c=%d\n", 
c
);

9 
‰ed
 
	gd
;

11 íum { 
	me
, 
	mf
, 
	mg
 } 
	th
;

12 íum { 
	mi
, 
	mj
, 
	mk
 } 
	tm
;

14 
¥ötf
("e=%d\n", 
e
);

15 
¥ötf
("f=%d\n", 
f
);

16 
¥ötf
("g=%d\n", 
g
);

18 
¥ötf
("i=%d\n", 
i
);

19 
¥ötf
("j=%d\n", 
j
);

20 
¥ötf
("k=%d\n", 
k
);

22 
	$maö
()

24 
	}
}

	@tests/54_goto.c

1 
	~<°dio.h
>

3 
	$‰ed
()

5 
	`¥ötf
("In fred()\n");

6 
d⁄e
;

7 
	`¥ötf
("In middle\n");

8 
d⁄e
:

9 
	`¥ötf
("AtÉnd\n");

10 
	}
}

12 
	$j€
()

14 
b
 = 5678;

16 
	`¥ötf
("In joe()\n");

19 
c
 = 1234;

20 
	`¥ötf
("¯%d\n", 
c
);

21 
ouãr
;

22 
	`¥ötf
("uh-oh\n");

25 
ouãr
:

27 
	`¥ötf
("done\n");

28 
	}
}

30 
	$híry
()

32 
a
;

34 
	`¥ötf
("In henry()\n");

35 
ö√r
;

38 
b
;

39 
ö√r
:

40 
b
 = 1234;

41 
	`¥ötf
("b = %d\n", 
b
);

44 
	`¥ötf
("done\n");

45 
	}
}

47 
	$maö
()

49 
	`‰ed
();

50 
	`j€
();

51 
	`híry
();

52 
	}
}

	@tests/quicksort.c

1 
	~<°dio.h
>

3 
	g¨øy
[16];

6 
	$sw≠
(
a
, 
b
)

8 
tmp
 = 
¨øy
[
a
];

9 
¨øy
[
a
] =áºay[
b
];

10 
¨øy
[
b
] = 
tmp
;

11 
	}
}

15 
	$∑πôi⁄
(
À·
, 
right
)

17 
pivŸIndex
 = 
À·
;

18 
pivŸVÆue
 = 
¨øy
[
pivŸIndex
];

19 
ödex
 = 
À·
;

20 
i
;

22 
	`sw≠
(
pivŸIndex
, 
right
);

23 
i
 = 
À·
; i < 
right
; i++)

25 if(
¨øy
[
i
] < 
pivŸVÆue
)

27 
	`sw≠
(
i
, 
ödex
);

28 
ödex
 += 1;

31 
	`sw≠
(
right
, 
ödex
);

33  
ödex
;

34 
	}
}

37 
	$quicks‹t
(
À·
, 
right
)

39 if(
À·
 >
right
)

42 
ödex
 = 
	`∑πôi⁄
(
À·
, 
right
);

43 
	`quicks‹t
(
À·
, 
ödex
 - 1);

44 
	`quicks‹t
(
ödex
 + 1, 
right
);

45 
	}
}

47 
	$maö
()

49 
i
;

51 
¨øy
[0] = 62;

52 
¨øy
[1] = 83;

53 
¨øy
[2] = 4;

54 
¨øy
[3] = 89;

55 
¨øy
[4] = 36;

56 
¨øy
[5] = 21;

57 
¨øy
[6] = 74;

58 
¨øy
[7] = 37;

59 
¨øy
[8] = 65;

60 
¨øy
[9] = 33;

61 
¨øy
[10] = 96;

62 
¨øy
[11] = 38;

63 
¨øy
[12] = 53;

64 
¨øy
[13] = 16;

65 
¨øy
[14] = 74;

66 
¨øy
[15] = 55;

68 
i
 = 0; i < 16; i++)

69 
	`¥ötf
("%d ", 
¨øy
[
i
]);

71 
	`¥ötf
("\n");

73 
	`quicks‹t
(0, 15);

75 
i
 = 0; i < 16; i++)

76 
	`¥ötf
("%d ", 
¨øy
[
i
]);

78 
	`¥ötf
("\n");

79 
	}
}

	@tests/sample.c

1 
	~<°dio.h
>

2 
¥ötf
("hi dhaneshÅhis is from first commitánd org_src branch\n");

	@tmp.c

1 
	~<°dio.h
>

2 
	$maö
(){

3 
a
 = 10;

4 
	`¥ötf
("%d\n",
a
);

6 
	}
}

	@type.c

1 
	~"öãΩªãr.h
"

4 
VÆueTy≥
 
	gUbîTy≥
;

5 
VÆueTy≥
 
	gI¡Ty≥
;

6 
VÆueTy≥
 
	gSh‹tTy≥
;

7 
VÆueTy≥
 
	gCh¨Ty≥
;

8 
VÆueTy≥
 
	gL⁄gTy≥
;

9 
VÆueTy≥
 
	gUnsig√dI¡Ty≥
;

10 
VÆueTy≥
 
	gUnsig√dSh‹tTy≥
;

11 
VÆueTy≥
 
	gUnsig√dL⁄gTy≥
;

12 #i‚de‡
NO_FP


13 
VÆueTy≥
 
	gFPTy≥
;

15 
VÆueTy≥
 
	gVoidTy≥
;

16 
VÆueTy≥
 
	gTy≥Ty≥
;

17 
VÆueTy≥
 
	gFun˘i⁄Ty≥
;

18 
VÆueTy≥
 
	gMa¸oTy≥
;

19 
VÆueTy≥
 
	gEnumTy≥
;

20 
VÆueTy≥
 
	gGŸoLabñTy≥
;

21 
VÆueTy≥
 *
	gCh¨PåTy≥
;

22 
VÆueTy≥
 *
	gCh¨PåPåTy≥
;

23 
VÆueTy≥
 *
	gCh¨AºayTy≥
;

24 
VÆueTy≥
 *
	gVoidPåTy≥
;

26 
	gPoöãrAlignByãs
;

27 
	gI¡AlignByãs
;

31 
VÆueTy≥
 *
	$Ty≥Add
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
P¨ítTy≥
, 
Ba£Ty≥
 
Ba£
, 
AºaySize
, c⁄° *
Idítifõr
, 
Sizeof
, 
AlignByãs
)

33 
VÆueTy≥
 *
NewTy≥
 = 
	`V¨übÀAŒoc
(
P¨£r
, (VÆueTy≥), 
TRUE
);

34 
NewTy≥
->
Ba£
 = Base;

35 
NewTy≥
->
AºaySize
 = ArraySize;

36 
NewTy≥
->
Sizeof
 = Sizeof;

37 
NewTy≥
->
AlignByãs
 = AlignBytes;

38 
NewTy≥
->
Idítifõr
 = Identifier;

39 
NewTy≥
->
Membîs
 = 
NULL
;

40 
NewTy≥
->
FromTy≥
 = 
P¨ítTy≥
;

41 
NewTy≥
->
DîivedTy≥Li°
 = 
NULL
;

42 
NewTy≥
->
OnHóp
 = 
TRUE
;

43 
NewTy≥
->
Next
 = 
P¨ítTy≥
->
DîivedTy≥Li°
;

44 
P¨ítTy≥
->
DîivedTy≥Li°
 = 
NewTy≥
;

46  
NewTy≥
;

47 
	}
}

51 
VÆueTy≥
 *
	$Ty≥GëM©chög
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
P¨ítTy≥
, 
Ba£Ty≥
 
Ba£
, 
AºaySize
, c⁄° *
Idítifõr
, 
AŒowDu∂iˇãs
)

53 
Sizeof
;

54 
AlignByãs
;

55 
VÆueTy≥
 *
ThisTy≥
 = 
P¨ítTy≥
->
DîivedTy≥Li°
;

56 
ThisTy≥
 !
NULL
 && (ThisTy≥->
Ba£
 !Ba£ || ThisTy≥->
AºaySize
 !AºaySizê|| ThisTy≥->
Idítifõr
 != Identifier))

57 
ThisTy≥
 = ThisTy≥->
Next
;

59 i‡(
ThisTy≥
 !
NULL
)

61 i‡(
AŒowDu∂iˇãs
)

62  
ThisTy≥
;

64 
	`ProgømFaû
(
P¨£r
, "d©®ty≥ '%s' i†Æªady deföed", 
Idítifõr
);

67 
Ba£
)

69 
Ty≥Poöãr
: 
Sizeof
 = (*); 
AlignByãs
 = 
PoöãrAlignByãs
; ;

70 
Ty≥Aºay
: 
Sizeof
 = 
AºaySize
 * 
P¨ítTy≥
->Sizeof; 
AlignByãs
 = ParentType->AlignBytes; ;

71 
Ty≥Enum
: 
Sizeof
 = (); 
AlignByãs
 = 
I¡AlignByãs
; ;

72 : 
Sizeof
 = 0; 
AlignByãs
 = 0; ;

75  
	`Ty≥Add
(
P¨£r
, 
P¨ítTy≥
, 
Ba£
, 
AºaySize
, 
Idítifõr
, 
Sizeof
, 
AlignByãs
);

76 
	}
}

79 
	$Ty≥SèckSizeVÆue
(
VÆue
 *
VÆ
)

81 i‡(
VÆ
 !
NULL
 && VÆ->
VÆOnSèck
)

82  
	`Ty≥SizeVÆue
(
VÆ
, 
FALSE
);

85 
	}
}

88 
	$Ty≥SizeVÆue
(
VÆue
 *
VÆ
, 
Com∑˘
)

90 i‡(
	`IS_INTEGER_NUMERIC
(
VÆ
Ë&& !
Com∑˘
)

91  (
ALIGN_TYPE
);

92 i‡(
VÆ
->
Typ
->
Ba£
 !
Ty≥Aºay
)

93  
VÆ
->
Typ
->
Sizeof
;

95  
VÆ
->
Typ
->
FromTy≥
->
Sizeof
 * VÆ->Typ->
AºaySize
;

96 
	}
}

99 
	$Ty≥Size
(
VÆueTy≥
 *
Typ
, 
AºaySize
, 
Com∑˘
)

101 i‡(
	`IS_INTEGER_NUMERIC_TYPE
(
Typ
Ë&& !
Com∑˘
)

102  (
ALIGN_TYPE
);

103 i‡(
Typ
->
Ba£
 !
Ty≥Aºay
)

104  
Typ
->
Sizeof
;

106  
Typ
->
FromTy≥
->
Sizeof
 * 
AºaySize
;

107 
	}
}

110 
	$Ty≥AddBa£Ty≥
(
VÆueTy≥
 *
Ty≥Node
, 
Ba£Ty≥
 
Ba£
, 
Sizeof
, 
AlignByãs
)

112 
Ty≥Node
->
Ba£
 = Base;

113 
Ty≥Node
->
AºaySize
 = 0;

114 
Ty≥Node
->
Sizeof
 = Sizeof;

115 
Ty≥Node
->
AlignByãs
 = AlignBytes;

116 
Ty≥Node
->
Idítifõr
 = 
SåEm±y
;

117 
Ty≥Node
->
Membîs
 = 
NULL
;

118 
Ty≥Node
->
FromTy≥
 = 
NULL
;

119 
Ty≥Node
->
DîivedTy≥Li°
 = 
NULL
;

120 
Ty≥Node
->
OnHóp
 = 
FALSE
;

121 
Ty≥Node
->
Next
 = 
UbîTy≥
.
DîivedTy≥Li°
;

122 
UbîTy≥
.
DîivedTy≥Li°
 = 
Ty≥Node
;

123 
	}
}

126 
	$Ty≥Inô
()

128 
	sI¡Align
 { 
x
; 
y
; } 
ü
;

129 
	sSh‹tAlign
 { 
x
; 
y
; } 
ß
;

130 
	sCh¨Align
 { 
x
; 
y
; } 
ˇ
;

131 
	sL⁄gAlign
 { 
x
; 
y
; } 
œ
;

132 #i‚de‡
NO_FP


133 
	sDoubÀAlign
 { 
x
; 
y
; } 
da
;

135 
	sPoöãrAlign
 { 
x
; *
y
; } 
∑
;

137 
I¡AlignByãs
 = (*)&
ü
.
y
 - &ü.
x
;

138 
PoöãrAlignByãs
 = (*)&
∑
.
y
 - &∑.
x
;

140 
UbîTy≥
.
DîivedTy≥Li°
 = 
NULL
;

141 
	`Ty≥AddBa£Ty≥
(&
I¡Ty≥
, 
Ty≥I¡
, (), 
I¡AlignByãs
);

142 
	`Ty≥AddBa£Ty≥
(&
Sh‹tTy≥
, 
Ty≥Sh‹t
, (), (*)&
ß
.
y
 - &ß.
x
);

143 
	`Ty≥AddBa£Ty≥
(&
Ch¨Ty≥
, 
Ty≥Ch¨
, (), (*)&
ˇ
.
y
 - &ˇ.
x
);

144 
	`Ty≥AddBa£Ty≥
(&
L⁄gTy≥
, 
Ty≥L⁄g
, (), (*)&
œ
.
y
 - &œ.
x
);

145 
	`Ty≥AddBa£Ty≥
(&
Unsig√dI¡Ty≥
, 
Ty≥Unsig√dI¡
, (), 
I¡AlignByãs
);

146 
	`Ty≥AddBa£Ty≥
(&
Unsig√dSh‹tTy≥
, 
Ty≥Unsig√dSh‹t
, (), (*)&
ß
.
y
 - &ß.
x
);

147 
	`Ty≥AddBa£Ty≥
(&
Unsig√dL⁄gTy≥
, 
Ty≥Unsig√dL⁄g
, (), (*)&
œ
.
y
 - &œ.
x
);

148 
	`Ty≥AddBa£Ty≥
(&
VoidTy≥
, 
Ty≥Void
, 0, 1);

149 
	`Ty≥AddBa£Ty≥
(&
Fun˘i⁄Ty≥
, 
Ty≥Fun˘i⁄
, (), 
I¡AlignByãs
);

150 
	`Ty≥AddBa£Ty≥
(&
Ma¸oTy≥
, 
Ty≥Ma¸o
, (), 
I¡AlignByãs
);

151 
	`Ty≥AddBa£Ty≥
(&
GŸoLabñTy≥
, 
Ty≥GŸoLabñ
, 0, 1);

152 #i‚de‡
NO_FP


153 
	`Ty≥AddBa£Ty≥
(&
FPTy≥
, 
Ty≥FP
, (), (*)&
da
.
y
 - &da.
x
);

154 
	`Ty≥AddBa£Ty≥
(&
Ty≥Ty≥
, 
Ty≥_Ty≥
, (), (*)&
da
.
y
 - &da.
x
);

156 
	`Ty≥AddBa£Ty≥
(&
Ty≥Ty≥
, 
Ty≥_Ty≥
, (
VÆueTy≥
 *), 
PoöãrAlignByãs
);

158 
Ch¨AºayTy≥
 = 
	`Ty≥Add
(
NULL
, &
Ch¨Ty≥
, 
Ty≥Aºay
, 0, 
SåEm±y
, (), (*)&
ˇ
.
y
 - &ˇ.
x
);

159 
Ch¨PåTy≥
 = 
	`Ty≥Add
(
NULL
, &
Ch¨Ty≥
, 
Ty≥Poöãr
, 0, 
SåEm±y
, (*), 
PoöãrAlignByãs
);

160 
Ch¨PåPåTy≥
 = 
	`Ty≥Add
(
NULL
, 
Ch¨PåTy≥
, 
Ty≥Poöãr
, 0, 
SåEm±y
, (*), 
PoöãrAlignByãs
);

161 
VoidPåTy≥
 = 
	`Ty≥Add
(
NULL
, &
VoidTy≥
, 
Ty≥Poöãr
, 0, 
SåEm±y
, (*), 
PoöãrAlignByãs
);

162 
	}
}

165 
	$Ty≥CÀ™upNode
(
VÆueTy≥
 *
Typ
)

167 
VÆueTy≥
 *
SubTy≥
;

168 
VÆueTy≥
 *
NextSubTy≥
;

171 
SubTy≥
 = 
Typ
->
DîivedTy≥Li°
; SubTy≥ !
NULL
; SubTy≥ = 
NextSubTy≥
)

173 
NextSubTy≥
 = 
SubTy≥
->
Next
;

174 
	`Ty≥CÀ™upNode
(
SubTy≥
);

175 i‡(
SubTy≥
->
OnHóp
)

178 i‡(
SubTy≥
->
Membîs
 !
NULL
)

180 
	`V¨übÀTabÀCÀ™up
(
SubTy≥
->
Membîs
);

181 
	`HópFªeMem
(
SubTy≥
->
Membîs
);

185 
	`HópFªeMem
(
SubTy≥
);

188 
	}
}

190 
	$Ty≥CÀ™up
()

192 
	`Ty≥CÀ™upNode
(&
UbîTy≥
);

193 
	}
}

196 
	$Ty≥P¨£Såu˘
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 **
Typ
, 
IsSåu˘
)

198 
VÆue
 *
LexVÆue
;

199 
VÆueTy≥
 *
MembîTy≥
;

200 *
MembîIdítifõr
;

201 *
Såu˘Idítifõr
;

202 
VÆue
 *
MembîVÆue
;

203 
LexTokí
 
Tokí
;

204 
AlignBound¨y
;

206 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
FALSE
);

207 i‡(
Tokí
 =
TokíIdítifõr
)

209 
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
TRUE
);

210 
Såu˘Idítifõr
 = 
LexVÆue
->
VÆ
->
Idítifõr
;

211 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
);

215 
TempNameBuf
[7] = "^s0000";

216 
Såu˘Idítifõr
 = 
	`Pœtf‹mMakeTempName
(
TempNameBuf
);

219 *
Typ
 = 
	`Ty≥GëM©chög
(
P¨£r
, &
UbîTy≥
, 
IsSåu˘
 ? 
Ty≥Såu˘
 : 
Ty≥Uni⁄
, 0, 
Såu˘Idítifõr
, 
Tokí
 !
TokíLe·Bø˚
);

221 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
);

222 i‡(
Tokí
 !
TokíLe·Bø˚
)

225 i‡((*
Typ
)->
Membîs
 =
NULL
)

226 
	`ProgømFaû
(
P¨£r
, "°ru˘uª '%s' i¢'àdeföed", 
LexVÆue
->
VÆ
->
Idítifõr
);

231 i‡(
T›SèckFøme
 !
NULL
)

232 
	`ProgømFaû
(
P¨£r
, "struct/union definitions can only be globals");

234 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

235 (*
Typ
)->
Membîs
 = 
	`V¨übÀAŒoc
(
P¨£r
, (
TabÀ
Ë+ 
STRUCT_TABLE_SIZE
 * (
TabÀE¡ry
), 
TRUE
);

236 (*
Typ
)->
Membîs
->
HashTabÀ
 = (
TabÀE¡ry
 **)((*)(*Typ)->Membî†+ (
TabÀ
));

237 
	`TabÀInôTabÀ
((*
Typ
)->
Membîs
, (
TabÀE¡ry
 **)((*)(*Typ)->Membî†+ (
TabÀ
)), 
STRUCT_TABLE_SIZE
, 
TRUE
);

240 
	`Ty≥P¨£
(
P¨£r
, &
MembîTy≥
, &
MembîIdítifõr
, 
NULL
);

241 i‡(
MembîTy≥
 =
NULL
 || 
MembîIdítifõr
 == NULL)

242 
	`ProgømFaû
(
P¨£r
, "invalidÅype in struct");

244 
MembîVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
P¨£r
, (), 
FALSE
, 
NULL
, 
TRUE
);

245 
MembîVÆue
->
Typ
 = 
MembîTy≥
;

246 i‡(
IsSåu˘
)

249 
AlignBound¨y
 = 
MembîVÆue
->
Typ
->
AlignByãs
;

250 i‡(((*
Typ
)->
Sizeof
 & (
AlignBound¨y
-1)) != 0)

251 (*
Typ
)->
Sizeof
 +
AlignBound¨y
 - ((*Typ)->Sizeof & (AlignBoundary-1));

253 
MembîVÆue
->
VÆ
->
I¡egî
 = (*
Typ
)->
Sizeof
;

254 (*
Typ
)->
Sizeof
 +
	`Ty≥SizeVÆue
(
MembîVÆue
, 
TRUE
);

259 
MembîVÆue
->
VÆ
->
I¡egî
 = 0;

260 i‡(
MembîVÆue
->
Typ
->
Sizeof
 > (*Typ)->Sizeof)

261 (*
Typ
)->
Sizeof
 = 
	`Ty≥SizeVÆue
(
MembîVÆue
, 
TRUE
);

265 i‡((*
Typ
)->
AlignByãs
 < 
MembîVÆue
->Typ->AlignBytes)

266 (*
Typ
)->
AlignByãs
 = 
MembîVÆue
->Typ->AlignBytes;

269 i‡(!
	`TabÀSë
((*
Typ
)->
Membîs
, 
MembîIdítifõr
, 
MembîVÆue
, 
P¨£r
->
FûeName
, P¨£r->
Löe
, P¨£r->
Ch¨a˘îPos
))

270 
	`ProgømFaû
(
P¨£r
, "membî '%s'áÃódy deföed", &
MembîIdítifõr
);

272 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíSemicﬁ⁄
)

273 
	`ProgømFaû
(
P¨£r
, "semicolonÉxpected");

275 } 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë!
TokíRightBø˚
);

278 
AlignBound¨y
 = (*
Typ
)->
AlignByãs
;

279 i‡(((*
Typ
)->
Sizeof
 & (
AlignBound¨y
-1)) != 0)

280 (*
Typ
)->
Sizeof
 +
AlignBound¨y
 - ((*Typ)->Sizeof & (AlignBoundary-1));

282 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

283 
	}
}

286 
VÆueTy≥
 *
	$Ty≥Cª©eO∑queSåu˘
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Såu˘Name
, 
Size
)

288 
VÆueTy≥
 *
Typ
 = 
	`Ty≥GëM©chög
(
P¨£r
, &
UbîTy≥
, 
Ty≥Såu˘
, 0, 
Såu˘Name
, 
FALSE
);

291 
Typ
->
Membîs
 = 
	`V¨übÀAŒoc
(
P¨£r
, (
TabÀ
Ë+ 
STRUCT_TABLE_SIZE
 * (
TabÀE¡ry
), 
TRUE
);

292 
Typ
->
Membîs
->
HashTabÀ
 = (
TabÀE¡ry
 **)((*)Typ->Membî†+ (
TabÀ
));

293 
	`TabÀInôTabÀ
(
Typ
->
Membîs
, (
TabÀE¡ry
 **)((*)Typ->Membî†+ (
TabÀ
)), 
STRUCT_TABLE_SIZE
, 
TRUE
);

294 
Typ
->
Sizeof
 = 
Size
;

296  
Typ
;

297 
	}
}

300 
	$Ty≥P¨£Enum
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 **
Typ
)

302 
	`¥ötf
("TypeParseEnum\n");

303 
VÆue
 *
LexVÆue
;

304 
VÆue
 
InôVÆue
;

305 
LexTokí
 
Tokí
;

306 
VÆueTy≥
 *
EnumTy≥
;

307 
EnumVÆue
 = 0;

308 *
EnumIdítifõr
;

310 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
FALSE
);

311 i‡(
Tokí
 =
TokíIdítifõr
)

313 
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
TRUE
);

314 
EnumIdítifõr
 = 
LexVÆue
->
VÆ
->
Idítifõr
;

315 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
);

319 
TempNameBuf
[7] = "^e0000";

320 
EnumIdítifõr
 = 
	`Pœtf‹mMakeTempName
(
TempNameBuf
);

323 
EnumTy≥
 = 
	`Ty≥GëM©chög
(
P¨£r
, &
UbîTy≥
, 
Ty≥Enum
, 0, 
EnumIdítifõr
, 
Tokí
 !
TokíLe·Bø˚
);

324 *
Typ
 = &
I¡Ty≥
;

325 i‡(
Tokí
 !
TokíLe·Bø˚
)

328 i‡((*
Typ
)->
Membîs
 =
NULL
)

329 
	`ProgømFaû
(
P¨£r
, "íum '%s' i¢'àdeföed", 
EnumIdítifõr
);

334 i‡(
T›SèckFøme
 !
NULL
)

335 
	`ProgømFaû
(
P¨£r
, "enum definitions can only be globals");

337 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

338 (*
Typ
)->
Membîs
 = &
GlobÆTabÀ
;

339 
	`mem£t
((*)&
InôVÆue
, '\0', (
VÆue
));

340 
InôVÆue
.
Typ
 = &
I¡Ty≥
;

341 
InôVÆue
.
VÆ
 = (
AnyVÆue
 *)&
EnumVÆue
;

343 i‡(
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
TRUE
Ë!
TokíIdítifõr
)

344 
	`ProgømFaû
(
P¨£r
, "identifierÉxpected");

346 
EnumIdítifõr
 = 
LexVÆue
->
VÆ
->
Idítifõr
;

347 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
FALSE
Ë=
TokíAssign
)

349 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

350 
EnumVÆue
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

353 
	`V¨übÀDeföe
(
P¨£r
, 
EnumIdítifõr
, &
InôVÆue
, 
NULL
, 
FALSE
);

355 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

356 i‡(
Tokí
 !
TokíComma
 && Tokí !
TokíRightBø˚
)

357 
	`ProgømFaû
(
P¨£r
, "commaÉxpected");

359 
EnumVÆue
++;

361 } 
Tokí
 =
TokíComma
);

362 
	}
}

365 
	$Ty≥P¨£Fr⁄t
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 **
Typ
, *
IsSètic
)

368 
P¨£Sèã
 
Bef‹e
;

369 
VÆue
 *
LexîVÆue
;

370 
LexTokí
 
Tokí
;

371 
Unsig√d
 = 
FALSE
;

372 
VÆue
 *
V¨VÆue
;

373 
SèticQuÆifõr
 = 
FALSE
;

374 *
Typ
 = 
NULL
;

377 
	`P¨£rC›y
(&
Bef‹e
, 
P¨£r
);

378 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
TRUE
);

380 
Tokí
 =
TokíSèticTy≥
 || Tokí =
TokíAutoTy≥
 || Tokí =
TokíRegi°îTy≥
 || Tokí =
TokíExã∫Ty≥
)

382 
	`¥ötf
("Token S while (Token == TokenStaticType || Token == TokenAutoType || Token == TokenRegisterType || Token == TokenExternType");

383 i‡(
Tokí
 =
TokíSèticTy≥
)

384 
SèticQuÆifõr
 = 
TRUE
;

386 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
TRUE
);

389 i‡(
IsSètic
 !
NULL
)

390 *
IsSètic
 = 
SèticQuÆifõr
;

393 i‡(
Tokí
 =
TokíSig√dTy≥
 || Tokí =
TokíUnsig√dTy≥
)

395 
	`¥ötf
("sign unsign chk\n");

396 
LexTokí
 
FﬁlowTokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
FALSE
);

397 
Unsig√d
 = (
Tokí
 =
TokíUnsig√dTy≥
);

399 i‡(
FﬁlowTokí
 !
TokíI¡Ty≥
 && FﬁlowTokí !
TokíL⁄gTy≥
 && FﬁlowTokí !
TokíSh‹tTy≥
 && FﬁlowTokí !
TokíCh¨Ty≥
)

401 i‡(
Tokí
 =
TokíUnsig√dTy≥
)

402 *
Typ
 = &
Unsig√dI¡Ty≥
;

404 *
Typ
 = &
I¡Ty≥
;

407  
TRUE
;

410 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexîVÆue
, 
TRUE
);

413 
Tokí
)

415 
TokíI¡Ty≥
: *
Typ
 = 
Unsig√d
 ? &
Unsig√dI¡Ty≥
 : &
I¡Ty≥
; ;

416 
TokíSh‹tTy≥
: *
Typ
 = 
Unsig√d
 ? &
Unsig√dSh‹tTy≥
 : &
Sh‹tTy≥
; ;

417 
TokíCh¨Ty≥
: *
Typ
 = &
Ch¨Ty≥
; ;

418 
TokíL⁄gTy≥
: *
Typ
 = 
Unsig√d
 ? &
Unsig√dL⁄gTy≥
 : &
L⁄gTy≥
; ;

419 #i‚de‡
NO_FP


420 
TokíFlﬂtTy≥
: 
TokíDoubÀTy≥
: *
Typ
 = &
FPTy≥
; ;

422 
TokíVoidTy≥
:

425 *
Typ
 = &
VoidTy≥
; ;

427 
TokíSåu˘Ty≥
: 
TokíUni⁄Ty≥
:

428 i‡(*
Typ
 !
NULL
)

429 
	`ProgømFaû
(
P¨£r
, "badÅype declaration");

431 
	`Ty≥P¨£Såu˘
(
P¨£r
, 
Typ
, 
Tokí
 =
TokíSåu˘Ty≥
);

434 
TokíEnumTy≥
:

435 i‡(*
Typ
 !
NULL
)

436 
	`ProgømFaû
(
P¨£r
, "badÅype declaration");

438 
	`Ty≥P¨£Enum
(
P¨£r
, 
Typ
);

441 
TokíIdítifõr
:

444 
	`V¨übÀGë
(
P¨£r
, 
LexîVÆue
->
VÆ
->
Idítifõr
, &
V¨VÆue
);

445 *
Typ
 = 
V¨VÆue
->
VÆ
->Typ;

448 : 
	`P¨£rC›y
(
P¨£r
, &
Bef‹e
);  
FALSE
;

452  
TRUE
;

453 
	}
}

456 
VÆueTy≥
 *
	$Ty≥P¨£Back
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
FromTy≥
)

458 
LexTokí
 
Tokí
;

459 
P¨£Sèã
 
Bef‹e
;

461 
	`P¨£rC›y
(&
Bef‹e
, 
P¨£r
);

462 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
);

463 i‡(
Tokí
 =
TokíLe·Squ¨eBøckë
)

466 
RunMode
 
OldMode
 = 
P¨£r
->
Mode
;

467 
AºaySize
;

468 
P¨£r
->
Mode
 = 
RunModeRun
;

469 
AºaySize
 = 
	`Ex¥essi⁄P¨£I¡
(
P¨£r
);

470 
P¨£r
->
Mode
 = 
OldMode
;

472 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíRightSqu¨eBøckë
)

473 
	`ProgømFaû
(
P¨£r
, "']'Éxpected");

475  
	`Ty≥GëM©chög
(
P¨£r
, 
	`Ty≥P¨£Back
(P¨£r, 
FromTy≥
), 
Ty≥Aºay
, 
AºaySize
, 
SåEm±y
, 
TRUE
);

480 
	`P¨£rC›y
(
P¨£r
, &
Bef‹e
);

481  
FromTy≥
;

483 
	}
}

486 
	$Ty≥P¨£IdítP¨t
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
BasicTyp
, VÆueTy≥ **
Typ
, **
Idítifõr
)

488 
P¨£Sèã
 
Bef‹e
;

489 
LexTokí
 
Tokí
;

490 
VÆue
 *
LexVÆue
;

491 
D⁄e
 = 
FALSE
;

492 *
Typ
 = 
BasicTyp
;

493 *
Idítifõr
 = 
SåEm±y
;

495 !
D⁄e
)

497 
	`P¨£rC›y
(&
Bef‹e
, 
P¨£r
);

498 
Tokí
 = 
	`LexGëTokí
(
P¨£r
, &
LexVÆue
, 
TRUE
);

499 
Tokí
)

501 
TokíO≥nBøckë
:

502 i‡(*
Typ
 !
NULL
)

503 
	`ProgømFaû
(
P¨£r
, "badÅype declaration");

505 
	`Ty≥P¨£
(
P¨£r
, 
Typ
, 
Idítifõr
, 
NULL
);

506 i‡(
	`LexGëTokí
(
P¨£r
, 
NULL
, 
TRUE
Ë!
TokíClo£Bøckë
)

507 
	`ProgømFaû
(
P¨£r
, "')'Éxpected");

510 
TokíA°îisk
:

511 i‡(*
Typ
 =
NULL
)

512 
	`ProgømFaû
(
P¨£r
, "badÅype declaration");

514 *
Typ
 = 
	`Ty≥GëM©chög
(
P¨£r
, *Typ, 
Ty≥Poöãr
, 0, 
SåEm±y
, 
TRUE
);

517 
TokíIdítifõr
:

518 i‡(*
Typ
 =
NULL
 || *
Idítifõr
 !
SåEm±y
)

519 
	`ProgømFaû
(
P¨£r
, "badÅype declaration");

521 *
Idítifõr
 = 
LexVÆue
->
VÆ
->Identifier;

522 
D⁄e
 = 
TRUE
;

525 : 
	`P¨£rC›y
(
P¨£r
, &
Bef‹e
); 
D⁄e
 = 
TRUE
; ;

529 i‡(*
Typ
 =
NULL
)

530 
	`ProgømFaû
(
P¨£r
, "badÅype declaration");

532 i‡(*
Idítifõr
 !
SåEm±y
)

535 *
Typ
 = 
	`Ty≥P¨£Back
(
P¨£r
, *Typ);

537 
	}
}

540 
	$Ty≥P¨£
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 **
Typ
, **
Idítifõr
, *
IsSètic
)

542 
VÆueTy≥
 *
BasicTy≥
;

544 
	`Ty≥P¨£Fr⁄t
(
P¨£r
, &
BasicTy≥
, 
IsSètic
);

546 
	`Ty≥P¨£IdítP¨t
(
P¨£r
, 
BasicTy≥
, 
Typ
, 
Idítifõr
);

547 
	}
}

	@variable.c

1 
	~"öãΩªãr.h
"

4 
	#MAX_TMP_COPY_BUF
 256

	)

7 
TabÀ
 
	gGlobÆTabÀ
;

8 
TabÀE¡ry
 *
	gGlobÆHashTabÀ
[
GLOBAL_TABLE_SIZE
];

11 
TabÀ
 
	gSåögLôîÆTabÀ
;

12 
TabÀE¡ry
 *
	gSåögLôîÆHashTabÀ
[
STRING_LITERAL_TABLE_SIZE
];

15 
SèckFøme
 *
	gT›SèckFøme
 = 
NULL
;

19 
	$V¨übÀInô
()

21 
	`TabÀInôTabÀ
(&
GlobÆTabÀ
, &
GlobÆHashTabÀ
[0], 
GLOBAL_TABLE_SIZE
, 
TRUE
);

22 
	`TabÀInôTabÀ
(&
SåögLôîÆTabÀ
, &
SåögLôîÆHashTabÀ
[0], 
STRING_LITERAL_TABLE_SIZE
, 
TRUE
);

23 
T›SèckFøme
 = 
NULL
;

24 
	}
}

27 
	$V¨übÀFªe
(
VÆue
 *
VÆ
)

29 i‡(
VÆ
->
VÆOnHóp
)

32 i‡(
VÆ
->
Typ
 =&
Fun˘i⁄Ty≥
 && VÆ->VÆ->
FuncDef
.
I¡rösic
 =
NULL
 && VÆ->VÆ->FuncDef.
Body
.
Pos
 != NULL)

33 
	`HópFªeMem
((*)
VÆ
->VÆ->
FuncDef
.
Body
.
Pos
);

36 i‡(
VÆ
->
Typ
 =&
Ma¸oTy≥
)

37 
	`HópFªeMem
((*)
VÆ
->VÆ->
Ma¸oDef
.
Body
.
Pos
);

40 
	`HópFªeMem
(
VÆ
);

42 
	}
}

45 
	$V¨übÀTabÀCÀ™up
(
TabÀ
 *
HashTabÀ
)

47 
TabÀE¡ry
 *
E¡ry
;

48 
TabÀE¡ry
 *
NextE¡ry
;

49 
Cou¡
;

51 
Cou¡
 = 0; Cou¡ < 
HashTabÀ
->
Size
; Count++)

53 
E¡ry
 = 
HashTabÀ
->HashTabÀ[
Cou¡
]; E¡ry !
NULL
; E¡ry = 
NextE¡ry
)

55 
NextE¡ry
 = 
E¡ry
->
Next
;

56 
	`V¨übÀFªe
(
E¡ry
->
p
.
v
.
VÆ
);

59 
	`HópFªeMem
(
E¡ry
);

62 
	}
}

64 
	$V¨übÀCÀ™up
()

66 
	`V¨übÀTabÀCÀ™up
(&
GlobÆTabÀ
);

67 
	`V¨übÀTabÀCÀ™up
(&
SåögLôîÆTabÀ
);

68 
	}
}

71 *
	$V¨übÀAŒoc
(
P¨£Sèã
 *
P¨£r
, 
Size
, 
OnHóp
)

73 *
NewVÆue
;

75 i‡(
OnHóp
)

76 
NewVÆue
 = 
	`HópAŒocMem
(
Size
);

78 
NewVÆue
 = 
	`HópAŒocSèck
(
Size
);

80 i‡(
NewVÆue
 =
NULL
)

81 
	`ProgømFaû
(
P¨£r
, "out of memory");

83 #ifde‡
DEBUG_HEAP


84 i‡(!
OnHóp
)

85 
	`¥ötf
("pushög %dáà0x%lx\n", 
Size
, ()
NewVÆue
);

88  
NewVÆue
;

89 
	}
}

92 
VÆue
 *
	$V¨übÀAŒocVÆueAndD©a
(
P¨£Sèã
 *
P¨£r
, 
D©aSize
, 
IsLVÆue
, 
VÆue
 *
LVÆueFrom
, 
OnHóp
)

94 
VÆue
 *
NewVÆue
 = 
	`V¨übÀAŒoc
(
P¨£r
, 
	`MEM_ALIGN
((VÆue)Ë+ 
D©aSize
, 
OnHóp
);

95 
NewVÆue
->
VÆ
 = (
AnyVÆue
 *)((*)NewVÆuê+ 
	`MEM_ALIGN
((
VÆue
)));

96 
NewVÆue
->
VÆOnHóp
 = 
OnHóp
;

97 
NewVÆue
->
VÆOnSèck
 = !
OnHóp
;

98 
NewVÆue
->
IsLVÆue
 = IsLValue;

99 
NewVÆue
->
LVÆueFrom
 = LValueFrom;

101  
NewVÆue
;

102 
	}
}

105 
VÆue
 *
	$V¨übÀAŒocVÆueFromTy≥
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
Typ
, 
IsLVÆue
, 
VÆue
 *
LVÆueFrom
, 
OnHóp
)

107 
Size
 = 
	`Ty≥Size
(
Typ
, Typ->
AºaySize
, 
FALSE
);

108 
VÆue
 *
NewVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
P¨£r
, 
Size
, 
IsLVÆue
, 
LVÆueFrom
, 
OnHóp
);

110 
NewVÆue
->
Typ
 = Typ;

112  
NewVÆue
;

113 
	}
}

116 
VÆue
 *
	$V¨übÀAŒocVÆueAndC›y
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
FromVÆue
, 
OnHóp
)

118 
VÆueTy≥
 *
DTy≥
 = 
FromVÆue
->
Typ
;

119 
VÆue
 *
NewVÆue
;

120 
TmpBuf
[
MAX_TMP_COPY_BUF
];

121 
C›ySize
 = 
	`Ty≥SizeVÆue
(
FromVÆue
, 
TRUE
);

124 
	`mem˝y
((*)&
TmpBuf
[0], (*)
FromVÆue
->
VÆ
, 
C›ySize
);

125 
NewVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
P¨£r
, 
C›ySize
, 
FromVÆue
->
IsLVÆue
, FromVÆue->
LVÆueFrom
, 
OnHóp
);

126 
NewVÆue
->
Typ
 = 
DTy≥
;

127 
	`mem˝y
((*)
NewVÆue
->
VÆ
, (*)&
TmpBuf
[0], 
C›ySize
);

129  
NewVÆue
;

130 
	}
}

133 
VÆue
 *
	$V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£Sèã
 *
P¨£r
, 
VÆueTy≥
 *
Typ
, 
AnyVÆue
 *
FromVÆue
, 
IsLVÆue
, 
VÆue
 *
LVÆueFrom
)

135 
VÆue
 *
NewVÆue
 = 
	`V¨übÀAŒoc
(
P¨£r
, (VÆue), 
FALSE
);

136 
NewVÆue
->
Typ
 = Typ;

137 
NewVÆue
->
VÆ
 = 
FromVÆue
;

138 
NewVÆue
->
VÆOnHóp
 = 
FALSE
;

139 
NewVÆue
->
VÆOnSèck
 = 
FALSE
;

140 
NewVÆue
->
IsLVÆue
 = IsLValue;

141 
NewVÆue
->
LVÆueFrom
 = LValueFrom;

143  
NewVÆue
;

144 
	}
}

147 
VÆue
 *
	$V¨übÀAŒocVÆueSh¨ed
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
FromVÆue
)

149  
	`V¨übÀAŒocVÆueFromExi°ögD©a
(
P¨£r
, 
FromVÆue
->
Typ
, FromVÆue->
VÆ
, FromVÆue->
IsLVÆue
, FromVÆue->IsLVÆuê? FromVÆuê: 
NULL
);

150 
	}
}

153 
VÆue
 *
	$V¨übÀDeföe
(
P¨£Sèã
 *
P¨£r
, *
Idít
, 
VÆue
 *
InôVÆue
, 
VÆueTy≥
 *
Typ
, 
MakeWrôabÀ
)

156 
VÆue
 *
AssignVÆue
;

158 i‡(
InôVÆue
 !
NULL
)

159 
AssignVÆue
 = 
	`V¨übÀAŒocVÆueAndC›y
(
P¨£r
, 
InôVÆue
, 
T›SèckFøme
 =
NULL
);

161 
AssignVÆue
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, 
Typ
, 
MakeWrôabÀ
, 
NULL
, 
T›SèckFøme
 == NULL);

163 
AssignVÆue
->
IsLVÆue
 = 
MakeWrôabÀ
;

165 i‡(!
	`TabÀSë
((
T›SèckFøme
 =
NULL
Ë? &
GlobÆTabÀ
 : &T›SèckFøme->
LoˇlTabÀ
, 
Idít
, 
AssignVÆue
, 
P¨£r
 ? ((*)P¨£r->
FûeName
Ë: NULL, P¨£∏? P¨£r->
Löe
 : 0, P¨£∏? P¨£r->
Ch¨a˘îPos
 : 0))

166 
	`ProgømFaû
(
P¨£r
, "'%s' i†Æªady deföed", 
Idít
);

168  
AssignVÆue
;

169 
	}
}

172 
VÆue
 *
	$V¨übÀDeföeButIgn‹eIdítiˇl
(
P¨£Sèã
 *
P¨£r
, *
Idít
, 
VÆueTy≥
 *
Typ
, 
IsSètic
, *
Fú°Visô
)

175 
VÆue
 *
Exi°ögVÆue
;

176 c⁄° *
De˛FûeName
;

177 
De˛Löe
;

178 
De˛Cﬁumn
;

180 i‡(
IsSètic
)

182 
M™gÀdName
[
LINEBUFFER_MAX
];

183 *
MNPos
 = &
M™gÀdName
[0];

184 *
MNEnd
 = &
M™gÀdName
[
LINEBUFFER_MAX
-1];

185 c⁄° *
Regi°îedM™gÀdName
;

188 
	`mem£t
((*)&
M™gÀdName
, '\0', (MangledName));

189 *
MNPos
++ = '/';

190 
	`°∫˝y
(
MNPos
, (*)
P¨£r
->
FûeName
, 
MNEnd
 - MNPos);

191 
MNPos
 +
	`°æí
(MNPos);

193 i‡(
T›SèckFøme
 !
NULL
)

196 i‡(
MNEnd
 - 
MNPos
 > 0) *MNPos++ = '/';

197 
	`°∫˝y
(
MNPos
, (*)
T›SèckFøme
->
FuncName
, 
MNEnd
 - MNPos);

198 
MNPos
 +
	`°æí
(MNPos);

201 i‡(
MNEnd
 - 
MNPos
 > 0) *MNPos++ = '/';

202 
	`°∫˝y
(
MNPos
, 
Idít
, 
MNEnd
 - MNPos);

203 
Regi°îedM™gÀdName
 = 
	`TabÀSåRegi°î
(
M™gÀdName
);

206 i‡(!
	`TabÀGë
(&
GlobÆTabÀ
, 
Regi°îedM™gÀdName
, &
Exi°ögVÆue
, &
De˛FûeName
, &
De˛Löe
, &
De˛Cﬁumn
))

209 
Exi°ögVÆue
 = 
	`V¨übÀAŒocVÆueFromTy≥
(
P¨£r
, 
Typ
, 
TRUE
, 
NULL
, TRUE);

210 
	`TabÀSë
(&
GlobÆTabÀ
, (*)
Regi°îedM™gÀdName
, 
Exi°ögVÆue
, (*)
P¨£r
->
FûeName
, P¨£r->
Löe
, P¨£r->
Ch¨a˘îPos
);

211 *
Fú°Visô
 = 
TRUE
;

215 
	`V¨übÀDeföePœtf‹mV¨
(
P¨£r
, 
Idít
, 
Exi°ögVÆue
->
Typ
, Exi°ögVÆue->
VÆ
, 
TRUE
);

216  
Exi°ögVÆue
;

220 i‡(
P¨£r
->
Löe
 !0 && 
	`TabÀGë
((
T›SèckFøme
 =
NULL
Ë? &
GlobÆTabÀ
 : &T›SèckFøme->
LoˇlTabÀ
, 
Idít
, &
Exi°ögVÆue
, &
De˛FûeName
, &
De˛Löe
, &
De˛Cﬁumn
)

221 && 
De˛FûeName
 =
P¨£r
->
FûeName
 && 
De˛Löe
 =P¨£r->
Löe
 && 
De˛Cﬁumn
 =P¨£r->
Ch¨a˘îPos
)

222  
Exi°ögVÆue
;

224  
	`V¨übÀDeföe
(
P¨£r
, 
Idít
, 
NULL
, 
Typ
, 
TRUE
);

226 
	}
}

229 
	$V¨übÀDeföed
(c⁄° *
Idít
)

231 
VÆue
 *
FoundVÆue
;

233 i‡(
T›SèckFøme
 =
NULL
 || !
	`TabÀGë
(&T›SèckFøme->
LoˇlTabÀ
, 
Idít
, &
FoundVÆue
, NULL, NULL, NULL))

235 i‡(!
	`TabÀGë
(&
GlobÆTabÀ
, 
Idít
, &
FoundVÆue
, 
NULL
, NULL, NULL)){

237  
FALSE
;

241  
TRUE
;

242 
	}
}

245 
	$V¨übÀGë
(
P¨£Sèã
 *
P¨£r
, c⁄° *
Idít
, 
VÆue
 **
LVÆ
)

248 i‡(
T›SèckFøme
 =
NULL
 || !
	`TabÀGë
(&T›SèckFøme->
LoˇlTabÀ
, 
Idít
, 
LVÆ
, NULL, NULL, NULL))

250 i‡(!
	`TabÀGë
(&
GlobÆTabÀ
, 
Idít
, 
LVÆ
, 
NULL
, NULL, NULL)){

251 
	`¥ötf
("ö V¨übÀGë,Örogøm faû %s\n",
Idít
);

252 
	`ProgømFaû
(
P¨£r
, "'%s' i†undeföed", 
Idít
);

255 
	}
}

258 
	$V¨übÀDeföePœtf‹mV¨
(
P¨£Sèã
 *
P¨£r
, *
Idít
, 
VÆueTy≥
 *
Typ
, 
AnyVÆue
 *
FromVÆue
, 
IsWrôabÀ
)

260 
VÆue
 *
SomeVÆue
 = 
	`V¨übÀAŒocVÆueAndD©a
(
NULL
, 0, 
IsWrôabÀ
, NULL, 
TRUE
);

261 
SomeVÆue
->
Typ
 = Typ;

262 
SomeVÆue
->
VÆ
 = 
FromVÆue
;

264 i‡(!
	`TabÀSë
((
T›SèckFøme
 =
NULL
Ë? &
GlobÆTabÀ
 : &T›SèckFøme->
LoˇlTabÀ
, 
	`TabÀSåRegi°î
(
Idít
), 
SomeVÆue
, 
P¨£r
 ? P¨£r->
FûeName
 : NULL, P¨£∏? P¨£r->
Löe
 : 0, P¨£∏? P¨£r->
Ch¨a˘îPos
 : 0))

265 
	`ProgømFaû
(
P¨£r
, "'%s' i†Æªady deföed", 
Idít
);

266 
	}
}

269 
	$V¨übÀSèckP›
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
V¨
)

271 
Suc˚ss
;

273 #ifde‡
DEBUG_HEAP


274 i‡(
V¨
->
VÆOnSèck
)

275 
	`¥ötf
("p›pög %ldáà0x%lx\n", ()((
VÆue
Ë+ 
	`Ty≥SizeVÆue
(
V¨
, 
FALSE
)), ()Var);

278 i‡(
V¨
->
VÆOnHóp
)

280 i‡(
V¨
->
VÆ
 !
NULL
)

281 
	`HópFªeMem
(
V¨
->
VÆ
);

283 
Suc˚ss
 = 
	`HópP›Sèck
(
V¨
, (
VÆue
));

285 i‡(
V¨
->
VÆOnSèck
)

286 
Suc˚ss
 = 
	`HópP›Sèck
(
V¨
, (
VÆue
Ë+ 
	`Ty≥SizeVÆue
(V¨, 
FALSE
));

288 
Suc˚ss
 = 
	`HópP›Sèck
(
V¨
, (
VÆue
));

290 i‡(!
Suc˚ss
)

291 
	`ProgømFaû
(
P¨£r
, "stack underrun");

292 
	}
}

295 
	$V¨übÀSèckFømeAdd
(
P¨£Sèã
 *
P¨£r
, c⁄° *
FuncName
, 
NumP¨ams
)

297 
SèckFøme
 *
NewFøme
;

299 
	`HópPushSèckFøme
();

300 
NewFøme
 = 
	`HópAŒocSèck
((
SèckFøme
Ë+ (
VÆue
 *Ë* 
NumP¨ams
);

301 i‡(
NewFøme
 =
NULL
)

302 
	`ProgømFaû
(
P¨£r
, "out of memory");

304 
	`P¨£rC›y
(&
NewFøme
->
Rëu∫P¨£r
, 
P¨£r
);

305 
NewFøme
->
FuncName
 = FuncName;

306 
NewFøme
->
P¨amëî
 = (
NumP¨ams
 > 0Ë? ((*)((*)NewFømê+ (
SèckFøme
))Ë: 
NULL
;

307 
	`TabÀInôTabÀ
(&
NewFøme
->
LoˇlTabÀ
, &NewFøme->
LoˇlHashTabÀ
[0], 
LOCAL_TABLE_SIZE
, 
FALSE
);

308 
NewFøme
->
PªviousSèckFøme
 = 
T›SèckFøme
;

309 
T›SèckFøme
 = 
NewFøme
;

310 
	}
}

313 
	$V¨übÀSèckFømeP›
(
P¨£Sèã
 *
P¨£r
)

315 i‡(
T›SèckFøme
 =
NULL
)

316 
	`ProgømFaû
(
P¨£r
, "stack isÉmpty - can't go back");

318 
	`P¨£rC›y
(
P¨£r
, &
T›SèckFøme
->
Rëu∫P¨£r
);

319 
T›SèckFøme
 = T›SèckFøme->
PªviousSèckFøme
;

320 
	`HópP›SèckFøme
();

321 
	}
}

324 
VÆue
 *
	$V¨übÀSåögLôîÆGë
(*
Idít
)

326 
VÆue
 *
LVÆ
 = 
NULL
;

328 i‡(
	`TabÀGë
(&
SåögLôîÆTabÀ
, 
Idít
, &
LVÆ
, 
NULL
, NULL, NULL))

329  
LVÆ
;

331  
NULL
;

332 
	}
}

335 
	$V¨übÀSåögLôîÆDeföe
(*
Idít
, 
VÆue
 *
VÆ
)

337 
	`TabÀSë
(&
SåögLôîÆTabÀ
, 
Idít
, 
VÆ
, 
NULL
, 0, 0);

338 
	}
}

341 *
	$V¨übÀDîe„ªn˚Poöãr
(
P¨£Sèã
 *
P¨£r
, 
VÆue
 *
PoöãrVÆue
, VÆuê**
DîefVÆ
, *
DîefOff£t
, 
VÆueTy≥
 **
DîefTy≥
, *
DîefIsLVÆue
)

343 i‡(
DîefVÆ
 !
NULL
)

344 *
DîefVÆ
 = 
NULL
;

346 i‡(
DîefTy≥
 !
NULL
)

347 *
DîefTy≥
 = 
PoöãrVÆue
->
Typ
->
FromTy≥
;

349 i‡(
DîefOff£t
 !
NULL
)

350 *
DîefOff£t
 = 0;

352 i‡(
DîefIsLVÆue
 !
NULL
)

353 *
DîefIsLVÆue
 = 
TRUE
;

355  
PoöãrVÆue
->
VÆ
->
Poöãr
;

356 
	}
}

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

102 || 
deföed
 
__LDBL_COMPAT
)

103 #ifde‡
__LDBL_COMPAT


105 #ifde‡
__USE_ISOC99


106 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

107 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

108 #ifde‡
__REDIRECT_NTH


109 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

110 
__∆dbl_√xâow¨df
)

111 
	`__©åibuã__
 ((
__c⁄°__
));

112 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

113 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

115 (
__x
, 
__y
),

116 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

121 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


123 #unde‡
__MATHDECL_1


124 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

125 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

126 
¨gs
, 
Æüs
)

	)

127 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

128 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	#__MATH_DECLARE_LDOUBLE
 1

	)

146 
	~<bôs/m©hˇŒs.h
>

147 #unde‡
_MdoubÀ_


148 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


149 #unde‡
_MdoubÀ_END_NAMESPACE


150 #unde‡
__MATH_PRECNAME


155 #unde‡
__MATHDECL_1


156 #unde‡
__MATHDECL


157 #unde‡
__MATHCALL


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


162 
signgam
;

167 #ifde‡
__USE_ISOC99


205 
FP_NAN
,

206 
	#FP_NAN
 
FP_NAN


	)

207 
FP_INFINITE
,

208 
	#FP_INFINITE
 
FP_INFINITE


	)

209 
FP_ZERO
,

210 
	#FP_ZERO
 
FP_ZERO


	)

211 
FP_SUBNORMAL
,

212 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

213 
FP_NORMAL


214 
	#FP_NORMAL
 
FP_NORMAL


	)

218 #ifde‡
__NO_LONG_DOUBLE_MATH


219 
	#Â˛assify
(
x
) \

220 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

222 
	#Â˛assify
(
x
) \

223 ( (
x
) ==  () \

224 ? 
	`__Â˛assifyf
 (
x
) \

225 :  (
x
) ==  () \

226 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

230 #ifde‡
__NO_LONG_DOUBLE_MATH


231 
	#signbô
(
x
) \

232 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

234 
	#signbô
(
x
) \

235 ( (
x
) ==  () \

236 ? 
	`__signbôf
 (
x
) \

237 :  (
x
) ==  () \

238 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

242 #ifde‡
__NO_LONG_DOUBLE_MATH


243 
	#isföôe
(
x
) \

244 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

246 
	#isföôe
(
x
) \

247 ( (
x
) ==  () \

248 ? 
	`__föôef
 (
x
) \

249 :  (
x
) ==  () \

250 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

254 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

258 #ifde‡
__NO_LONG_DOUBLE_MATH


259 
	#i¢™
(
x
) \

260 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

262 
	#i¢™
(
x
) \

263 ( (
x
) ==  () \

264 ? 
	`__i¢™f
 (
x
) \

265 :  (
x
) ==  () \

266 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

270 #ifde‡
__NO_LONG_DOUBLE_MATH


271 
	#isöf
(
x
) \

272 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

274 
	#isöf
(
x
) \

275 ( (
x
) ==  () \

276 ? 
	`__isöff
 (
x
) \

277 :  (
x
) ==  () \

278 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

282 
	#MATH_ERRNO
 1

	)

283 
	#MATH_ERREXCEPT
 2

	)

288 #i‚de‡
__FAST_MATH__


289 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

294 #ifdef 
__USE_MISC


298 
_IEEE_
 = -1,

299 
_SVID_
,

300 
_XOPEN_
,

301 
_POSIX_
,

302 
_ISOC_


303 } 
	t_LIB_VERSION_TYPE
;

308 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

312 #ifde‡
__USE_SVID


318 #ifde‡
__˝lu•lus


319 
__ex˚±i⁄


321 
ex˚±i⁄


324 
ty≥
;

325 *
«me
;

326 
¨g1
;

327 
¨g2
;

328 
ªtvÆ
;

329 
	}
};

331 #ifde‡
__˝lu•lus


332 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

334 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

337 
	#X_TLOSS
 1.41484755040568800000e+16

	)

340 
	#DOMAIN
 1

	)

341 
	#SING
 2

	)

342 
	#OVERFLOW
 3

	)

343 
	#UNDERFLOW
 4

	)

344 
	#TLOSS
 5

	)

345 
	#PLOSS
 6

	)

348 
	#HUGE
 3.40282347e+38F

	)

352 #ifde‡
__USE_XOPEN


354 
	#MAXFLOAT
 3.40282347e+38F

	)

361 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


362 
	#M_E
 2.7182818284590452354

	)

363 
	#M_LOG2E
 1.4426950408889634074

	)

364 
	#M_LOG10E
 0.43429448190325182765

	)

365 
	#M_LN2
 0.69314718055994530942

	)

366 
	#M_LN10
 2.30258509299404568402

	)

367 
	#M_PI
 3.14159265358979323846

	)

368 
	#M_PI_2
 1.57079632679489661923

	)

369 
	#M_PI_4
 0.78539816339744830962

	)

370 
	#M_1_PI
 0.31830988618379067154

	)

371 
	#M_2_PI
 0.63661977236758134308

	)

372 
	#M_2_SQRTPI
 1.12837916709551257390

	)

373 
	#M_SQRT2
 1.41421356237309504880

	)

374 
	#M_SQRT1_2
 0.70710678118654752440

	)

380 #ifde‡
__USE_GNU


381 
	#M_El
 2.7182818284590452353602874713526625L

	)

382 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

383 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

384 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

385 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

386 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

387 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

388 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

389 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

390 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

391 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

392 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

393 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

400 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


401 
	#__NO_MATH_INLINES
 1

	)

404 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

411 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

412 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

413 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

414 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

415 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

416 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

420 #ifde‡
__USE_EXTERN_INLINES


421 
	~<bôs/m©hölöe.h
>

426 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

427 
	~<bôs/m©h-föôe.h
>

430 #ifde‡
__USE_ISOC99


434 #i‚de‡
isgª©î


435 
	#isgª©î
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

442 #i‚de‡
isgª©îequÆ


443 
	#isgª©îequÆ
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

450 #i‚de‡
i¶ess


451 
	#i¶ess
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

458 #i‚de‡
i¶es£quÆ


459 
	#i¶es£quÆ
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

466 #i‚de‡
i¶essgª©î


467 
	#i¶essgª©î
(
x
, 
y
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

470 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

474 #i‚de‡
isun‹dîed


475 
	#isun‹dîed
(
u
, 
v
) \

476 (
__exãnsi⁄__
 \

477 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

478 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

483 
	g__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@
1
.
1
/usr/include
121
2357
clibrary.c
cstdlib/ctype.c
cstdlib/ctype.c
cstdlib/errno.c
cstdlib/errno.c
cstdlib/math.c
cstdlib/math.c
cstdlib/stdbool.c
cstdlib/stdbool.c
cstdlib/stdio.c
cstdlib/stdio.c
cstdlib/stdlib.c
cstdlib/stdlib.c
cstdlib/string.c
cstdlib/string.c
cstdlib/time.c
cstdlib/time.c
cstdlib/unistd.c
cstdlib/unistd.c
expression.c
fcntl.h
heap.c
include.c
interpreter.h
lex.c
parse.c
picoc.c
picoc.h
platform.c
platform.h
platform/library_ffox.c
platform/library_ffox.c
platform/library_srv1.c
platform/library_srv1.c
platform/library_surveyor.c
platform/library_surveyor.c
platform/library_unix.c
platform/library_unix.c
platform/platform_ffox.c
platform/platform_ffox.c
platform/platform_surveyor.c
platform/platform_surveyor.c
platform/platform_unix.c
platform/platform_unix.c
stdio.h
table.c
tests/00_assignment.c
tests/01_comment.c
tests/02_printf.c
tests/03_struct.c
tests/04_for.c
tests/05_array.c
tests/06_case.c
tests/07_function.c
tests/08_while.c
tests/09_do_while.c
tests/10_pointer.c
tests/11_precedence.c
tests/12_hashdefine.c
tests/13_integer_literals.c
tests/14_if.c
tests/15_recursion.c
tests/16_nesting.c
tests/17_enum.c
tests/18_include.c
tests/18_include.h
tests/19_pointer_arithmetic.c
tests/20_pointer_comparison.c
tests/21_char_array.c
tests/22_floating_point.c
tests/23_type_coercion.c
tests/24_math_library.c
tests/26_character_constants.c
tests/27_sizeof.c
tests/28_strings.c
tests/29_array_address.c
tests/30_hanoi.c
tests/31_args.c
tests/32_led.c
tests/33_ternary_op.c
tests/34_array_assignment.c
tests/35_sizeof.c
tests/36_array_initialisers.c
tests/37_sprintf.c
tests/38_multiple_array_index.c
tests/39_typedef.c
tests/40_stdio.c
tests/41_hashif.c
tests/42_function_pointer.c
tests/43_void_param.c
tests/44_scoped_declarations.c
tests/45_empty_for.c
tests/46_grep.c
tests/47_switch_return.c
tests/48_nested_break.c
tests/49_bracket_evaluation.c
tests/50_logical_second_arg.c
tests/51_static.c
tests/52_unnamed_enum.c
tests/54_goto.c
tests/quicksort.c
tests/sample.c
tmp.c
type.c
variable.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/setjmp.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/xlocale.h
